
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 23 13:44:51 IST 2022
//----------------------------------------------------

package lazabs.parser;

import lazabs.ast.ASTree.*;
import lazabs.types.*;
import scala.None;
import java_cup.runtime.*;
import java.util.*;
import java.math.BigInteger;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 23 13:44:51 IST 2022
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\005\000\002\005\002\000\002\005\003" +
    "\000\002\006\004\000\002\007\003\000\002\007\004\000" +
    "\002\011\003\000\002\011\005\000\002\010\003\000\002" +
    "\010\005\000\002\012\003\000\002\012\003\000\002\041" +
    "\005\000\002\024\003\000\002\024\004\000\002\023\003" +
    "\000\002\023\003\000\002\023\007\000\002\004\007\000" +
    "\002\034\003\000\002\034\004\000\002\035\013\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\040\010\000\002\040\010\000\002\036\011" +
    "\000\002\036\003\000\002\037\011\000\002\037\007\000" +
    "\002\037\006\000\002\037\010\000\002\044\012\000\002" +
    "\043\003\000\002\043\004\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\006\000\002\045\006" +
    "\000\002\046\005\000\002\046\002\000\002\046\004\000" +
    "\002\047\003\000\002\047\005\000\002\050\005\000\002" +
    "\033\003\000\002\033\006\000\002\033\006\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\020\003\000\002\020\005\000\002\014\010\000" +
    "\002\014\010\000\002\014\005\000\002\014\011\000\002" +
    "\014\007\000\002\014\010\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\005\000\002\014\005" +
    "\000\002\014\006\000\002\014\004\000\002\014\004\000" +
    "\002\014\012\000\002\014\003\000\002\014\003\000\002" +
    "\014\005\000\002\014\004\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\007\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\006\000\002\015\005\000\002\015\006\000\002\015" +
    "\005\000\002\015\006\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\017\003\000\002\017\004\000" +
    "\002\025\005\000\002\025\004\000\002\022\003\000\002" +
    "\022\004\000\002\021\003\000\002\021\003\000\002\026" +
    "\003\000\002\026\004\000\002\027\006\000\002\027\012" +
    "\000\002\030\003\000\002\031\003\000\002\031\005\000" +
    "\002\016\003\000\002\032\004\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\010\005\ufffd\101\011\103\004\001\002\000" +
    "\006\062\u0116\110\u0115\001\002\000\004\002\000\001\002" +
    "\000\004\005\015\001\002\000\004\002\u0113\001\002\000" +
    "\006\005\ufffc\103\004\001\002\000\052\016\074\040\076" +
    "\041\114\047\071\051\072\052\124\057\106\060\104\063" +
    "\113\064\122\065\100\067\025\070\u0103\072\103\073\117" +
    "\074\121\105\115\106\105\107\107\110\101\001\002\000" +
    "\006\005\ufffa\103\ufffa\001\002\000\006\005\ufffd\103\004" +
    "\001\002\000\004\005\015\001\002\000\004\110\017\001" +
    "\002\000\004\002\ufffe\001\002\000\004\074\020\001\002" +
    "\000\014\004\032\067\025\070\031\071\030\101\011\001" +
    "\002\000\016\004\uffeb\067\uffeb\070\uffeb\071\uffeb\075\uffeb" +
    "\101\uffeb\001\002\000\070\004\uffe5\011\uffe5\013\uffe5\016" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\047\uffe5\051\uffe5\052\uffe5" +
    "\057\uffe5\060\uffe5\063\uffe5\064\uffe5\065\uffe5\067\uffe5\070" +
    "\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\101\uffe5" +
    "\105\uffe5\106\uffe5\107\uffe5\110\uffe5\001\002\000\072\004" +
    "\uffe1\007\375\011\uffe1\013\uffe1\016\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\047\uffe1\051\uffe1\052\uffe1\057\uffe1\060\uffe1\063" +
    "\uffe1\064\uffe1\065\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1" +
    "\073\uffe1\074\uffe1\075\uffe1\101\uffe1\105\uffe1\106\uffe1\107" +
    "\uffe1\110\uffe1\001\002\000\070\004\uffe6\011\uffe6\013\uffe6" +
    "\016\uffe6\040\uffe6\041\uffe6\042\uffe6\047\uffe6\051\uffe6\052" +
    "\uffe6\057\uffe6\060\uffe6\063\uffe6\064\uffe6\065\uffe6\067\uffe6" +
    "\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\101" +
    "\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\001\002\000\006" +
    "\041\336\110\334\001\002\000\016\004\032\067\025\070" +
    "\031\071\030\075\366\101\011\001\002\000\070\004\uffe7" +
    "\011\uffe7\013\uffe7\016\uffe7\040\uffe7\041\uffe7\042\uffe7\047" +
    "\uffe7\051\uffe7\052\uffe7\057\uffe7\060\uffe7\063\uffe7\064\uffe7" +
    "\065\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074" +
    "\uffe7\075\uffe7\101\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7" +
    "\001\002\000\006\012\351\110\350\001\002\000\006\041" +
    "\336\110\334\001\002\000\004\110\034\001\002\000\070" +
    "\004\uffe8\011\uffe8\013\uffe8\016\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\047\uffe8\051\uffe8\052\uffe8\057\uffe8\060\uffe8\063\uffe8" +
    "\064\uffe8\065\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073" +
    "\uffe8\074\uffe8\075\uffe8\101\uffe8\105\uffe8\106\uffe8\107\uffe8" +
    "\110\uffe8\001\002\000\006\006\uffd3\047\036\001\002\000" +
    "\004\006\065\001\002\000\006\050\040\110\037\001\002" +
    "\000\004\046\046\001\002\000\012\006\uffd2\033\uffd2\046" +
    "\uffd2\074\uffd2\001\002\000\006\050\044\100\043\001\002" +
    "\000\006\050\uffd1\100\uffd1\001\002\000\004\110\037\001" +
    "\002\000\012\006\uffd4\033\uffd4\046\uffd4\074\uffd4\001\002" +
    "\000\006\050\uffd0\100\uffd0\001\002\000\020\051\056\052" +
    "\053\053\051\054\055\055\054\056\047\110\050\001\002" +
    "\000\020\033\uffce\043\uffce\044\uffce\050\uffce\065\uffce\077" +
    "\uffce\100\uffce\001\002\000\020\033\uffc8\043\uffc8\044\uffc8" +
    "\050\uffc8\065\uffc8\077\uffc8\100\uffc8\001\002\000\020\033" +
    "\uffca\043\uffca\044\uffca\050\uffca\065\uffca\077\uffca\100\uffca" +
    "\001\002\000\006\050\uffcf\100\uffcf\001\002\000\004\076" +
    "\062\001\002\000\020\033\uffc9\043\uffc9\044\uffc9\050\uffc9" +
    "\065\uffc9\077\uffc9\100\uffc9\001\002\000\020\033\uffcb\043" +
    "\uffcb\044\uffcb\050\uffcb\065\uffcb\077\uffcb\100\uffcb\001\002" +
    "\000\004\076\057\001\002\000\020\051\056\052\053\053" +
    "\051\054\055\055\054\056\047\110\050\001\002\000\004" +
    "\077\061\001\002\000\020\033\uffcd\043\uffcd\044\uffcd\050" +
    "\uffcd\065\uffcd\077\uffcd\100\uffcd\001\002\000\020\051\056" +
    "\052\053\053\051\054\055\055\054\056\047\110\050\001" +
    "\002\000\004\077\064\001\002\000\020\033\uffcc\043\uffcc" +
    "\044\uffcc\050\uffcc\065\uffcc\077\uffcc\100\uffcc\001\002\000" +
    "\004\110\066\001\002\000\004\074\067\001\002\000\064" +
    "\004\032\011\111\013\077\016\074\040\076\041\114\047" +
    "\071\051\072\052\124\057\106\060\104\063\113\064\122" +
    "\065\100\067\025\070\031\071\030\072\103\073\117\074" +
    "\121\101\011\105\115\106\105\107\107\110\101\001\002" +
    "\000\004\043\332\001\002\000\046\016\074\040\076\041" +
    "\114\047\071\051\072\052\124\057\106\060\104\063\113" +
    "\064\122\065\100\072\103\073\117\074\121\105\115\106" +
    "\105\107\107\110\101\001\002\000\004\047\126\001\002" +
    "\000\156\004\uffb5\007\uffb5\011\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\042\uffb5\043\uff83\044\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\063\uffb5\064\uffb5\065\uffb5" +
    "\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074" +
    "\uffb5\075\uffb5\100\uffb5\101\uffb5\102\uffb5\104\uffb5\105\uffb5" +
    "\106\uffb5\107\uffb5\110\uffb5\001\002\000\046\016\074\040" +
    "\076\041\114\047\071\051\072\052\124\057\106\060\104" +
    "\063\113\064\122\065\100\072\103\073\117\074\121\105" +
    "\115\106\105\107\107\110\101\001\002\000\066\004\uffd7" +
    "\011\uffd7\013\uffd7\016\uffd7\040\uffd7\041\uffd7\047\uffd7\051" +
    "\uffd7\052\uffd7\057\uffd7\060\uffd7\063\uffd7\064\uffd7\065\uffd7" +
    "\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075" +
    "\uffd7\101\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7\001\002" +
    "\000\046\016\074\040\076\041\114\047\071\051\072\052" +
    "\124\057\106\060\104\063\113\064\122\065\100\072\103" +
    "\073\117\074\121\105\115\106\105\107\107\110\101\001" +
    "\002\000\004\074\322\001\002\000\004\047\314\001\002" +
    "\000\156\004\uff92\007\uff92\011\uff92\013\uff92\014\uff92\015" +
    "\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92" +
    "\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032" +
    "\uff92\033\uff92\034\uff92\035\uff92\037\uff92\040\uff92\041\uff92" +
    "\042\uff92\043\uff92\044\uff92\047\126\050\uff92\051\uff92\052" +
    "\uff92\057\uff92\060\uff92\061\uff92\063\uff92\064\uff92\065\uff92" +
    "\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074" +
    "\uff92\075\uff92\100\uff92\101\uff92\102\uff92\104\uff92\105\uff92" +
    "\106\uff92\107\uff92\110\uff92\001\002\000\066\004\032\011" +
    "\111\013\077\016\074\040\076\041\114\047\071\051\072" +
    "\052\124\057\106\060\104\063\113\064\122\065\100\067" +
    "\025\070\031\071\030\072\103\073\117\074\121\075\310" +
    "\101\011\105\115\106\105\107\107\110\101\001\002\000" +
    "\154\004\uffaf\007\uffaf\011\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\044\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067" +
    "\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf" +
    "\100\uffaf\101\uffaf\102\uffaf\104\uffaf\105\uffaf\106\uffaf\107" +
    "\uffaf\110\uffaf\001\002\000\006\051\300\110\277\001\002" +
    "\000\004\110\272\001\002\000\154\004\uffb0\007\uffb0\011" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\044\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\057\uffb0\060\uffb0\061\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\074\uffb0\075\uffb0\100\uffb0\101\uffb0\102\uffb0" +
    "\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0\001\002\000" +
    "\154\004\uffb1\007\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\044\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\057\uffb1" +
    "\060\uffb1\061\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067" +
    "\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1" +
    "\100\uffb1\101\uffb1\102\uffb1\104\uffb1\105\uffb1\106\uffb1\107" +
    "\uffb1\110\uffb1\001\002\000\066\004\uffdb\011\uffdb\013\uffdb" +
    "\016\uffdb\040\uffdb\041\uffdb\047\uffdb\051\uffdb\052\uffdb\057" +
    "\uffdb\060\uffdb\063\uffdb\064\uffdb\065\uffdb\067\uffdb\070\uffdb" +
    "\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\101\uffdb\105" +
    "\uffdb\106\uffdb\107\uffdb\110\uffdb\001\002\000\004\074\247" +
    "\001\002\000\136\004\uffd9\011\uffd9\013\uffd9\014\137\015" +
    "\132\016\150\017\142\020\151\021\147\022\144\023\145" +
    "\024\134\025\135\026\140\027\143\030\155\031\136\032" +
    "\133\033\154\034\156\035\146\037\157\040\141\041\uffd9" +
    "\044\152\047\uffd9\051\uffd9\052\uffd9\057\uffd9\060\uffd9\061" +
    "\153\063\uffd9\064\uffd9\065\uffd9\067\uffd9\070\uffd9\071\uffd9" +
    "\072\uffd9\073\uffd9\074\uffd9\075\uffd9\101\uffd9\105\uffd9\106" +
    "\uffd9\107\uffd9\110\uffd9\001\002\000\004\047\243\001\002" +
    "\000\004\110\240\001\002\000\004\110\233\001\002\000" +
    "\066\004\uffd8\011\uffd8\013\uffd8\016\uffd8\040\uffd8\041\uffd8" +
    "\047\uffd8\051\uffd8\052\uffd8\057\uffd8\060\uffd8\063\uffd8\064" +
    "\uffd8\065\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\101\uffd8\105\uffd8\106\uffd8\107\uffd8\110" +
    "\uffd8\001\002\000\154\004\uffae\007\uffae\011\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\044\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\057\uffae\060\uffae\061\uffae\063\uffae\064\uffae\065" +
    "\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae" +
    "\074\uffae\075\uffae\100\uffae\101\uffae\102\uffae\104\uffae\105" +
    "\uffae\106\uffae\107\uffae\110\uffae\001\002\000\154\004\uffb6" +
    "\007\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\100\uffb6\101" +
    "\uffb6\102\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6" +
    "\001\002\000\062\004\032\016\074\040\076\041\114\047" +
    "\071\051\072\052\124\057\106\060\104\063\113\064\122" +
    "\065\100\067\025\070\031\071\030\072\103\073\117\074" +
    "\121\075\224\101\011\105\115\106\105\107\107\110\101" +
    "\001\002\000\046\016\074\040\076\041\114\047\071\051" +
    "\072\052\124\057\106\060\104\063\113\064\122\065\100" +
    "\072\103\073\117\074\121\105\115\106\105\107\107\110" +
    "\101\001\002\000\154\004\uffb2\007\uffb2\011\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\044\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\057\uffb2\060\uffb2\061\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2" +
    "\074\uffb2\075\uffb2\100\uffb2\101\uffb2\102\uffb2\104\uffb2\105" +
    "\uffb2\106\uffb2\107\uffb2\110\uffb2\001\002\000\004\047\126" +
    "\001\002\000\154\004\uffb8\007\uffb8\011\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\044\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074" +
    "\uffb8\075\uffb8\100\uffb8\101\uffb8\102\uffb8\104\uffb8\105\uffb8" +
    "\106\uffb8\107\uffb8\110\uffb8\001\002\000\050\016\074\040" +
    "\076\041\114\047\071\050\127\051\072\052\124\057\106" +
    "\060\104\063\113\064\122\065\100\072\103\073\117\074" +
    "\121\105\115\106\105\107\107\110\101\001\002\000\154" +
    "\004\uff82\007\uff82\011\uff82\013\uff82\014\uff82\015\uff82\016" +
    "\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82" +
    "\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033" +
    "\uff82\034\uff82\035\uff82\037\uff82\040\uff82\041\uff82\042\uff82" +
    "\044\uff82\047\uff82\050\uff82\051\uff82\052\uff82\057\uff82\060" +
    "\uff82\061\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82" +
    "\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82\100" +
    "\uff82\101\uff82\102\uff82\104\uff82\105\uff82\106\uff82\107\uff82" +
    "\110\uff82\001\002\000\006\050\215\100\214\001\002\000" +
    "\062\014\137\015\132\016\150\017\142\020\151\021\147" +
    "\022\144\023\145\024\134\025\135\026\140\027\143\030" +
    "\155\031\136\032\133\033\154\034\156\035\146\037\157" +
    "\040\141\044\152\050\uffc7\061\153\100\uffc7\001\002\000" +
    "\046\016\074\040\076\041\114\047\071\051\072\052\124" +
    "\057\106\060\104\063\113\064\122\065\100\072\103\073" +
    "\117\074\121\105\115\106\105\107\107\110\101\001\002" +
    "\000\046\016\074\040\076\041\114\047\071\051\072\052" +
    "\124\057\106\060\104\063\113\064\122\065\100\072\103" +
    "\073\117\074\121\105\115\106\105\107\107\110\101\001" +
    "\002\000\046\016\074\040\076\041\114\047\071\051\072" +
    "\052\124\057\106\060\104\063\113\064\122\065\100\072" +
    "\103\073\117\074\121\105\115\106\105\107\107\110\101" +
    "\001\002\000\046\016\074\040\076\041\114\047\071\051" +
    "\072\052\124\057\106\060\104\063\113\064\122\065\100" +
    "\072\103\073\117\074\121\105\115\106\105\107\107\110" +
    "\101\001\002\000\046\016\074\040\076\041\114\047\071" +
    "\051\072\052\124\057\106\060\104\063\113\064\122\065" +
    "\100\072\103\073\117\074\121\105\115\106\105\107\107" +
    "\110\101\001\002\000\046\016\074\040\076\041\114\047" +
    "\071\051\072\052\124\057\106\060\104\063\113\064\122" +
    "\065\100\072\103\073\117\074\121\105\115\106\105\107" +
    "\107\110\101\001\002\000\046\016\074\040\076\041\114" +
    "\047\071\051\072\052\124\057\106\060\104\063\113\064" +
    "\122\065\100\072\103\073\117\074\121\105\115\106\105" +
    "\107\107\110\101\001\002\000\046\016\074\040\076\041" +
    "\114\047\071\051\072\052\124\057\106\060\104\063\113" +
    "\064\122\065\100\072\103\073\117\074\121\105\115\106" +
    "\105\107\107\110\101\001\002\000\046\016\074\040\076" +
    "\041\114\047\071\051\072\052\124\057\106\060\104\063" +
    "\113\064\122\065\100\072\103\073\117\074\121\105\115" +
    "\106\105\107\107\110\101\001\002\000\046\016\074\040" +
    "\076\041\114\047\071\051\072\052\124\057\106\060\104" +
    "\063\113\064\122\065\100\072\103\073\117\074\121\105" +
    "\115\106\105\107\107\110\101\001\002\000\046\016\074" +
    "\040\076\041\114\047\071\051\072\052\124\057\106\060" +
    "\104\063\113\064\122\065\100\072\103\073\117\074\121" +
    "\105\115\106\105\107\107\110\101\001\002\000\046\016" +
    "\074\040\076\041\114\047\071\051\072\052\124\057\106" +
    "\060\104\063\113\064\122\065\100\072\103\073\117\074" +
    "\121\105\115\106\105\107\107\110\101\001\002\000\046" +
    "\016\074\040\076\041\114\047\071\051\072\052\124\057" +
    "\106\060\104\063\113\064\122\065\100\072\103\073\117" +
    "\074\121\105\115\106\105\107\107\110\101\001\002\000" +
    "\046\016\074\040\076\041\114\047\071\051\072\052\124" +
    "\057\106\060\104\063\113\064\122\065\100\072\103\073" +
    "\117\074\121\105\115\106\105\107\107\110\101\001\002" +
    "\000\046\016\074\040\076\041\114\047\071\051\072\052" +
    "\124\057\106\060\104\063\113\064\122\065\100\072\103" +
    "\073\117\074\121\105\115\106\105\107\107\110\101\001" +
    "\002\000\046\016\074\040\076\041\114\047\071\051\072" +
    "\052\124\057\106\060\104\063\113\064\122\065\100\072" +
    "\103\073\117\074\121\105\115\106\105\107\107\110\101" +
    "\001\002\000\054\016\074\020\170\021\167\022\166\040" +
    "\076\041\114\047\071\051\072\052\124\057\106\060\104" +
    "\063\113\064\122\065\100\072\103\073\117\074\121\105" +
    "\115\106\105\107\107\110\101\001\002\000\046\016\074" +
    "\040\076\041\114\047\071\051\072\052\124\057\106\060" +
    "\104\063\113\064\122\065\100\072\103\073\117\074\121" +
    "\105\115\106\105\107\107\110\101\001\002\000\046\016" +
    "\074\040\076\041\114\047\071\051\072\052\124\057\106" +
    "\060\104\063\113\064\122\065\100\072\103\073\117\074" +
    "\121\105\115\106\105\107\107\110\101\001\002\000\046" +
    "\016\074\040\076\041\114\047\071\051\072\052\124\057" +
    "\106\060\104\063\113\064\122\065\100\072\103\073\117" +
    "\074\121\105\115\106\105\107\107\110\101\001\002\000" +
    "\046\016\074\040\076\041\114\047\071\051\072\052\124" +
    "\057\106\060\104\063\113\064\122\065\100\072\103\073" +
    "\117\074\121\105\115\106\105\107\107\110\101\001\002" +
    "\000\046\016\074\040\076\041\114\047\071\051\072\052" +
    "\124\057\106\060\104\063\113\064\122\065\100\072\103" +
    "\073\117\074\121\105\115\106\105\107\107\110\101\001" +
    "\002\000\154\004\uffa8\007\uffa8\011\uffa8\013\uffa8\014\137" +
    "\015\132\016\150\017\142\020\151\021\147\022\144\023" +
    "\145\024\134\025\uffa8\026\uffa8\027\143\030\155\031\136" +
    "\032\133\033\uffa8\034\156\035\146\037\uffa8\040\141\041" +
    "\uffa8\042\uffa8\044\152\047\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\057\uffa8\060\uffa8\061\153\063\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8" +
    "\075\uffa8\100\uffa8\101\uffa8\102\uffa8\104\uffa8\105\uffa8\106" +
    "\uffa8\107\uffa8\110\uffa8\001\002\000\136\004\uffaa\007\uffaa" +
    "\011\uffaa\013\uffaa\014\137\015\132\016\150\017\142\020" +
    "\151\021\147\022\144\023\145\024\134\025\uffaa\026\uffaa" +
    "\033\uffaa\037\uffaa\040\141\041\uffaa\042\uffaa\044\152\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\057\uffaa\060\uffaa\063\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072" +
    "\uffaa\073\uffaa\074\uffaa\075\uffaa\100\uffaa\101\uffaa\102\uffaa" +
    "\104\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\001\002\000" +
    "\136\004\uffa5\007\uffa5\011\uffa5\013\uffa5\014\137\015\132" +
    "\016\150\017\142\020\151\021\147\022\144\023\145\024" +
    "\134\025\uffa5\026\uffa5\033\uffa5\037\uffa5\040\141\041\uffa5" +
    "\042\uffa5\044\152\047\uffa5\050\uffa5\051\uffa5\052\uffa5\057" +
    "\uffa5\060\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\100" +
    "\uffa5\101\uffa5\102\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5" +
    "\110\uffa5\001\002\000\154\004\uffa9\007\uffa9\011\uffa9\013" +
    "\uffa9\014\137\015\132\016\150\017\142\020\151\021\147" +
    "\022\144\023\145\024\134\025\uffa9\026\uffa9\027\143\030" +
    "\155\031\136\032\133\033\uffa9\034\156\035\146\037\157" +
    "\040\141\041\uffa9\042\uffa9\044\152\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\057\uffa9\060\uffa9\061\153\063\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073" +
    "\uffa9\074\uffa9\075\uffa9\100\uffa9\101\uffa9\102\uffa9\104\uffa9" +
    "\105\uffa9\106\uffa9\107\uffa9\110\uffa9\001\002\000\136\004" +
    "\uff95\007\uff95\011\uff95\013\uff95\014\137\015\132\016\150" +
    "\017\142\020\151\021\147\022\144\023\145\024\134\025" +
    "\uff95\026\uff95\033\uff95\037\uff95\040\141\041\uff95\042\uff95" +
    "\044\152\047\uff95\050\uff95\051\uff95\052\uff95\057\uff95\060" +
    "\uff95\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95\070\uff95" +
    "\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\100\uff95\101" +
    "\uff95\102\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110\uff95" +
    "\001\002\000\154\004\uff9c\007\uff9c\011\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\044\uff9c\047\uff9c\050\uff9c\051\uff9c\052" +
    "\uff9c\057\uff9c\060\uff9c\061\uff9c\063\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\100\uff9c\101\uff9c\102\uff9c\104\uff9c\105\uff9c" +
    "\106\uff9c\107\uff9c\110\uff9c\001\002\000\046\016\074\040" +
    "\076\041\114\047\071\051\072\052\124\057\106\060\104" +
    "\063\113\064\122\065\100\072\103\073\117\074\121\105" +
    "\115\106\105\107\107\110\101\001\002\000\046\016\074" +
    "\040\076\041\114\047\071\051\072\052\124\057\106\060" +
    "\104\063\113\064\122\065\100\072\103\073\117\074\121" +
    "\105\115\106\105\107\107\110\101\001\002\000\046\016" +
    "\074\040\076\041\114\047\071\051\072\052\124\057\106" +
    "\060\104\063\113\064\122\065\100\072\103\073\117\074" +
    "\121\105\115\106\105\107\107\110\101\001\002\000\154" +
    "\004\uff9a\007\uff9a\011\uff9a\013\uff9a\014\uff9a\015\132\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\145\024\134" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\037\uff9a\040\141\041\uff9a\042\uff9a" +
    "\044\152\047\uff9a\050\uff9a\051\uff9a\052\uff9a\057\uff9a\060" +
    "\uff9a\061\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a" +
    "\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\100" +
    "\uff9a\101\uff9a\102\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a" +
    "\110\uff9a\001\002\000\154\004\uff98\007\uff98\011\uff98\013" +
    "\uff98\014\uff98\015\132\016\uff98\017\uff98\020\uff98\021\uff98" +
    "\022\uff98\023\145\024\134\025\uff98\026\uff98\027\uff98\030" +
    "\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\037\uff98" +
    "\040\141\041\uff98\042\uff98\044\152\047\uff98\050\uff98\051" +
    "\uff98\052\uff98\057\uff98\060\uff98\061\uff98\063\uff98\064\uff98" +
    "\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98\072\uff98\073" +
    "\uff98\074\uff98\075\uff98\100\uff98\101\uff98\102\uff98\104\uff98" +
    "\105\uff98\106\uff98\107\uff98\110\uff98\001\002\000\154\004" +
    "\uff96\007\uff96\011\uff96\013\uff96\014\uff96\015\132\016\uff96" +
    "\017\uff96\020\uff96\021\uff96\022\uff96\023\145\024\134\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\035\uff96\037\uff96\040\141\041\uff96\042\uff96\044" +
    "\152\047\uff96\050\uff96\051\uff96\052\uff96\057\uff96\060\uff96" +
    "\061\uff96\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070" +
    "\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96\100\uff96" +
    "\101\uff96\102\uff96\104\uff96\105\uff96\106\uff96\107\uff96\110" +
    "\uff96\001\002\000\154\004\uff9b\007\uff9b\011\uff9b\013\uff9b" +
    "\014\uff9b\015\132\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022" +
    "\uff9b\023\145\024\134\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\037\uff9b\040" +
    "\141\041\uff9b\042\uff9b\044\152\047\uff9b\050\uff9b\051\uff9b" +
    "\052\uff9b\057\uff9b\060\uff9b\061\uff9b\063\uff9b\064\uff9b\065" +
    "\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b" +
    "\074\uff9b\075\uff9b\100\uff9b\101\uff9b\102\uff9b\104\uff9b\105" +
    "\uff9b\106\uff9b\107\uff9b\110\uff9b\001\002\000\154\004\uffa1" +
    "\007\uffa1\011\uffa1\013\uffa1\014\uffa1\015\132\016\uffa1\017" +
    "\uffa1\020\151\021\147\022\144\023\145\024\134\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\037\uffa1\040\141\041\uffa1\042\uffa1\044\152" +
    "\047\uffa1\050\uffa1\051\uffa1\052\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1" +
    "\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\100\uffa1\101" +
    "\uffa1\102\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1" +
    "\001\002\000\154\004\uff99\007\uff99\011\uff99\013\uff99\014" +
    "\uff99\015\132\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\145\024\134\025\uff99\026\uff99\027\uff99\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\uff99\037\uff99\040\141" +
    "\041\uff99\042\uff99\044\152\047\uff99\050\uff99\051\uff99\052" +
    "\uff99\057\uff99\060\uff99\061\uff99\063\uff99\064\uff99\065\uff99" +
    "\066\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074" +
    "\uff99\075\uff99\100\uff99\101\uff99\102\uff99\104\uff99\105\uff99" +
    "\106\uff99\107\uff99\110\uff99\001\002\000\136\004\uffa7\007" +
    "\uffa7\011\uffa7\013\uffa7\014\137\015\132\016\150\017\142" +
    "\020\151\021\147\022\144\023\145\024\134\025\uffa7\026" +
    "\uffa7\033\uffa7\037\uffa7\040\141\041\uffa7\042\uffa7\044\152" +
    "\047\uffa7\050\uffa7\051\uffa7\052\uffa7\057\uffa7\060\uffa7\063" +
    "\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7" +
    "\072\uffa7\073\uffa7\074\uffa7\075\uffa7\100\uffa7\101\uffa7\102" +
    "\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\001\002" +
    "\000\154\004\uff9e\007\uff9e\011\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\037\uff9e\040\141\041\uff9e" +
    "\042\uff9e\044\152\047\uff9e\050\uff9e\051\uff9e\052\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e" +
    "\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075" +
    "\uff9e\100\uff9e\101\uff9e\102\uff9e\104\uff9e\105\uff9e\106\uff9e" +
    "\107\uff9e\110\uff9e\001\002\000\154\004\uff97\007\uff97\011" +
    "\uff97\013\uff97\014\uff97\015\132\016\uff97\017\uff97\020\uff97" +
    "\021\uff97\022\uff97\023\145\024\134\025\uff97\026\uff97\027" +
    "\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97" +
    "\037\uff97\040\141\041\uff97\042\uff97\044\152\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\057\uff97\060\uff97\061\uff97\063\uff97" +
    "\064\uff97\065\uff97\066\uff97\067\uff97\070\uff97\071\uff97\072" +
    "\uff97\073\uff97\074\uff97\075\uff97\100\uff97\101\uff97\102\uff97" +
    "\104\uff97\105\uff97\106\uff97\107\uff97\110\uff97\001\002\000" +
    "\136\004\uffa4\007\uffa4\011\uffa4\013\uffa4\014\137\015\132" +
    "\016\150\017\142\020\151\021\147\022\144\023\145\024" +
    "\134\025\uffa4\026\uffa4\033\uffa4\037\uffa4\040\141\041\uffa4" +
    "\042\uffa4\044\152\047\uffa4\050\uffa4\051\uffa4\052\uffa4\057" +
    "\uffa4\060\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\100" +
    "\uffa4\101\uffa4\102\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4" +
    "\110\uffa4\001\002\000\154\004\uffa0\007\uffa0\011\uffa0\013" +
    "\uffa0\014\uffa0\015\132\016\uffa0\017\uffa0\020\151\021\147" +
    "\022\144\023\145\024\134\025\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\037\uffa0" +
    "\040\141\041\uffa0\042\uffa0\044\152\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\057\uffa0\060\uffa0\061\uffa0\063\uffa0\064\uffa0" +
    "\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073" +
    "\uffa0\074\uffa0\075\uffa0\100\uffa0\101\uffa0\102\uffa0\104\uffa0" +
    "\105\uffa0\106\uffa0\107\uffa0\110\uffa0\001\002\000\154\004" +
    "\uff93\007\uff93\011\uff93\013\uff93\014\uff93\015\uff93\016\uff93" +
    "\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025" +
    "\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\037\uff93\040\uff93\041\uff93\042\uff93\044" +
    "\152\047\uff93\050\uff93\051\uff93\052\uff93\057\uff93\060\uff93" +
    "\061\uff93\063\uff93\064\uff93\065\uff93\066\uff93\067\uff93\070" +
    "\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\100\uff93" +
    "\101\uff93\102\uff93\104\uff93\105\uff93\106\uff93\107\uff93\110" +
    "\uff93\001\002\000\154\004\uffac\007\uffac\011\uffac\013\uffac" +
    "\014\137\015\132\016\150\017\142\020\151\021\147\022" +
    "\144\023\145\024\134\025\135\026\uffac\027\143\030\155" +
    "\031\136\032\133\033\154\034\156\035\146\037\157\040" +
    "\141\041\uffac\042\uffac\044\152\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\057\uffac\060\uffac\061\153\063\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac" +
    "\074\uffac\075\uffac\100\uffac\101\uffac\102\uffac\104\uffac\105" +
    "\uffac\106\uffac\107\uffac\110\uffac\001\002\000\154\004\uffa2" +
    "\007\uffa2\011\uffa2\013\uffa2\014\uffa2\015\132\016\uffa2\017" +
    "\uffa2\020\151\021\147\022\144\023\145\024\134\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\037\uffa2\040\141\041\uffa2\042\uffa2\044\152" +
    "\047\uffa2\050\uffa2\051\uffa2\052\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\100\uffa2\101" +
    "\uffa2\102\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2" +
    "\001\002\000\136\004\uffa6\007\uffa6\011\uffa6\013\uffa6\014" +
    "\137\015\132\016\150\017\142\020\151\021\147\022\144" +
    "\023\145\024\134\025\uffa6\026\uffa6\033\uffa6\037\uffa6\040" +
    "\141\041\uffa6\042\uffa6\044\152\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\057\uffa6\060\uffa6\063\uffa6\064\uffa6\065\uffa6\066" +
    "\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6" +
    "\075\uffa6\100\uffa6\101\uffa6\102\uffa6\104\uffa6\105\uffa6\106" +
    "\uffa6\107\uffa6\110\uffa6\001\002\000\154\004\uffab\007\uffab" +
    "\011\uffab\013\uffab\014\137\015\132\016\150\017\142\020" +
    "\151\021\147\022\144\023\145\024\134\025\uffab\026\uffab" +
    "\027\143\030\155\031\136\032\133\033\154\034\156\035" +
    "\146\037\157\040\141\041\uffab\042\uffab\044\152\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\057\uffab\060\uffab\061\153\063" +
    "\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab" +
    "\072\uffab\073\uffab\074\uffab\075\uffab\100\uffab\101\uffab\102" +
    "\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\001\002" +
    "\000\154\004\uff9d\007\uff9d\011\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\037\uff9d\040\141\041\uff9d" +
    "\042\uff9d\044\152\047\uff9d\050\uff9d\051\uff9d\052\uff9d\057" +
    "\uff9d\060\uff9d\061\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075" +
    "\uff9d\100\uff9d\101\uff9d\102\uff9d\104\uff9d\105\uff9d\106\uff9d" +
    "\107\uff9d\110\uff9d\001\002\000\136\004\uffa3\007\uffa3\011" +
    "\uffa3\013\uffa3\014\137\015\132\016\150\017\142\020\151" +
    "\021\147\022\144\023\145\024\134\025\uffa3\026\uffa3\033" +
    "\uffa3\037\uffa3\040\141\041\uffa3\042\uffa3\044\152\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\057\uffa3\060\uffa3\063\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3" +
    "\073\uffa3\074\uffa3\075\uffa3\100\uffa3\101\uffa3\102\uffa3\104" +
    "\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\001\002\000\154" +
    "\004\uff9f\007\uff9f\011\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\037\uff9f\040\141\041\uff9f\042\uff9f" +
    "\044\152\047\uff9f\050\uff9f\051\uff9f\052\uff9f\057\uff9f\060" +
    "\uff9f\061\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f" +
    "\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\100" +
    "\uff9f\101\uff9f\102\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f" +
    "\110\uff9f\001\002\000\046\016\074\040\076\041\114\047" +
    "\071\051\072\052\124\057\106\060\104\063\113\064\122" +
    "\065\100\072\103\073\117\074\121\105\115\106\105\107" +
    "\107\110\101\001\002\000\154\004\uff81\007\uff81\011\uff81" +
    "\013\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021" +
    "\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81" +
    "\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\037" +
    "\uff81\040\uff81\041\uff81\042\uff81\044\uff81\047\uff81\050\uff81" +
    "\051\uff81\052\uff81\057\uff81\060\uff81\061\uff81\063\uff81\064" +
    "\uff81\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81" +
    "\073\uff81\074\uff81\075\uff81\100\uff81\101\uff81\102\uff81\104" +
    "\uff81\105\uff81\106\uff81\107\uff81\110\uff81\001\002\000\062" +
    "\014\137\015\132\016\150\017\142\020\151\021\147\022" +
    "\144\023\145\024\134\025\135\026\140\027\143\030\155" +
    "\031\136\032\133\033\154\034\156\035\146\037\157\040" +
    "\141\044\152\050\uffc6\061\153\100\uffc6\001\002\000\060" +
    "\014\137\015\132\016\150\017\142\020\151\021\147\022" +
    "\144\023\145\024\134\025\135\026\140\027\143\030\155" +
    "\031\136\032\133\033\154\034\156\035\146\037\157\040" +
    "\141\044\152\061\153\063\220\001\002\000\004\047\221" +
    "\001\002\000\046\016\074\040\076\041\114\047\071\051" +
    "\072\052\124\057\106\060\104\063\113\064\122\065\100" +
    "\072\103\073\117\074\121\105\115\106\105\107\107\110" +
    "\101\001\002\000\060\014\137\015\132\016\150\017\142" +
    "\020\151\021\147\022\144\023\145\024\134\025\135\026" +
    "\140\027\143\030\155\031\136\032\133\033\154\034\156" +
    "\035\146\037\157\040\141\044\152\050\223\061\153\001" +
    "\002\000\154\004\uffc0\007\uffc0\011\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\044\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\063\uffc0\064\uffc0\065\uffc0\066" +
    "\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0" +
    "\075\uffc0\100\uffc0\101\uffc0\102\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\107\uffc0\110\uffc0\001\002\000\154\004\uff8f\007\uff8f" +
    "\011\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020" +
    "\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f" +
    "\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\044\uff8f\047\uff8f" +
    "\050\uff8f\051\uff8f\052\uff8f\057\uff8f\060\uff8f\061\uff8f\063" +
    "\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f" +
    "\072\uff8f\073\uff8f\074\uff8f\075\uff8f\100\uff8f\101\uff8f\102" +
    "\uff8f\104\uff8f\105\uff8f\106\uff8f\107\uff8f\110\uff8f\001\002" +
    "\000\064\004\uff8e\016\uff8e\040\uff8e\041\uff8e\042\uff8e\047" +
    "\uff8e\051\uff8e\052\uff8e\057\uff8e\060\uff8e\063\uff8e\064\uff8e" +
    "\065\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\074" +
    "\uff8e\075\uff8e\101\uff8e\105\uff8e\106\uff8e\107\uff8e\110\uff8e" +
    "\001\002\000\062\004\032\016\074\040\076\041\114\047" +
    "\071\051\072\052\124\057\106\060\104\063\113\064\122" +
    "\065\100\067\025\070\031\071\030\072\103\073\117\074" +
    "\121\075\231\101\011\105\115\106\105\107\107\110\101" +
    "\001\002\000\134\004\uff8c\014\137\015\132\016\150\017" +
    "\142\020\151\021\147\022\144\023\145\024\134\025\135" +
    "\026\140\027\143\030\155\031\136\032\133\033\154\034" +
    "\156\035\146\037\157\040\141\041\uff8c\042\uff8c\044\152" +
    "\047\uff8c\051\uff8c\052\uff8c\057\uff8c\060\uff8c\061\153\063" +
    "\uff8c\064\uff8c\065\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c" +
    "\073\uff8c\074\uff8c\075\uff8c\101\uff8c\105\uff8c\106\uff8c\107" +
    "\uff8c\110\uff8c\001\002\000\064\004\uff8b\016\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\047\uff8b\051\uff8b\052\uff8b\057\uff8b\060" +
    "\uff8b\063\uff8b\064\uff8b\065\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\072\uff8b\073\uff8b\074\uff8b\075\uff8b\101\uff8b\105\uff8b\106" +
    "\uff8b\107\uff8b\110\uff8b\001\002\000\154\004\uff90\007\uff90" +
    "\011\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020" +
    "\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90" +
    "\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\044\uff90\047\uff90" +
    "\050\uff90\051\uff90\052\uff90\057\uff90\060\uff90\061\uff90\063" +
    "\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90" +
    "\072\uff90\073\uff90\074\uff90\075\uff90\100\uff90\101\uff90\102" +
    "\uff90\104\uff90\105\uff90\106\uff90\107\uff90\110\uff90\001\002" +
    "\000\064\004\uff8d\016\uff8d\040\uff8d\041\uff8d\042\uff8d\047" +
    "\uff8d\051\uff8d\052\uff8d\057\uff8d\060\uff8d\063\uff8d\064\uff8d" +
    "\065\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074" +
    "\uff8d\075\uff8d\101\uff8d\105\uff8d\106\uff8d\107\uff8d\110\uff8d" +
    "\001\002\000\004\046\234\001\002\000\020\051\056\052" +
    "\053\053\051\054\055\055\054\056\047\110\050\001\002" +
    "\000\004\044\236\001\002\000\046\016\074\040\076\041" +
    "\114\047\071\051\072\052\124\057\106\060\104\063\113" +
    "\064\122\065\100\072\103\073\117\074\121\105\115\106" +
    "\105\107\107\110\101\001\002\000\154\004\uffc5\007\uffc5" +
    "\011\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\152\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\057\uffc5\060\uffc5\061\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5" +
    "\072\uffc5\073\uffc5\074\uffc5\075\uffc5\100\uffc5\101\uffc5\102" +
    "\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\001\002" +
    "\000\156\004\uff91\007\uff91\011\uff91\013\uff91\014\uff91\015" +
    "\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91" +
    "\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032" +
    "\uff91\033\uff91\034\uff91\035\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\047\126\050\uff91\051\uff91\052" +
    "\uff91\057\uff91\060\uff91\061\uff91\063\uff91\064\uff91\065\uff91" +
    "\066\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074" +
    "\uff91\075\uff91\100\uff91\101\uff91\102\uff91\104\uff91\105\uff91" +
    "\106\uff91\107\uff91\110\uff91\001\002\000\154\004\uffbc\007" +
    "\uffbc\011\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\044\uffbc\047" +
    "\126\050\uffbc\051\uffbc\052\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071" +
    "\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\100\uffbc\101\uffbc" +
    "\102\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\001" +
    "\002\000\154\004\uffba\007\uffba\011\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\044\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\057\uffba\060\uffba\061\uffba\063\uffba\064\uffba\065\uffba\066" +
    "\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba" +
    "\075\uffba\100\uffba\101\uffba\102\uffba\104\uffba\105\uffba\106" +
    "\uffba\107\uffba\110\uffba\001\002\000\046\016\074\040\076" +
    "\041\114\047\071\051\072\052\124\057\106\060\104\063" +
    "\113\064\122\065\100\072\103\073\117\074\121\105\115" +
    "\106\105\107\107\110\101\001\002\000\060\014\137\015" +
    "\132\016\150\017\142\020\151\021\147\022\144\023\145" +
    "\024\134\025\135\026\140\027\143\030\155\031\136\032" +
    "\133\033\154\034\156\035\146\037\157\040\141\044\152" +
    "\050\245\061\153\001\002\000\046\016\074\040\076\041" +
    "\114\047\071\051\072\052\124\057\106\060\104\063\113" +
    "\064\122\065\100\072\103\073\117\074\121\105\115\106" +
    "\105\107\107\110\101\001\002\000\154\004\uffc1\007\uffc1" +
    "\011\uffc1\013\uffc1\014\137\015\132\016\150\017\142\020" +
    "\151\021\147\022\144\023\145\024\134\025\135\026\140" +
    "\027\143\030\155\031\136\032\133\033\154\034\156\035" +
    "\146\037\157\040\141\041\uffc1\042\uffc1\044\152\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\057\uffc1\060\uffc1\061\153\063" +
    "\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1" +
    "\072\uffc1\073\uffc1\074\uffc1\075\uffc1\100\uffc1\101\uffc1\102" +
    "\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1\001\002" +
    "\000\004\042\252\001\002\000\006\042\252\075\270\001" +
    "\002\000\006\042\uff8a\075\uff8a\001\002\000\004\110\253" +
    "\001\002\000\010\043\uff85\046\266\065\uff85\001\002\000" +
    "\006\043\256\065\255\001\002\000\004\047\261\001\002" +
    "\000\060\004\032\016\074\040\076\041\114\047\071\051" +
    "\072\052\124\057\106\060\104\063\113\064\122\065\100" +
    "\067\025\070\031\071\030\072\103\073\117\074\121\101" +
    "\011\105\115\106\105\107\107\110\101\001\002\000\064" +
    "\004\032\016\074\040\076\041\114\042\uff86\047\071\051" +
    "\072\052\124\057\106\060\104\063\113\064\122\065\100" +
    "\067\025\070\031\071\030\072\103\073\117\074\121\075" +
    "\uff86\101\011\105\115\106\105\107\107\110\101\001\002" +
    "\000\006\042\uff88\075\uff88\001\002\000\046\016\074\040" +
    "\076\041\114\047\071\051\072\052\124\057\106\060\104" +
    "\063\113\064\122\065\100\072\103\073\117\074\121\105" +
    "\115\106\105\107\107\110\101\001\002\000\060\014\137" +
    "\015\132\016\150\017\142\020\151\021\147\022\144\023" +
    "\145\024\134\025\135\026\140\027\143\030\155\031\136" +
    "\032\133\033\154\034\156\035\146\037\157\040\141\044" +
    "\152\050\263\061\153\001\002\000\004\043\264\001\002" +
    "\000\060\004\032\016\074\040\076\041\114\047\071\051" +
    "\072\052\124\057\106\060\104\063\113\064\122\065\100" +
    "\067\025\070\031\071\030\072\103\073\117\074\121\101" +
    "\011\105\115\106\105\107\107\110\101\001\002\000\006" +
    "\042\uff87\075\uff87\001\002\000\020\051\056\052\053\053" +
    "\051\054\055\055\054\056\047\110\050\001\002\000\006" +
    "\043\uff84\065\uff84\001\002\000\066\004\uffd5\011\uffd5\013" +
    "\uffd5\016\uffd5\040\uffd5\041\uffd5\047\uffd5\051\uffd5\052\uffd5" +
    "\057\uffd5\060\uffd5\063\uffd5\064\uffd5\065\uffd5\067\uffd5\070" +
    "\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\101\uffd5" +
    "\105\uffd5\106\uffd5\107\uffd5\110\uffd5\001\002\000\006\042" +
    "\uff89\075\uff89\001\002\000\004\046\273\001\002\000\020" +
    "\051\056\052\053\053\051\054\055\055\054\056\047\110" +
    "\050\001\002\000\004\044\275\001\002\000\046\016\074" +
    "\040\076\041\114\047\071\051\072\052\124\057\106\060" +
    "\104\063\113\064\122\065\100\072\103\073\117\074\121" +
    "\105\115\106\105\107\107\110\101\001\002\000\154\004" +
    "\uffc4\007\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\044" +
    "\152\047\uffc4\050\uffc4\051\uffc4\052\uffc4\057\uffc4\060\uffc4" +
    "\061\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070" +
    "\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\100\uffc4" +
    "\101\uffc4\102\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\110" +
    "\uffc4\001\002\000\154\004\uffb3\007\uffb3\011\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\044\uffb3\047\126\050\uffb3\051\uffb3" +
    "\052\uffb3\057\uffb3\060\uffb3\061\uffb3\063\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3" +
    "\074\uffb3\075\uffb3\100\uffb3\101\uffb3\102\uffb3\104\uffb3\105" +
    "\uffb3\106\uffb3\107\uffb3\110\uffb3\001\002\000\004\076\301" +
    "\001\002\000\020\051\056\052\053\053\051\054\055\055" +
    "\054\056\047\110\050\001\002\000\004\077\303\001\002" +
    "\000\004\047\304\001\002\000\046\016\074\040\076\041" +
    "\114\047\071\051\072\052\124\057\106\060\104\063\113" +
    "\064\122\065\100\072\103\073\117\074\121\105\115\106" +
    "\105\107\107\110\101\001\002\000\060\014\137\015\132" +
    "\016\150\017\142\020\151\021\147\022\144\023\145\024" +
    "\134\025\135\026\140\027\143\030\155\031\136\032\133" +
    "\033\154\034\156\035\146\037\157\040\141\044\152\050" +
    "\306\061\153\001\002\000\154\004\uffb7\007\uffb7\011\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\044\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\057\uffb7\060\uffb7\061\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7" +
    "\073\uffb7\074\uffb7\075\uffb7\100\uffb7\101\uffb7\102\uffb7\104" +
    "\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\001\002\000\154" +
    "\004\uffb4\007\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\044\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4" +
    "\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\100" +
    "\uffb4\101\uffb4\102\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4" +
    "\110\uffb4\001\002\000\070\004\uffdc\011\uffdc\013\uffdc\016" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\047\uffdc\051\uffdc\052\uffdc" +
    "\057\uffdc\060\uffdc\063\uffdc\064\uffdc\065\uffdc\067\uffdc\070" +
    "\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\101\uffdc" +
    "\105\uffdc\106\uffdc\107\uffdc\110\uffdc\001\002\000\066\004" +
    "\uffda\011\uffda\013\uffda\016\uffda\040\uffda\041\uffda\047\uffda" +
    "\051\uffda\052\uffda\057\uffda\060\uffda\063\uffda\064\uffda\065" +
    "\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda" +
    "\075\uffda\101\uffda\105\uffda\106\uffda\107\uffda\110\uffda\001" +
    "\002\000\154\004\uffbd\007\uffbd\011\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\044\uffbd\047\126\050\uffbd\051\uffbd\052\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd" +
    "\075\uffbd\100\uffbd\101\uffbd\102\uffbd\104\uffbd\105\uffbd\106" +
    "\uffbd\107\uffbd\110\uffbd\001\002\000\154\004\uffbb\007\uffbb" +
    "\011\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\044\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\057\uffbb\060\uffbb\061\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb" +
    "\072\uffbb\073\uffbb\074\uffbb\075\uffbb\100\uffbb\101\uffbb\102" +
    "\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\001\002" +
    "\000\046\016\074\040\076\041\114\047\071\051\072\052" +
    "\124\057\106\060\104\063\113\064\122\065\100\072\103" +
    "\073\117\074\121\105\115\106\105\107\107\110\101\001" +
    "\002\000\060\014\137\015\132\016\150\017\142\020\151" +
    "\021\147\022\144\023\145\024\134\025\135\026\140\027" +
    "\143\030\155\031\136\032\133\033\154\034\156\035\146" +
    "\037\157\040\141\044\152\050\316\061\153\001\002\000" +
    "\046\016\074\040\076\041\114\047\071\051\072\052\124" +
    "\057\106\060\104\063\113\064\122\065\100\072\103\073" +
    "\117\074\121\105\115\106\105\107\107\110\101\001\002" +
    "\000\154\004\uffad\007\uffad\011\uffad\013\uffad\014\137\015" +
    "\132\016\150\017\142\020\151\021\147\022\144\023\145" +
    "\024\134\025\135\026\140\027\143\030\155\031\136\032" +
    "\133\033\154\034\156\035\146\037\157\040\141\041\uffad" +
    "\042\uffad\044\152\047\uffad\050\uffad\051\uffad\052\uffad\057" +
    "\uffad\060\uffad\061\153\063\uffad\064\uffad\065\uffad\066\320" +
    "\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075" +
    "\uffad\100\uffad\101\uffad\102\uffad\104\uffad\105\uffad\106\uffad" +
    "\107\uffad\110\uffad\001\002\000\046\016\074\040\076\041" +
    "\114\047\071\051\072\052\124\057\106\060\104\063\113" +
    "\064\122\065\100\072\103\073\117\074\121\105\115\106" +
    "\105\107\107\110\101\001\002\000\154\004\uffc2\007\uffc2" +
    "\011\uffc2\013\uffc2\014\137\015\132\016\150\017\142\020" +
    "\151\021\147\022\144\023\145\024\134\025\135\026\140" +
    "\027\143\030\155\031\136\032\133\033\154\034\156\035" +
    "\146\037\157\040\141\041\uffc2\042\uffc2\044\152\047\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\057\uffc2\060\uffc2\061\153\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2" +
    "\072\uffc2\073\uffc2\074\uffc2\075\uffc2\100\uffc2\101\uffc2\102" +
    "\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\001\002" +
    "\000\064\004\032\011\111\013\077\016\074\040\076\041" +
    "\114\047\071\051\072\052\124\057\106\060\104\063\113" +
    "\064\122\065\100\067\025\070\031\071\030\072\103\073" +
    "\117\074\121\101\011\105\115\106\105\107\107\110\101" +
    "\001\002\000\066\004\032\011\111\013\077\016\074\040" +
    "\076\041\114\047\071\051\072\052\124\057\106\060\104" +
    "\063\113\064\122\065\100\067\025\070\031\071\030\072" +
    "\103\073\117\074\121\075\324\101\011\105\115\106\105" +
    "\107\107\110\101\001\002\000\066\004\uffd6\011\uffd6\013" +
    "\uffd6\016\uffd6\040\uffd6\041\uffd6\047\uffd6\051\uffd6\052\uffd6" +
    "\057\uffd6\060\uffd6\063\uffd6\064\uffd6\065\uffd6\067\uffd6\070" +
    "\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\101\uffd6" +
    "\105\uffd6\106\uffd6\107\uffd6\110\uffd6\001\002\000\154\004" +
    "\uffbe\007\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\044" +
    "\152\047\uffbe\050\uffbe\051\uffbe\052\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070" +
    "\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\100\uffbe" +
    "\101\uffbe\102\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110" +
    "\uffbe\001\002\000\154\004\uffbf\007\uffbf\011\uffbf\013\uffbf" +
    "\014\uffbf\015\132\016\uffbf\017\uffbf\020\151\021\147\022" +
    "\144\023\145\024\134\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\037\uffbf\040" +
    "\141\041\uffbf\042\uffbf\044\152\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\057\uffbf\060\uffbf\061\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf" +
    "\074\uffbf\075\uffbf\100\uffbf\101\uffbf\102\uffbf\104\uffbf\105" +
    "\uffbf\106\uffbf\107\uffbf\110\uffbf\001\002\000\154\004\uffb9" +
    "\007\uffb9\011\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\044\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\100\uffb9\101" +
    "\uffb9\102\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9" +
    "\001\002\000\060\014\137\015\132\016\150\017\142\020" +
    "\151\021\147\022\144\023\145\024\134\025\135\026\140" +
    "\027\143\030\155\031\136\032\133\033\154\034\156\035" +
    "\146\037\157\040\141\044\152\050\331\061\153\001\002" +
    "\000\154\004\uffc3\007\uffc3\011\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\044\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\104\uffc3\105\uffc3\106\uffc3" +
    "\107\uffc3\110\uffc3\001\002\000\046\016\074\040\076\041" +
    "\114\047\071\051\072\052\124\057\106\060\104\063\113" +
    "\064\122\065\100\072\103\073\117\074\121\105\115\106" +
    "\105\107\107\110\101\001\002\000\154\004\uff94\007\uff94" +
    "\011\uff94\013\uff94\014\137\015\132\016\150\017\142\020" +
    "\151\021\147\022\144\023\145\024\134\025\135\026\140" +
    "\027\143\030\155\031\136\032\133\033\154\034\156\035" +
    "\146\037\157\040\141\041\uff94\042\uff94\044\152\047\uff94" +
    "\050\uff94\051\uff94\052\uff94\057\uff94\060\uff94\061\153\063" +
    "\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94" +
    "\072\uff94\073\uff94\074\uff94\075\uff94\100\uff94\101\uff94\102" +
    "\uff94\104\uff94\105\uff94\106\uff94\107\uff94\110\uff94\001\002" +
    "\000\006\043\uff92\046\uff92\001\002\000\004\046\340\001" +
    "\002\000\004\110\337\001\002\000\006\043\uff91\046\uff91" +
    "\001\002\000\020\051\056\052\053\053\051\054\055\055" +
    "\054\056\047\110\050\001\002\000\004\033\342\001\002" +
    "\000\050\010\344\016\074\040\076\041\114\047\071\051" +
    "\072\052\124\057\106\060\104\063\113\064\122\065\100" +
    "\072\103\073\117\074\121\105\115\106\105\107\107\110" +
    "\101\001\002\000\142\004\uffe3\011\uffe3\013\uffe3\014\137" +
    "\015\132\016\150\017\142\020\151\021\147\022\144\023" +
    "\145\024\134\025\135\026\140\027\143\030\155\031\136" +
    "\032\133\033\154\034\156\035\146\037\157\040\141\041" +
    "\uffe3\042\uffe3\044\152\047\uffe3\051\uffe3\052\uffe3\057\uffe3" +
    "\060\uffe3\061\153\063\uffe3\064\uffe3\065\uffe3\067\uffe3\070" +
    "\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\101\uffe3" +
    "\102\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3\001\002\000" +
    "\004\074\345\001\002\000\064\004\032\011\111\013\077" +
    "\016\074\040\076\041\114\047\071\051\072\052\124\057" +
    "\106\060\104\063\113\064\122\065\100\067\025\070\031" +
    "\071\030\072\103\073\117\074\121\101\011\105\115\106" +
    "\105\107\107\110\101\001\002\000\066\004\032\011\111" +
    "\013\077\016\074\040\076\041\114\047\071\051\072\052" +
    "\124\057\106\060\104\063\113\064\122\065\100\067\025" +
    "\070\031\071\030\072\103\073\117\074\121\075\347\101" +
    "\011\105\115\106\105\107\107\110\101\001\002\000\070" +
    "\004\uffe9\011\uffe9\013\uffe9\016\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\047\uffe9\051\uffe9\052\uffe9\057\uffe9\060\uffe9\063\uffe9" +
    "\064\uffe9\065\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073" +
    "\uffe9\074\uffe9\075\uffe9\101\uffe9\105\uffe9\106\uffe9\107\uffe9" +
    "\110\uffe9\001\002\000\012\033\uffd3\046\uffd3\047\036\074" +
    "\uffd3\001\002\000\006\047\036\074\uffd3\001\002\000\004" +
    "\074\353\001\002\000\064\004\032\011\111\013\077\016" +
    "\074\040\076\041\114\047\071\051\072\052\124\057\106" +
    "\060\104\063\113\064\122\065\100\067\025\070\031\071" +
    "\030\072\103\073\117\074\121\101\011\105\115\106\105" +
    "\107\107\110\101\001\002\000\066\004\032\011\111\013" +
    "\077\016\074\040\076\041\114\047\071\051\072\052\124" +
    "\057\106\060\104\063\113\064\122\065\100\067\025\070" +
    "\031\071\030\072\103\073\117\074\121\075\355\101\011" +
    "\105\115\106\105\107\107\110\101\001\002\000\072\004" +
    "\uffdd\007\uffdd\011\uffdd\013\uffdd\016\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\047\uffdd\051\uffdd\052\uffdd\057\uffdd\060\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\075\uffdd\101\uffdd\105\uffdd\106\uffdd\107" +
    "\uffdd\110\uffdd\001\002\000\010\033\357\046\361\074\121" +
    "\001\002\000\046\016\074\040\076\041\114\047\071\051" +
    "\072\052\124\057\106\060\104\063\113\064\122\065\100" +
    "\072\103\073\117\074\121\105\115\106\105\107\107\110" +
    "\101\001\002\000\072\004\uffde\007\uffde\011\uffde\013\uffde" +
    "\016\uffde\040\uffde\041\uffde\042\uffde\047\uffde\051\uffde\052" +
    "\uffde\057\uffde\060\uffde\063\uffde\064\uffde\065\uffde\067\uffde" +
    "\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\101" +
    "\uffde\105\uffde\106\uffde\107\uffde\110\uffde\001\002\000\020" +
    "\051\056\052\053\053\051\054\055\055\054\056\047\110" +
    "\050\001\002\000\004\033\363\001\002\000\046\016\074" +
    "\040\076\041\114\047\071\051\072\052\124\057\106\060" +
    "\104\063\113\064\122\065\100\072\103\073\117\074\121" +
    "\105\115\106\105\107\107\110\101\001\002\000\142\004" +
    "\uffe0\007\uffe0\011\uffe0\013\uffe0\014\137\015\132\016\150" +
    "\017\142\020\151\021\147\022\144\023\145\024\134\025" +
    "\135\026\140\027\143\030\155\031\136\032\133\033\154" +
    "\034\156\035\146\037\157\040\141\041\uffe0\042\uffe0\044" +
    "\152\047\uffe0\051\uffe0\052\uffe0\057\uffe0\060\uffe0\061\153" +
    "\063\uffe0\064\uffe0\065\uffe0\067\uffe0\070\uffe0\071\uffe0\072" +
    "\uffe0\073\uffe0\074\uffe0\075\uffe0\101\uffe0\105\uffe0\106\uffe0" +
    "\107\uffe0\110\uffe0\001\002\000\142\004\uffdf\007\uffdf\011" +
    "\uffdf\013\uffdf\014\137\015\132\016\150\017\142\020\151" +
    "\021\147\022\144\023\145\024\134\025\135\026\140\027" +
    "\143\030\155\031\136\032\133\033\154\034\156\035\146" +
    "\037\157\040\141\041\uffdf\042\uffdf\044\152\047\uffdf\051" +
    "\uffdf\052\uffdf\057\uffdf\060\uffdf\061\153\063\uffdf\064\uffdf" +
    "\065\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074" +
    "\uffdf\075\uffdf\101\uffdf\105\uffdf\106\uffdf\107\uffdf\110\uffdf" +
    "\001\002\000\004\002\uffec\001\002\000\016\004\uffea\067" +
    "\uffea\070\uffea\071\uffea\075\uffea\101\uffea\001\002\000\004" +
    "\046\371\001\002\000\020\051\056\052\053\053\051\054" +
    "\055\055\054\056\047\110\050\001\002\000\004\033\373" +
    "\001\002\000\046\016\074\040\076\041\114\047\071\051" +
    "\072\052\124\057\106\060\104\063\113\064\122\065\100" +
    "\072\103\073\117\074\121\105\115\106\105\107\107\110" +
    "\101\001\002\000\142\004\uffe4\011\uffe4\013\uffe4\014\137" +
    "\015\132\016\150\017\142\020\151\021\147\022\144\023" +
    "\145\024\134\025\135\026\140\027\143\030\155\031\136" +
    "\032\133\033\154\034\156\035\146\037\157\040\141\041" +
    "\uffe4\042\uffe4\044\152\047\uffe4\051\uffe4\052\uffe4\057\uffe4" +
    "\060\uffe4\061\153\063\uffe4\064\uffe4\065\uffe4\067\uffe4\070" +
    "\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\101\uffe4" +
    "\102\uffe4\105\uffe4\106\uffe4\107\uffe4\110\uffe4\001\002\000" +
    "\004\047\376\001\002\000\006\041\336\110\334\001\002" +
    "\000\004\043\u0100\001\002\000\046\016\074\040\076\041" +
    "\114\047\071\051\072\052\124\057\106\060\104\063\113" +
    "\064\122\065\100\072\103\073\117\074\121\105\115\106" +
    "\105\107\107\110\101\001\002\000\060\014\137\015\132" +
    "\016\150\017\142\020\151\021\147\022\144\023\145\024" +
    "\134\025\135\026\140\027\143\030\155\031\136\032\133" +
    "\033\154\034\156\035\146\037\157\040\141\044\152\050" +
    "\u0102\061\153\001\002\000\070\004\uffe2\011\uffe2\013\uffe2" +
    "\016\uffe2\040\uffe2\041\uffe2\042\uffe2\047\uffe2\051\uffe2\052" +
    "\uffe2\057\uffe2\060\uffe2\063\uffe2\064\uffe2\065\uffe2\067\uffe2" +
    "\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\101" +
    "\uffe2\105\uffe2\106\uffe2\107\uffe2\110\uffe2\001\002\000\006" +
    "\041\336\110\334\001\002\000\130\014\137\015\132\016" +
    "\150\017\142\020\151\021\147\022\144\023\145\024\134" +
    "\025\135\026\140\027\143\030\155\031\136\032\133\033" +
    "\154\034\156\035\146\037\157\040\141\041\uffef\044\152" +
    "\047\uffef\051\uffef\052\uffef\057\uffef\060\uffef\061\153\063" +
    "\uffef\064\uffef\065\uffef\067\uffef\070\uffef\072\uffef\073\uffef" +
    "\074\uffef\075\uffef\102\uffef\104\u010a\105\uffef\106\uffef\107" +
    "\uffef\110\uffef\001\002\000\056\016\uffee\040\uffee\041\uffee" +
    "\047\uffee\051\uffee\052\uffee\057\uffee\060\uffee\063\uffee\064" +
    "\uffee\065\uffee\067\uffee\070\uffee\072\uffee\073\uffee\074\uffee" +
    "\075\uffee\102\uffee\105\uffee\106\uffee\107\uffee\110\uffee\001" +
    "\002\000\056\016\ufff1\040\ufff1\041\ufff1\047\ufff1\051\ufff1" +
    "\052\ufff1\057\ufff1\060\ufff1\063\ufff1\064\ufff1\065\ufff1\067" +
    "\ufff1\070\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\102\ufff1" +
    "\105\ufff1\106\ufff1\107\ufff1\110\ufff1\001\002\000\054\016" +
    "\074\040\076\041\114\047\071\051\072\052\124\057\106" +
    "\060\104\063\113\064\122\065\100\067\025\070\u0103\072" +
    "\103\073\117\074\121\102\u0109\105\115\106\105\107\107" +
    "\110\101\001\002\000\056\016\ufff0\040\ufff0\041\ufff0\047" +
    "\ufff0\051\ufff0\052\ufff0\057\ufff0\060\ufff0\063\ufff0\064\ufff0" +
    "\065\ufff0\067\ufff0\070\ufff0\072\ufff0\073\ufff0\074\ufff0\075" +
    "\ufff0\102\ufff0\105\ufff0\106\ufff0\107\ufff0\110\ufff0\001\002" +
    "\000\074\004\ufff2\005\ufff2\011\ufff2\013\ufff2\016\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\047\ufff2\051\ufff2\052\ufff2\057\ufff2" +
    "\060\ufff2\063\ufff2\064\ufff2\065\ufff2\067\ufff2\070\ufff2\071" +
    "\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\101\ufff2\103\ufff2" +
    "\105\ufff2\106\ufff2\107\ufff2\110\ufff2\001\002\000\004\074" +
    "\u010b\001\002\000\052\016\074\040\076\041\114\047\071" +
    "\051\072\052\124\057\106\060\104\063\113\064\122\065" +
    "\100\067\025\070\u0103\072\103\073\117\074\121\105\115" +
    "\106\105\107\107\110\101\001\002\000\054\016\074\040" +
    "\076\041\114\047\071\051\072\052\124\057\106\060\104" +
    "\063\113\064\122\065\100\067\025\070\u0103\072\103\073" +
    "\117\074\121\075\u010d\105\115\106\105\107\107\110\101" +
    "\001\002\000\056\016\uffed\040\uffed\041\uffed\047\uffed\051" +
    "\uffed\052\uffed\057\uffed\060\uffed\063\uffed\064\uffed\065\uffed" +
    "\067\uffed\070\uffed\072\uffed\073\uffed\074\uffed\075\uffed\102" +
    "\uffed\105\uffed\106\uffed\107\uffed\110\uffed\001\002\000\004" +
    "\046\u010f\001\002\000\020\051\056\052\053\053\051\054" +
    "\055\055\054\056\047\110\050\001\002\000\004\033\u0111" +
    "\001\002\000\046\016\074\040\076\041\114\047\071\051" +
    "\072\052\124\057\106\060\104\063\113\064\122\065\100" +
    "\072\103\073\117\074\121\105\115\106\105\107\107\110" +
    "\101\001\002\000\006\005\ufff9\103\ufff9\001\002\000\004" +
    "\002\001\001\002\000\004\002\uffff\001\002\000\012\005" +
    "\ufff4\044\ufff4\100\ufff4\103\ufff4\001\002\000\012\005\ufff3" +
    "\044\ufff3\100\ufff3\103\ufff3\001\002\000\010\005\ufffb\100" +
    "\u011c\103\ufffb\001\002\000\012\005\ufff6\044\ufff6\100\ufff6" +
    "\103\ufff6\001\002\000\012\005\ufff8\044\u011a\100\ufff8\103" +
    "\ufff8\001\002\000\006\062\u0116\110\u0115\001\002\000\012" +
    "\005\ufff5\044\ufff5\100\ufff5\103\ufff5\001\002\000\006\062" +
    "\u0116\110\u0115\001\002\000\012\005\ufff7\044\u011a\100\ufff7" +
    "\103\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\016\002\006\003\004\005\005\006\011\007" +
    "\007\041\012\001\001\000\010\010\u0118\011\u0116\012\u0117" +
    "\001\001\000\002\001\001\000\004\004\u0113\001\001\000" +
    "\002\001\001\000\004\006\u0111\001\001\000\022\014\u0103" +
    "\015\117\016\067\017\072\023\u0105\024\u0106\025\122\040" +
    "\u0104\001\001\000\002\001\001\000\010\005\013\006\011" +
    "\007\007\001\001\000\004\004\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\025" +
    "\035\020\036\032\037\022\040\023\041\026\044\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\367\001\001\000\016\035" +
    "\366\036\032\037\022\040\023\041\026\044\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\034" +
    "\001\001\000\002\001\001\000\006\047\040\050\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\014\111\015\117\016\067\017\072\025\122" +
    "\035\115\036\032\037\022\040\023\041\026\042\107\043" +
    "\101\044\021\045\074\001\001\000\002\001\001\000\014" +
    "\014\327\015\117\016\067\017\072\025\122\001\001\000" +
    "\004\032\326\001\001\000\002\001\001\000\014\014\325" +
    "\015\117\016\067\017\072\025\122\001\001\000\002\001" +
    "\001\000\014\014\324\015\117\016\067\017\072\025\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\311\001\001\000\034\014\111\015\117\016\067\017\072" +
    "\025\122\035\115\036\032\037\022\040\023\041\026\042" +
    "\310\044\021\045\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\014\226\015\117\016\067\017\072\021\224\022\225\025" +
    "\122\035\227\036\032\037\022\040\023\041\026\044\021" +
    "\001\001\000\014\014\216\015\117\016\067\017\072\025" +
    "\122\001\001\000\002\001\001\000\004\032\124\001\001" +
    "\000\002\001\001\000\016\014\130\015\117\016\067\017" +
    "\072\020\127\025\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\014\212\015\117\016" +
    "\067\017\072\025\122\001\001\000\014\014\211\015\117" +
    "\016\067\017\072\025\122\001\001\000\014\014\210\015" +
    "\117\016\067\017\072\025\122\001\001\000\014\014\207" +
    "\015\117\016\067\017\072\025\122\001\001\000\014\014" +
    "\206\015\117\016\067\017\072\025\122\001\001\000\014" +
    "\014\205\015\117\016\067\017\072\025\122\001\001\000" +
    "\014\014\204\015\117\016\067\017\072\025\122\001\001" +
    "\000\014\014\203\015\117\016\067\017\072\025\122\001" +
    "\001\000\014\014\202\015\117\016\067\017\072\025\122" +
    "\001\001\000\014\014\201\015\117\016\067\017\072\025" +
    "\122\001\001\000\014\014\200\015\117\016\067\017\072" +
    "\025\122\001\001\000\014\014\177\015\117\016\067\017" +
    "\072\025\122\001\001\000\014\014\176\015\117\016\067" +
    "\017\072\025\122\001\001\000\014\014\175\015\117\016" +
    "\067\017\072\025\122\001\001\000\014\014\174\015\117" +
    "\016\067\017\072\025\122\001\001\000\014\014\173\015" +
    "\117\016\067\017\072\025\122\001\001\000\014\014\164" +
    "\015\117\016\067\017\072\025\122\001\001\000\014\014" +
    "\163\015\117\016\067\017\072\025\122\001\001\000\014" +
    "\014\162\015\117\016\067\017\072\025\122\001\001\000" +
    "\014\014\161\015\117\016\067\017\072\025\122\001\001" +
    "\000\014\014\160\015\117\016\067\017\072\025\122\001" +
    "\001\000\014\014\157\015\117\016\067\017\072\025\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\172\015\117\016\067\017\072\025\122\001" +
    "\001\000\014\014\171\015\117\016\067\017\072\025\122" +
    "\001\001\000\014\014\170\015\117\016\067\017\072\025" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\215\015\117\016\067\017\072\025\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\221\015\117\016\067" +
    "\017\072\025\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\014\226" +
    "\015\117\016\067\017\072\021\231\025\122\035\227\036" +
    "\032\037\022\040\023\041\026\044\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\234\001\001\000\002" +
    "\001\001\000\014\014\236\015\117\016\067\017\072\025" +
    "\122\001\001\000\002\001\001\000\004\032\240\001\001" +
    "\000\004\032\241\001\001\000\002\001\001\000\014\014" +
    "\243\015\117\016\067\017\072\025\122\001\001\000\002" +
    "\001\001\000\014\014\245\015\117\016\067\017\072\025" +
    "\122\001\001\000\002\001\001\000\006\026\247\027\250" +
    "\001\001\000\004\027\270\001\001\000\002\001\001\000" +
    "\004\031\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\014\226\015\117\016\067\017" +
    "\072\021\224\022\256\025\122\030\257\035\227\036\032" +
    "\037\022\040\023\041\026\044\021\001\001\000\032\014" +
    "\226\015\117\016\067\017\072\021\231\025\122\035\227" +
    "\036\032\037\022\040\023\041\026\044\021\001\001\000" +
    "\002\001\001\000\014\014\261\015\117\016\067\017\072" +
    "\025\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\014\226\015\117\016\067\017\072\021\224\022\256" +
    "\025\122\030\264\035\227\036\032\037\022\040\023\041" +
    "\026\044\021\001\001\000\002\001\001\000\004\033\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\273\001\001\000\002" +
    "\001\001\000\014\014\275\015\117\016\067\017\072\025" +
    "\122\001\001\000\002\001\001\000\004\032\306\001\001" +
    "\000\002\001\001\000\004\033\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\304\015\117\016\067" +
    "\017\072\025\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\312\001\001\000\002\001\001\000\014\014" +
    "\314\015\117\016\067\017\072\025\122\001\001\000\002" +
    "\001\001\000\014\014\316\015\117\016\067\017\072\025" +
    "\122\001\001\000\002\001\001\000\014\014\320\015\117" +
    "\016\067\017\072\025\122\001\001\000\002\001\001\000" +
    "\036\014\111\015\117\016\067\017\072\025\122\035\115" +
    "\036\032\037\022\040\023\041\026\042\107\043\322\044" +
    "\021\045\074\001\001\000\034\014\111\015\117\016\067" +
    "\017\072\025\122\035\115\036\032\037\022\040\023\041" +
    "\026\042\310\044\021\045\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\332\015\117" +
    "\016\067\017\072\025\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\340\001\001\000\002\001\001\000" +
    "\014\014\342\015\117\016\067\017\072\025\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\014\111\015" +
    "\117\016\067\017\072\025\122\035\115\036\032\037\022" +
    "\040\023\041\026\042\107\043\345\044\021\045\074\001" +
    "\001\000\034\014\111\015\117\016\067\017\072\025\122" +
    "\035\115\036\032\037\022\040\023\041\026\042\310\044" +
    "\021\045\074\001\001\000\002\001\001\000\004\046\355" +
    "\001\001\000\004\046\351\001\001\000\002\001\001\000" +
    "\036\014\111\015\117\016\067\017\072\025\122\035\115" +
    "\036\032\037\022\040\023\041\026\042\107\043\353\044" +
    "\021\045\074\001\001\000\034\014\111\015\117\016\067" +
    "\017\072\025\122\035\115\036\032\037\022\040\023\041" +
    "\026\042\310\044\021\045\074\001\001\000\002\001\001" +
    "\000\004\025\357\001\001\000\014\014\364\015\117\016" +
    "\067\017\072\025\122\001\001\000\002\001\001\000\004" +
    "\033\361\001\001\000\002\001\001\000\014\014\363\015" +
    "\117\016\067\017\072\025\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\371\001\001\000\002\001\001" +
    "\000\014\014\373\015\117\016\067\017\072\025\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\376" +
    "\001\001\000\002\001\001\000\014\014\u0100\015\117\016" +
    "\067\017\072\025\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u010d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\u0103\015\117" +
    "\016\067\017\072\023\u0107\025\122\040\u0104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\014\u0103\015\117\016\067\017\072\023\u0105\024\u010b\025" +
    "\122\040\u0104\001\001\000\020\014\u0103\015\117\016\067" +
    "\017\072\023\u0107\025\122\040\u0104\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u010f\001\001\000\002" +
    "\001\001\000\014\014\342\015\117\016\067\017\072\025" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u011a" +
    "\001\001\000\002\001\001\000\006\010\u011c\012\u0117\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	Lexer lexer;
	public Parser(Lexer l) {
    	super(l);
    	lexer = l;
   	}
    static int[] tokens = {
    	Symbols.AND, Symbols.OR, Symbols.NOT, Symbols.DOLLAR, Symbols.PLUS, Symbols.TIMES, Symbols.MINUS, Symbols.MINUSMINUS, Symbols.UNDERLINE,
    	Symbols.DIV, Symbols.LANNOT, Symbols.RANNOT, Symbols.MOD, Symbols.LEQ, Symbols.DOUBLEARROW, Symbols.LT,
    	Symbols.GEQ, Symbols.GT, Symbols.EQ, Symbols.NEQ, Symbols.EQEQ, Symbols.EQEQEQ, Symbols.COLEQ, Symbols.DOT, Symbols.COMMA,
    	Symbols.COLON, Symbols.SEMICOLON, Symbols.LPAREN, Symbols.RPAREN, Symbols.LCURLYBRACKET, Symbols.RCURLYBRACKET,
    	Symbols.LSQUAREBRACKET, Symbols.RSQUAREBRACKET, Symbols.IF, Symbols.ELSE,
    	Symbols.WHILE, Symbols.DO, Symbols.TRUE, Symbols.FALSE, Symbols.INT, Symbols.BOOLEAN,
    	Symbols.STRING, Symbols.UNIT, Symbols.ARRAY, Symbols.SET, Symbols.UNION, Symbols.SUBSETOF, Symbols.INTERSECT, 
    	Symbols.NEW, Symbols.VAR, Symbols.VAL, Symbols.DEF, Symbols.CASE, Symbols.IMPORT, Symbols.CLASS, Symbols.OBJECT, Symbols.EXTENDS, 
    	Symbols.ENSURING, Symbols.ACTOR, Symbols.REACT, Symbols.ACT, Symbols.LOOP, Symbols.ALL, Symbols.EX, Symbols.NEW  
    };
   	static String[] token_names = {
   		"&", "||", "!", "$", "+", "*", "-", "--", "_",
   		"/", "/*:", "*/", "%", "<=", "=>", "<", 
   		">=", ">",	"=", "!=", "==", "===", ":=", ".", ",", 
   		":", ";", "(", ")", "{", "}",
   		"[", "]", "if", "else",
   		"while", "do", "true", "false", "Int", "Boolean", 
   		"String", "Unit", "Array", "Set", "union", "subsetOf", "intersect", 
   		"new", "var", "val", "def", "case", "import", "class", "object", "extends", 
   		"ensuring", "actor", "react", "act", "loop", "ALL", "EX", "new"
	};	   	
   	public static String print ( Symbol s ) {
   		for (int i=0; i<tokens.length; i++)
	    if (tokens[i]==s.sym) {  
	    	String res = token_names[i] + " ";
	       	if (s.value==null)
		  		return res;
	       	else if (s.value instanceof Integer)
		  		return res + ((Integer) s.value).intValue();
	       	else if (s.value instanceof Float)
		  		return res + ((Float) s.value).floatValue();
	       	else if (s.value instanceof String)
		  		return res + (String) s.value;
		}
		return "?";
    }
  	public void syntax_error(Symbol cur_token) {
  		System.err.println("Syntax error while reading input \"" + print(cur_token) + "\" at line " + lexer.getLine() + " column " + lexer.getColumn());		
	}
	
    public void unrecovered_syntax_error(Symbol current) {
    	System.err.println("Couldn't repair from parsing errors. I am deeply sorry for disappointing you.");
    	System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ArgumentExprs ::= LPAREN ExprsComma RPAREN 
            {
              List RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExprs",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ArgumentExprs ::= LPAREN RPAREN 
            {
              List RESULT =null;
		 List list = new LinkedList<Expression>(); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentExprs",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Binding ::= Variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binding",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Pattern ::= ID COLON Type 
            {
              Pattern RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                      scala.Option<Integer> n = scala.Option.apply(null);
                      Variable v = lazabs.ast.ASTree.makeVariable("sc_" + id, n);
                      v.stype(t);
                      RESULT = new Pattern(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Pattern",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Pattern ::= ID 
            {
              Pattern RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      scala.Option<Integer> n = scala.Option.apply(null); 
                      RESULT = new Pattern(lazabs.ast.ASTree.makeVariable("sc_" + id, n));
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Pattern",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CaseEffect ::= BlockStats 
            {
              Expression RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makeBlock(es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseEffect",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CaseClause ::= CASE Pattern IF LPAREN Expr RPAREN DOUBLEARROW CaseEffect 
            {
              ASTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CaseClause(p, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseClause",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CaseClause ::= CASE Pattern DOUBLEARROW CaseEffect 
            {
              ASTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CaseClause(p, new BoolConst(true), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseClause",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CaseClauses ::= CaseClauses CaseClause 
            {
              List RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List cs = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree c = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 cs.add(c); RESULT = cs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseClauses",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CaseClauses ::= CaseClause 
            {
              List RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree c = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List list = new LinkedList<CaseClause>(); list.add(c); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseClauses",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BlockStat ::= Declaration 
            {
              ASTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree d = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BlockStat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BlockStat ::= Expr 
            {
              ASTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BlockStat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BlockStats ::= BlockStats BlockStat 
            {
              List RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List bs = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree b = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 bs.add(b); RESULT = bs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BlockStats",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // BlockStats ::= BlockStat 
            {
              List RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree b = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List list = new LinkedList<Expression>(); list.add(b); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BlockStats",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Block ::= LCURLYBRACKET RCURLYBRACKET 
            {
              Expression RESULT =null;
		 List list = new LinkedList<Expression>(); list.add(new Skip()); RESULT = lazabs.ast.ASTree.makeBlock(list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Block ::= LCURLYBRACKET BlockStats RCURLYBRACKET 
            {
              Expression RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lazabs.ast.ASTree.makeBlock(es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Variable ::= DOLLAR ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scala.Option<Integer> n = scala.Option.apply(null);                                   
                      RESULT = lazabs.ast.ASTree.makeVariable(id, n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Variable ::= ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scala.Option<Integer> n = scala.Option.apply(null);                                   
                      RESULT = lazabs.ast.ASTree.makeVariable("sc_" + id, n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BinaryExpression ::= Expr NOT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new SendMessageOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // BinaryExpression ::= Binding DOUBLEARROW Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new AnonymousFunctionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BinaryExpression ::= Expr UNTIL Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new UntilOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BinaryExpression ::= Expr DOT INTERSECT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new SetIntersectOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // BinaryExpression ::= Expr INTERSECT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new SetIntersectOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BinaryExpression ::= Expr DOT UNION Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new SetUnionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BinaryExpression ::= Expr UNION Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new SetUnionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BinaryExpression ::= Expr DOT SUBSETOF Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new SetSubsetOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BinaryExpression ::= Expr SUBSETOF Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new SetSubsetOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BinaryExpression ::= Expr DOT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new AccessOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BinaryExpression ::= Expr MOD Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new ModuloOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BinaryExpression ::= Expr DIV Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new DivisionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BinaryExpression ::= Expr TIMES Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new MultiplicationOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BinaryExpression ::= Expr MINUSMINUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new SetDifferenceOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BinaryExpression ::= Expr MINUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new SubtractionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BinaryExpression ::= Expr PLUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new AdditionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BinaryExpression ::= Expr GEQ Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new GreaterThanEqualOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BinaryExpression ::= Expr GT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new GreaterThanOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BinaryExpression ::= Expr LEQ Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new LessThanEqualOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BinaryExpression ::= Expr LT Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new LessThanOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BinaryExpression ::= Expr EQEQEQ Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new IffOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BinaryExpression ::= Expr NEQ Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new InequalityOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BinaryExpression ::= Expr EQ Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new AssignmentOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BinaryExpression ::= Expr EQEQ Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new EqualityOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BinaryExpression ::= Expr AND Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new ConjunctionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BinaryExpression ::= Expr OR Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new DisjunctionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BinaryExpression ::= IF LPAREN Expr RPAREN Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new IfThenOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BinaryExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= FALSE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BoolConst(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= TRUE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BoolConst(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= NULL 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Null(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= NUMBER 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BigInteger n = (BigInteger)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NumericalConst(new scala.math.BigInt(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Block 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= NEW ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makeCreateObject("sc_" + id,new LinkedList<Expression>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= NEW ID ArgumentExprs 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List as = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makeCreateObject("sc_" + id,as); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= BinaryExpression 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= NEW ARRAY LSQUAREBRACKET Type RSQUAREBRACKET LPAREN Expr RPAREN 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (e instanceof NumericalConst) {
                        List list = new LinkedList<Expression>();
                        for(int i=0; i < ((NumericalConst)e).num().intValue(); i++)
                      	  list.add(new NumericalConst(new scala.math.BigInt(BigInteger.ZERO)));
                        RESULT = lazabs.ast.ASTree.makeArrayConst(list);
                      } else {
                        scala.Option<Expression> l = scala.Option.apply(e);
                        scala.Option<Variable> v = scala.Option.apply(null);
                        ScArray ar = new ScArray(v, l);
                        ar.stype(t);                        
                        RESULT = ar;
                      } 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= SET ArgumentExprs 
            {
              Expression RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List as = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makeSetConst(as); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= ARRAY ArgumentExprs 
            {
              Expression RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List as = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makeArrayConst(as); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= DOLLAR ID ArgumentExprs ArgumentExprs 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makeTwoDimArraySelect(id,e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= ID ArgumentExprs ArgumentExprs 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makeTwoDimArraySelect("sc_" + id,e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= DOLLAR ID ArgumentExprs 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List as = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makeFunctionCall(id,as); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= ID ArgumentExprs 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List as = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makeFunctionCall("sc_" + id,as); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= NOT Expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(new NotOp(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= MINUS Expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(new MinusOp(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= DO Expr WHILE LPAREN Expr RPAREN 
            {
              Expression RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DoWhileLoop(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= WHILE LPAREN Expr RPAREN Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileLoop(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= IF LPAREN Expr RPAREN Expr ELSE Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TernaryExpression(new IfThenElseOp(),e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= LPAREN Expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= EX ID COLON Type DOT Expr 
            {
              Expression RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String bv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 BinderVariable v = new BinderVariable("sc_" + bv);
                      v.stype(t);                   
                      RESULT = new Existential(v, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= ALL ID COLON Type DOT Expr 
            {
              Expression RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String bv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 BinderVariable v = new BinderVariable("sc_" + bv);
                      v.stype(t);
                      RESULT = new Universal(v, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprsComma ::= ExprsComma COMMA Expr 
            {
              List RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprsComma",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExprsComma ::= Expr 
            {
              List RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List list = new LinkedList<Expression>(); list.add(e); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprsComma",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type ::= ID 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ClassType("sc_" + id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new StringType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntegerType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Type ::= SET LSQUAREBRACKET Type RSQUAREBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SetType(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Type ::= ARRAY LSQUAREBRACKET Type RSQUAREBRACKET 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayType(new IntegerType(), t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Type ::= UNIT 
            {
              Type RESULT =null;
		 RESULT = new UnitType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Param ::= ID COLON Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parameter("sc_" + id, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Param",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ParamsComma ::= ParamsComma COMMA Param 
            {
              List RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(p); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamsComma",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ParamsComma ::= Param 
            {
              List RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List list = new LinkedList<Parameter>(); list.add(p); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamsComma",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ParamClause ::= LPAREN RPAREN 
            {
              List RESULT =null;
		 List list = new LinkedList<Parameter>(); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamClause",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ParamClause ::= 
            {
              List RESULT =null;
		 List list = new LinkedList<Parameter>(); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamClause",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ParamClause ::= LPAREN ParamsComma RPAREN 
            {
              List RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamClause",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // React ::= REACT LCURLYBRACKET CaseClauses RCURLYBRACKET 
            {
              ASTree RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List cs = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lazabs.ast.ASTree.makeReactBlock(cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("React",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ActorStat ::= LOOP LCURLYBRACKET ActorStats RCURLYBRACKET 
            {
              ASTree RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lazabs.ast.ASTree.makeActorLoop(es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActorStat",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ActorStat ::= React 
            {
              ASTree RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree r = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActorStat",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ActorStat ::= Declaration 
            {
              ASTree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree d = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActorStat",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ActorStat ::= Expr 
            {
              ASTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActorStat",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ActorStats ::= ActorStats ActorStat 
            {
              List RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List as = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree a = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 as.add(a); RESULT = as; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActorStats",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ActorStats ::= ActorStat 
            {
              List RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree a = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List list = new LinkedList<Expression>(); list.add(a); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ActorStats",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassDeclaration ::= CLASS ID ParamClause EXTENDS ID LCURLYBRACKET ActorStats RCURLYBRACKET 
            {
              ASTree RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 scala.Option<String> parentName = scala.Option.apply("sc_" + id2);
                      RESULT = lazabs.ast.ASTree.makeClassDeclaration("sc_" + id1, ps, parentName, es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FunDeclarationWOPost ::= DEF ACT ParamClause LCURLYBRACKET ActorStats RCURLYBRACKET 
            {
              ASTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lazabs.ast.ASTree.makeFunctionDefinition(new String("sc_act"), ps, new UnitType(), lazabs.ast.ASTree.makeBlock(es)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDeclarationWOPost",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FunDeclarationWOPost ::= DEF ID ParamClause Block 
            {
              ASTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makeFunctionDefinition("sc_" + id, ps, new UnitType(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDeclarationWOPost",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FunDeclarationWOPost ::= DEF ID ParamClause EQ Expr 
            {
              ASTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makeFunctionDefinition("sc_" + id, ps, new UnitType(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDeclarationWOPost",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FunDeclarationWOPost ::= DEF ID ParamClause COLON Type EQ Expr 
            {
              ASTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makeFunctionDefinition("sc_" + id, ps, t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDeclarationWOPost",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FunDeclaration ::= FunDeclarationWOPost 
            {
              ASTree RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree f = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDeclaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FunDeclaration ::= FunDeclarationWOPost ENSURING LPAREN Variable DOUBLEARROW Expr RPAREN 
            {
              ASTree RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ASTree f = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Variable rs = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression pst = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 FunctionDefinition func = ((FunctionDefinition) f);
                      scala.Option<scala.Tuple2<Variable,Expression>> rp = scala.Option.apply(new scala.Tuple2<Variable,Expression>(rs,pst));
                      RESULT = new FunctionDefinition(func.funcName(), func.params(), func.t(), func.body(), rp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDeclaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VarDeclaration ::= VAL Variable COLON Type EQ Expr 
            {
              ASTree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarDeclaration(v.name(), t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarDeclaration ::= VAR Variable COLON Type EQ Expr 
            {
              ASTree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarDeclaration(v.name(), t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Declaration ::= ClassDeclaration 
            {
              ASTree RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree cd = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Declaration ::= VarDeclaration 
            {
              ASTree RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree vd = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Declaration ::= Predicates 
            {
              ASTree RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makePredsDeclaration(ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Declaration ::= FunDeclaration 
            {
              ASTree RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree fd = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Declaration ::= VAL Variable COLON Type EQ ACTOR LCURLYBRACKET ActorStats RCURLYBRACKET 
            {
              ASTree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List es = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lazabs.ast.ASTree.makeSingletonActorDeclaration(v.name(), es); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Declarations ::= Declarations Declaration 
            {
              List RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List ds = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree d = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ds.add(d); RESULT = ds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarations",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Declarations ::= Declaration 
            {
              List RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree d = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List list = new LinkedList<Declaration>(); list.add(d); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarations",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ScalaObject ::= OBJECT ID LCURLYBRACKET Declarations RCURLYBRACKET 
            {
              ASTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List ds = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lazabs.ast.ASTree.makeScalaObject(id,ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ScalaObject",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PredStat ::= Expr ATSIGN LCURLYBRACKET PredStats RCURLYBRACKET 
            {
              ASTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lazabs.ast.ASTree.makePredicate(e, ps); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PredStat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PredStat ::= VarDeclaration 
            {
              ASTree RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree vd = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PredStat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PredStat ::= Expr 
            {
              ASTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lazabs.ast.ASTree.makePredicate(e, new LinkedList<Predicate>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PredStat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PredStats ::= PredStats PredStat 
            {
              List RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree p = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(p instanceof Predicate) {
                        List<Predicate> predicates = lazabs.ast.ASTree.expandPreds((Predicate)p);
				        for(Predicate pred: predicates)
				          ps.add(pred);
				        } else ps.add(p);
				      RESULT = ps; 
				   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PredStats",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PredStats ::= PredStat 
            {
              List RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree p = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List list = new LinkedList<Parameter>();
				      if(p instanceof Predicate) {				         
				        List<Predicate> predicates = lazabs.ast.ASTree.expandPreds((Predicate)p);
				        for(Predicate pred: predicates)
				          list.add(pred);
				        } else 
				      list.add(p);
				      RESULT = list; 
				   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PredStats",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Predicates ::= LANNOT PredStats RANNOT 
            {
              List RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Predicates",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PathElem ::= UNDERLINE 
            {
              ASTree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PathElem",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PathElem ::= ID 
            {
              ASTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PathElem",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ImportExpr ::= ImportExpr DOT PathElem 
            {
              ASTree RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree pe = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportExpr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ImportExpr ::= PathElem 
            {
              ASTree RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree pe = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportExpr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ImportExprs ::= ImportExprs COMMA ImportExpr 
            {
              List RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportExprs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ImportExprs ::= ImportExpr 
            {
              List RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportExprs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ImportDeclarations ::= ImportDeclarations ImportDeclaration 
            {
              List RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclarations",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ImportDeclarations ::= ImportDeclaration 
            {
              List RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclarations",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ImportDeclaration ::= IMPORT ImportExprs 
            {
              ASTree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ImportDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Import ::= ImportDeclarations 
            {
              ASTree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Import",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Import ::= 
            {
              ASTree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Import",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ScalaProgram ::= Predicates Import ScalaObject 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int soleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int soright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree so = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  lazabs.ast.ASTree.makeScalaObject(ps,so); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ScalaProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ScalaProgram ::= Import ScalaObject 
            {
              Object RESULT =null;
		int soleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int soright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTree so = (ASTree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = so; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ScalaProgram",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Top ::= ScalaProgram 
            {
              Object RESULT =null;
		int scpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object scp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = scp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Top",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Top EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

