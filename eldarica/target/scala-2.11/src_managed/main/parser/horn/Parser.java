
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 23 13:44:51 IST 2022
//----------------------------------------------------

package lazabs.horn.parser;

import lazabs.ast.ASTree.*;
import lazabs.horn.global.*;
import lazabs.types.*;
import java_cup.runtime.*;
import java.util.*;
import java.math.BigInteger;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 23 13:44:51 IST 2022
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\006\000\002\005\003" +
    "\000\002\005\005\000\002\010\006\000\002\010\006\000" +
    "\002\010\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\005\000\002\006\003\000\002\006\003\000\002\011" +
    "\003\000\002\011\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\004\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\004" +
    "\000\002\014\005\000\002\014\003\000\002\014\003\000" +
    "\002\015\005\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\006\027\007\035\004\001\002\000\010\025" +
    "\ufff8\030\075\032\074\001\002\000\010\002\uffff\027\uffff" +
    "\035\uffff\001\002\000\004\002\111\001\002\000\006\025" +
    "\ufff6\032\107\001\002\000\004\025\ufff7\001\002\000\010" +
    "\002\000\027\007\035\004\001\002\000\004\025\013\001" +
    "\002\000\014\006\022\012\014\030\023\034\016\035\020" +
    "\001\002\000\012\012\014\030\053\034\016\035\027\001" +
    "\002\000\006\004\ufffc\026\ufffc\001\002\000\040\004\uffdf" +
    "\005\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\015\uffdf\016" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf" +
    "\031\uffdf\001\002\000\030\007\042\010\047\011\040\012" +
    "\037\015\045\016\052\020\051\021\050\022\044\023\043" +
    "\024\041\001\002\000\040\004\ufff8\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\015\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\026\ufff8\030\075\032\074\001\002\000" +
    "\006\004\071\026\072\001\002\000\014\006\022\012\014" +
    "\030\023\034\016\035\027\001\002\000\014\006\022\012" +
    "\014\030\023\034\016\035\027\001\002\000\006\004\ufff4" +
    "\026\ufff4\001\002\000\010\004\ufff3\005\026\026\ufff3\001" +
    "\002\000\014\006\022\012\014\030\023\034\016\035\027" +
    "\001\002\000\040\004\uffe0\005\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\015\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\026\uffe0\031\uffe0\001\002\000\012\004" +
    "\uffee\005\uffee\026\uffee\031\uffee\001\002\000\010\004\uffdd" +
    "\005\026\031\uffdd\001\002\000\032\007\042\010\047\011" +
    "\040\012\037\015\045\016\052\020\051\021\050\022\044" +
    "\023\043\024\041\031\046\001\002\000\006\004\034\031" +
    "\035\001\002\000\014\006\022\012\014\030\023\034\016" +
    "\035\027\001\002\000\012\004\uffe8\005\uffe8\026\uffe8\031" +
    "\uffe8\001\002\000\006\004\uffde\031\uffde\001\002\000\012" +
    "\012\014\030\053\034\016\035\027\001\002\000\012\012" +
    "\014\030\053\034\016\035\027\001\002\000\012\012\014" +
    "\030\053\034\016\035\027\001\002\000\012\012\014\030" +
    "\053\034\016\035\027\001\002\000\012\012\014\030\053" +
    "\034\016\035\027\001\002\000\012\012\014\030\053\034" +
    "\016\035\027\001\002\000\012\012\014\030\053\034\016" +
    "\035\027\001\002\000\040\004\uffe1\005\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\015\uffe1\016\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\026\uffe1\031\uffe1\001\002\000" +
    "\012\012\014\030\053\034\016\035\027\001\002\000\012" +
    "\012\014\030\053\034\016\035\027\001\002\000\012\012" +
    "\014\030\053\034\016\035\027\001\002\000\012\012\014" +
    "\030\053\034\016\035\027\001\002\000\012\012\014\030" +
    "\053\034\016\035\027\001\002\000\024\004\uffeb\005\uffeb" +
    "\007\042\010\047\011\040\012\037\015\045\026\uffeb\031" +
    "\uffeb\001\002\000\016\007\042\010\047\011\040\012\037" +
    "\015\045\031\046\001\002\000\024\004\uffec\005\uffec\007" +
    "\042\010\047\011\040\012\037\015\045\026\uffec\031\uffec" +
    "\001\002\000\024\004\uffe9\005\uffe9\007\042\010\047\011" +
    "\040\012\037\015\045\026\uffe9\031\uffe9\001\002\000\040" +
    "\004\uffe5\005\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\015" +
    "\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\026\uffe5\031\uffe5\001\002\000\040\004\uffe4\005\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\015\uffe4\016\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\026\uffe4\031\uffe4\001" +
    "\002\000\024\004\uffea\005\uffea\007\042\010\047\011\040" +
    "\012\037\015\045\026\uffea\031\uffea\001\002\000\024\004" +
    "\ufff0\005\ufff0\007\042\010\047\011\040\012\037\015\045" +
    "\026\ufff0\031\ufff0\001\002\000\040\004\uffe7\005\uffe7\007" +
    "\uffe7\010\047\011\040\012\uffe7\015\045\016\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\026\uffe7\031\uffe7\001" +
    "\002\000\024\004\uffef\005\uffef\007\042\010\047\011\040" +
    "\012\037\015\045\026\uffef\031\uffef\001\002\000\040\004" +
    "\uffe3\005\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\015\uffe3" +
    "\016\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\026" +
    "\uffe3\031\uffe3\001\002\000\040\004\uffe6\005\uffe6\007\uffe6" +
    "\010\047\011\040\012\uffe6\015\045\016\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\026\uffe6\031\uffe6\001\002" +
    "\000\012\004\uffed\005\uffed\026\uffed\031\uffed\001\002\000" +
    "\014\006\022\012\014\030\023\034\016\035\020\001\002" +
    "\000\010\002\ufffd\027\ufffd\035\ufffd\001\002\000\006\004" +
    "\ufffb\026\ufffb\001\002\000\004\035\076\001\002\000\004" +
    "\035\076\001\002\000\010\004\ufff2\031\ufff2\033\ufff2\001" +
    "\002\000\006\004\100\031\101\001\002\000\004\035\102" +
    "\001\002\000\010\004\ufffa\025\ufffa\026\ufffa\001\002\000" +
    "\010\004\ufff1\031\ufff1\033\ufff1\001\002\000\006\004\100" +
    "\033\104\001\002\000\010\004\ufff9\025\ufff9\026\ufff9\001" +
    "\002\000\040\004\uffe2\005\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\026\uffe2\031\uffe2\001\002\000\010\002\ufffe" +
    "\027\ufffe\035\ufffe\001\002\000\004\033\110\001\002\000" +
    "\004\025\ufff5\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\014\002\005\003\010\004\004\007\011\010" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\105\007\011\010\007\001\001\000\002\001\001\000\014" +
    "\005\020\006\014\010\023\013\024\014\016\001\001\000" +
    "\004\014\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\067\014\016\001\001\000\010\013\030\014\031" +
    "\015\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\027\014\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\030\014\016\015\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\066\001\001\000" +
    "\004\014\065\001\001\000\004\014\064\001\001\000\004" +
    "\014\063\001\001\000\004\014\062\001\001\000\004\014" +
    "\061\001\001\000\004\014\060\001\001\000\002\001\001" +
    "\000\004\014\057\001\001\000\004\014\056\001\001\000" +
    "\004\014\055\001\001\000\004\014\053\001\001\000\004" +
    "\014\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\072\010\023\013\024\014" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\102\001\001\000\004\011\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	HornLexer lexer;
	public int relVarCount = 0;
	public Parser(HornLexer l) {
    	super(l);
    	lexer = l;
   	}
    static int[] tokens = {
      Symbols.COMMA, 
      Symbols.OR, 
      Symbols.NOT, 
      Symbols.PLUS, 
      Symbols.TIMES,
      Symbols.MOD,
      Symbols.MINUS, 
      Symbols.UNDERLINE,
      Symbols.DIV,
      Symbols.LEQ,
      Symbols.LT,
      Symbols.GEQ,
      Symbols.GT,
      Symbols.EQ,
      Symbols.NEQ,
      Symbols.IF,
      Symbols.DOT,
      Symbols.LPAREN,
      Symbols.RPAREN,
      Symbols.ARMC_PARAMS_S,
      Symbols.ARMC_PARAMS_E,
      Symbols.FALSE
    };
    
   	static String[] token_names = {
   	  ",",
   	  ";",
   	  "\\" + "+",
   	  "+",
   	  "*",
   	  "mod",
   	  "-",
   	  "_",
   	  "/",
   	  "=<",
   	  "<",
   	  ">=",
   	  ">",
   	  "=",
   	  "!=",
   	  ":=",
   	  ".",
   	  "(",
   	  ")",
   	  "[",
   	  "]",
   	  "false"
	};
		   	
   	public static String print ( Symbol s ) {
   		for (int i=0; i<tokens.length; i++)
	    if (tokens[i]==s.sym) {  
	    	String res = token_names[i] + " ";
	       	if (s.value==null)
		  		return res;
	       	else if (s.value instanceof Integer)
		  		return res + ((Integer) s.value).intValue();
	       	else if (s.value instanceof Float)
		  		return res + ((Float) s.value).floatValue();
	       	else if (s.value instanceof String)
		  		return res + (String) s.value;
		}
		return "?";
    }
  	public void syntax_error(Symbol cur_token) {
  		System.err.println("Syntax error while reading input \"" + print(cur_token) + "\" at line " + lexer.getLine() + " column " + lexer.getColumn());		
	}
	
    public void unrecovered_syntax_error(Symbol current) {
    	throw new RuntimeException("Couldn't repair from parsing errors.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BooleanExprAndAllowed ::= BooleanExpr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExprAndAllowed",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BooleanExprAndAllowed ::= BooleanExprAndAllowed COMMA BooleanExprAndAllowed 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new ConjunctionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExprAndAllowed",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IntegerExpr ::= NUMBER 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BigInteger n = (BigInteger)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     RESULT = new NumericalConst(new scala.math.BigInt(n)); 
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IntegerExpr ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      scala.Option<Integer> n = scala.Option.apply(null);                                   
                      Variable v = lazabs.ast.ASTree.makeVariable("sc_" + id, n);
                      v.stype(new IntegerType());
                      RESULT = v; 
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IntegerExpr ::= LPAREN IntegerExpr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IntegerExpr ::= MINUS IntegerExpr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(new MinusOp(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IntegerExpr ::= IntegerExpr MOD IntegerExpr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new ModuloOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IntegerExpr ::= IntegerExpr DIV IntegerExpr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new DivisionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IntegerExpr ::= IntegerExpr TIMES IntegerExpr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new MultiplicationOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IntegerExpr ::= IntegerExpr MINUS IntegerExpr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new SubtractionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IntegerExpr ::= IntegerExpr PLUS IntegerExpr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new AdditionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IntegerExpr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BooleanExpr ::= LPAREN BooleanExprAndAllowed RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BooleanExpr ::= IntegerExpr GEQ IntegerExpr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new GreaterThanEqualOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BooleanExpr ::= IntegerExpr GT IntegerExpr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new GreaterThanOp(), e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BooleanExpr ::= IntegerExpr LEQ IntegerExpr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new LessThanEqualOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BooleanExpr ::= IntegerExpr LT IntegerExpr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new LessThanOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BooleanExpr ::= NOT BooleanExpr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(new NotOp(), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BooleanExpr ::= BooleanExpr OR BooleanExpr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new DisjunctionOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BooleanExpr ::= IntegerExpr NEQ IntegerExpr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new InequalityOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BooleanExpr ::= IntegerExpr EQ IntegerExpr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, new EqualityOp(), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExpr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parameters ::= Parameters COMMA ID 
            {
              List RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(new Parameter("sc_" + id, new IntegerType())); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parameters ::= ID 
            {
              List RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List list = new LinkedList<Parameter>();
                      Parameter p = new Parameter("sc_" + id, new IntegerType());                       
                      list.add(p);
                      RESULT = list;
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BodyLiteral ::= BooleanExpr 
            {
              HornLiteral RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Interp(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyLiteral",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BodyLiteral ::= RelationVariable 
            {
              HornLiteral RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RelVar rv = (RelVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = rv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyLiteral",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // HeadLiteral ::= FALSE ARMC_PARAMS_S ARMC_PARAMS_E 
            {
              HornLiteral RESULT =null;
		 RESULT = new Interp(new BoolConst(false)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HeadLiteral",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // HeadLiteral ::= FALSE 
            {
              HornLiteral RESULT =null;
		 RESULT = new Interp(new BoolConst(false)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HeadLiteral",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // HeadLiteral ::= RelationVariable 
            {
              HornLiteral RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RelVar rv = (RelVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HeadLiteral",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RelationVariable ::= ID 
            {
              RelVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                      parser.relVarCount += 1;
                      RESULT = new RelVar(id, scala.collection.JavaConversions.asScalaBuffer(new ArrayList()).toList());
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationVariable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RelationVariable ::= ID ARMC_PARAMS_S Parameters ARMC_PARAMS_E 
            {
              RelVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                      parser.relVarCount += 1;
                      RESULT = new RelVar(id, scala.collection.JavaConversions.asScalaBuffer(ps).toList()); 
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationVariable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RelationVariable ::= ID LPAREN Parameters RPAREN 
            {
              RelVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List ps = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                      parser.relVarCount += 1;
                      RESULT = new RelVar(id, scala.collection.JavaConversions.asScalaBuffer(ps).toList()); 
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationVariable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BodyLiterals ::= BodyLiterals COMMA BodyLiteral 
            {
              List RESULT =null;
		int blsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int blsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List bls = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HornLiteral b = (HornLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 bls.add(b); RESULT = bls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyLiterals",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BodyLiterals ::= BodyLiteral 
            {
              List RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HornLiteral b = (HornLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List list = new LinkedList<HornLiteral>(); list.add(b); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyLiterals",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // HornClause ::= HeadLiteral IF BodyLiterals DOT 
            {
              HornClause RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		HornLiteral h = (HornLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int blsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List bls = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		                      
                      RESULT = new HornClause(h,scala.collection.JavaConversions.asScalaBuffer(bls).toList()); 
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HornClause",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HornClauses ::= HornClauses HornClause 
            {
              List RESULT =null;
		int hcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List hcs = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HornClause c = (HornClause)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 hcs.add(c); RESULT = hcs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HornClauses",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // HornClauses ::= HornClause 
            {
              List RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HornClause c = (HornClause)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List list = new LinkedList<HornClause>(); list.add(c); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HornClauses",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Top ::= HornClauses 
            {
              Object RESULT =null;
		int hcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List hcs = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = hcs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Top",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Top EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

