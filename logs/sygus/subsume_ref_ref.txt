PDSC: Verifying ./Benchmarks_sygus/subsume_ref_ref.smt2
Namespace(file='./Benchmarks_sygus/subsume_ref_ref.smt2', log=False, msat=False, property=None, qe=False, sygus=True)
Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, ]
--->[2]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, ]
--->[2]

[abs_h_0, 
abs_h_1, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
count_0_1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, ]
--->[1]

[abs_h_0, 
abs_h_1, ]
--->[0]


Blocking composition assignment 0 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, ]
--->[2]

[abs_h_0, 
abs_h_1, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[0]


6 SMT queries performed.
-----------------check_spuriousness-------------------------------



SEARCHING A CONCRETE CEX TRACE FROM ABOVE ABSTRACT CEX: 
--------------------------------------------------
Initial State {'count_0_1': True, 'abs_h_1': True, 'count_0_0': True, 'abs_h_0': True, 'x0_eq_x1': True, 'h_1': 1, 'h_0': 1, 'x_1': 0, 'x_0': 0, 'count_1': 0, 'count_0': 0}


Next concrete state : {'count_1': 1, 'x_1': 8, 'count_0': 0, 'h_0': 1, 'x_0': 0, 'h_1': 1}


Next concrete state : {'count_0': 1, 'x_0': 8, 'count_1': 1, 'h_1': 1, 'x_1': 8, 'h_0': 1}


Next concrete state : {'count_0': 1, 'x_0': 8, 'h_0': 1, 'count_1': 1, 'h_1': 1, 'x_1': 8}





Is the abstract trace spurious? True
---------------pred_disc--------------
Discover predicate using a_src, a_tgt, c_src, c_tgt to eliminate the spurious cex.. 












new predicate is (define-fun p ((x_1 Int) (h_1 Int) (count_0 Int) (h_0 Int) (x_0 Int) (count_1 Int)) Bool (= x_1 8))

Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.046645 
Solver time:	1.664771
Total time:	1.711416
Iteration count:	6
Predicate count:	5
Successfully added new predicate to input file. !
PDSC: Verifying ./Benchmarks_sygus/subsume_ref_ref.smt2
Namespace(file='./Benchmarks_sygus/subsume_ref_ref.smt2', log=False, msat=False, property=None, qe=False, sygus=True)
Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, ]
--->[2]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, ]
--->[2]

[abs_h_0, 
abs_h_1, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
count_0_1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, ]
--->[1]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[0]


Blocking composition assignment 0 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[0]


8 SMT queries performed.
-----------------check_spuriousness-------------------------------



SEARCHING A CONCRETE CEX TRACE FROM ABOVE ABSTRACT CEX: 
--------------------------------------------------
Initial State {'x_1': 9, 'count_0_1': True, 'abs_h_1': True, 'count_0_0': True, 'abs_h_0': True, 'p_synth_1': False, 'x0_eq_x1': True, 'h_1': 1, 'h_0': 1, 'x_0': 9, 'count_1': 0, 'count_0': 0}


Next concrete state : {'count_1': 1, 'x_1': 9, 'count_0': 0, 'h_0': 1, 'x_0': 9, 'h_1': 1}





Is the abstract trace spurious? True
---------------pred_disc--------------
Discover predicate using a_src, a_tgt, c_src, c_tgt to eliminate the spurious cex.. 












new predicate is (define-fun p ((x_1 Int) (h_1 Int) (count_0 Int) (h_0 Int) (x_0 Int) (count_1 Int)) Bool (< x_1 42))

Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.048615 
Solver time:	1.846803
Total time:	1.895418
Iteration count:	8
Predicate count:	6
Successfully added new predicate to input file. !
Start next refinement loop: True



PDSC: Verifying ./Benchmarks_sygus/subsume_ref_ref.smt2
Namespace(file='./Benchmarks_sygus/subsume_ref_ref.smt2', log=False, msat=False, property=None, qe=False, sygus=True)
Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, ]
--->[2]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_2, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_2, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_2, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, 
p_synth_2, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
count_0_1, 
p_synth_2, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, ]
--->[2]

[abs_h_0, 
abs_h_1, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
count_0_1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_2, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, 
p_synth_2, ]
--->[1]

[abs_h_0, 
abs_h_1, 
p_synth_2, ]
--->[0]


Blocking composition assignment 0 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_2, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, ]
--->[1]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, ]
--->[0]


Blocking composition assignment 0 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, 
p_synth_2, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
p_synth_2, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, 
p_synth_2, ]
--->[0]

[abs_h_0, 
abs_h_1, 
p_synth_2, ]
--->[0]


10 SMT queries performed.
-----------------check_spuriousness-------------------------------



SEARCHING A CONCRETE CEX TRACE FROM ABOVE ABSTRACT CEX: 
--------------------------------------------------
Initial State {'x_1': 42, 'count_0_1': True, 'abs_h_1': True, 'count_0_0': True, 'abs_h_0': True, 'p_synth_2': False, 'p_synth_1': False, 'x0_eq_x1': True, 'h_1': 1, 'h_0': 1, 'x_0': 42, 'count_1': 0, 'count_0': 0}


Next concrete state : {'count_1': 1, 'x_1': 8, 'count_0': 0, 'h_0': 1, 'x_0': 42, 'h_1': 1}





Is the abstract trace spurious? True
---------------pred_disc--------------
Discover predicate using a_src, a_tgt, c_src, c_tgt to eliminate the spurious cex.. 












new predicate is (define-fun p ((x_1 Int) (h_1 Int) (count_0 Int) (h_0 Int) (x_0 Int) (count_1 Int)) Bool (= x_1 42))

Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.050656 
Solver time:	2.092831
Total time:	2.143487
Iteration count:	10
Predicate count:	7
Successfully added new predicate to input file. !
Start next refinement loop: True



PDSC: Verifying ./Benchmarks_sygus/subsume_ref_ref.smt2
Namespace(file='./Benchmarks_sygus/subsume_ref_ref.smt2', log=False, msat=False, property=None, qe=False, sygus=True)
Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, ]
--->[2]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, ]
--->[2]

[abs_h_0, 
abs_h_1, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
count_0_1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[1]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[0]


Blocking composition assignment 0 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, ]
--->[0]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, ]
--->[0]


8 SMT queries performed.
-----------------check_spuriousness-------------------------------



SEARCHING A CONCRETE CEX TRACE FROM ABOVE ABSTRACT CEX: 
--------------------------------------------------
Initial State {'x_1': 43, 'count_0_1': True, 'abs_h_1': True, 'count_0_0': True, 'abs_h_0': True, 'p_synth_3': False, 'p_synth_2': False, 'p_synth_1': False, 'x0_eq_x1': True, 'h_1': 1, 'h_0': 1, 'x_0': 43, 'count_1': 0, 'count_0': 0}


Next concrete state : {'count_1': 1, 'x_1': 43, 'count_0': 0, 'h_0': 1, 'x_0': 43, 'h_1': 1}


Next concrete state : {'count_0': 1, 'x_0': 43, 'count_1': 1, 'h_1': 1, 'x_1': 43, 'h_0': 1}


Next concrete state : {'count_0': 1, 'x_0': 43, 'h_0': 1, 'count_1': 1, 'h_1': 1, 'x_1': 43}





Is the abstract trace spurious? True
---------------pred_disc--------------
Discover predicate using a_src, a_tgt, c_src, c_tgt to eliminate the spurious cex.. 












new predicate is (define-fun p ((x_1 Int) (h_1 Int) (count_0 Int) (h_0 Int) (x_0 Int) (count_1 Int)) Bool (= x_1 x_1))

Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.052805 
Solver time:	2.094236
Total time:	2.147041
Iteration count:	8
Predicate count:	8
Successfully added new predicate to input file. !
Start next refinement loop: True



PDSC: Verifying ./Benchmarks_sygus/subsume_ref_ref.smt2
Namespace(file='./Benchmarks_sygus/subsume_ref_ref.smt2', log=False, msat=False, property=None, qe=False, sygus=True)
Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_4, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, 
p_synth_4, ]
--->[2]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_4, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_4, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, 
p_synth_4, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, 
p_synth_4, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, 
p_synth_4, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
count_0_1, 
p_synth_4, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_4, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, 
p_synth_4, ]
--->[1]

[abs_h_0, 
abs_h_1, 
p_synth_2, 
p_synth_4, ]
--->[0]


Blocking composition assignment 0 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_4, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_4, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_4, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_4, ]
--->[0]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_4, ]
--->[0]


7 SMT queries performed.
-----------------check_spuriousness-------------------------------



SEARCHING A CONCRETE CEX TRACE FROM ABOVE ABSTRACT CEX: 
--------------------------------------------------
Initial State {'x_1': 43, 'count_0_1': True, 'abs_h_1': True, 'count_0_0': True, 'abs_h_0': True, 'p_synth_4': True, 'p_synth_3': False, 'p_synth_2': False, 'p_synth_1': False, 'x0_eq_x1': True, 'h_1': 1, 'h_0': 1, 'x_0': 43, 'count_1': 0, 'count_0': 0}


Next concrete state : {'count_1': 1, 'x_1': 43, 'count_0': 0, 'h_0': 1, 'x_0': 43, 'h_1': 1}


Next concrete state : {'count_0': 1, 'x_0': 43, 'count_1': 1, 'h_1': 1, 'x_1': 43, 'h_0': 1}


Next concrete state : {'count_0': 1, 'x_0': 43, 'h_0': 1, 'count_1': 1, 'h_1': 1, 'x_1': 43}





Is the abstract trace spurious? True
---------------pred_disc--------------
Discover predicate using a_src, a_tgt, c_src, c_tgt to eliminate the spurious cex.. 












new predicate is (define-fun p ((x_1 Int) (h_1 Int) (count_0 Int) (h_0 Int) (x_0 Int) (count_1 Int)) Bool (= x_1 x_1))

Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.058883 
Solver time:	2.150133
Total time:	2.2090159999999996
Iteration count:	7
Predicate count:	9
Successfully added new predicate to input file. !
Start next refinement loop: True



PDSC: Verifying ./Benchmarks_sygus/subsume_ref_ref.smt2
Namespace(file='./Benchmarks_sygus/subsume_ref_ref.smt2', log=False, msat=False, property=None, qe=False, sygus=True)
Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, 
p_synth_5, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]
--->[2]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, 
p_synth_5, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, 
p_synth_5, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, 
p_synth_5, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, 
p_synth_4, 
p_synth_5, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
count_0_1, 
p_synth_4, 
p_synth_5, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
abs_h_1, 
count_0_1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, 
p_synth_5, ]
--->[0]

[abs_h_0, 
abs_h_1, 
count_0_1, 
p_synth_4, 
p_synth_5, ]
--->[1]

[abs_h_0, 
abs_h_1, 
p_synth_4, 
p_synth_5, ]
--->[0]


Blocking composition assignment 0 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, 
p_synth_5, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, 
p_synth_5, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_4, 
p_synth_5, ]
--->[2]

[abs_h_0, 
abs_h_1, 
p_synth_4, 
p_synth_5, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_4, 
p_synth_5, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, 
p_synth_5, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]
--->[2]

[abs_h_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]
--->[0]


Blocking composition assignment 2 for state
 [abs_h_0, 
count_0_0, 
abs_h_1, 
p_synth_2, 
p_synth_4, 
p_synth_5, ]


Exploring new composition...


Current composition gives an abstract counter-example trace:
[abs_h_0, 
count_0_0, 
abs_h_1, 
count_0_1, 
x0_eq_x1, 
p_synth_4, 
p_synth_5, ]
--->[1]

[abs_h_0, 
count_0_0, 
abs_h_1, 
x0_eq_x1, 
p_synth_4, 
p_synth_5, ]
--->[0]

[abs_h_0, 
abs_h_1, 
p_synth_4, 
p_synth_5, ]
--->[0]


9 SMT queries performed.
-----------------check_spuriousness-------------------------------



SEARCHING A CONCRETE CEX TRACE FROM ABOVE ABSTRACT CEX: 
--------------------------------------------------
Initial State {'x_1': 43, 'count_0_1': True, 'abs_h_1': True, 'count_0_0': True, 'abs_h_0': True, 'p_synth_5': True, 'p_synth_4': True, 'p_synth_3': False, 'p_synth_2': False, 'p_synth_1': False, 'x0_eq_x1': True, 'h_1': 1, 'h_0': 1, 'x_0': 43, 'count_1': 0, 'count_0': 0}


Next concrete state : {'count_1': 1, 'x_1': 43, 'count_0': 0, 'h_0': 1, 'x_0': 43, 'h_1': 1}


Next concrete state : {'count_0': 1, 'x_0': 43, 'count_1': 1, 'h_1': 1, 'x_1': 43, 'h_0': 1}





Is the abstract trace spurious? True
---------------pred_disc--------------
Discover predicate using a_src, a_tgt, c_src, c_tgt to eliminate the spurious cex.. 












No predicate discovered in the grammar. SyGuS technique cannot refine further, unable to prove the program safe/unsafe.
Start next refinement loop: False



Total time taken : 12.594974
Number of predicates guessed: 5.0
