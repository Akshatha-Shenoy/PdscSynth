PDSC: Verifying ./Benchmarks_msat/puzzle_1.smt2
Namespace(file='./Benchmarks_msat/puzzle_1.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[2]

[abs_h_0, 
ct_1_0, 
abs_end_1, ]
--->[2]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
abs_end_1, ]
--->[2]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[2]

[abs_h_0, 
ct_1_0, 
abs_end_1, 
n0_eq_n1, ]
--->[2]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
abs_end_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[2]

[abs_h_0, 
ct_1_0, 
abs_end_1, ]
--->[0]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
ct_0_1, ]
--->[2]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_0_0, 
ct_0_1, 
ct0_eq_ct1, ]
--->[2]

[abs_h_0, 
abs_end_0, 
ct_0_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
ct_0_1, 
n0_eq_n1, ]
--->[2]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
abs_end_1, 
ct_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
abs_end_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[2]

[abs_h_0, 
ct_1_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
abs_end_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[1]

[abs_h_0, 
abs_end_0, 
ct_0_0, 
abs_end_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[1]

[abs_h_0, 
ct_0_0, 
abs_end_1, 
n0_eq_n1, ]
--->[2]

[abs_h_0, 
ct_1_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[1]

[abs_h_0, 
ct_0_0, 
abs_end_1, 
n0_eq_n1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
abs_end_1, ]
--->[0]


10 SMT queries performed.
before complete_trace: [abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[1]

[abs_h_0, 
ct_0_0, 
abs_end_1, 
n0_eq_n1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
abs_end_1, ]
--->[0]


after complete_trace [abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[1]

[abs_h_0, 
ct_0_0, 
abs_end_1, 
n0_eq_n1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
abs_end_1, ]
--->[0]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
abs_end_1, ]
--->[-1]


-----------------------------------check_spur-------------------------------
final init cond And(And(0 == ct_0, end_0 == 0),
    And(0 == ct_1, end_1 == 0),
    And(n_0 == n_1, h_0 == 1, h_1 == 0))
Initial concrete state  {'ct_1_1': False, 'ct_0_1': True, 'abs_end_1': False, 'abs_h_1': False, 'ct_1_0': False, 'ct_0_0': True, 'abs_end_0': False, 'abs_h_0': True, 'ct0_eq_ct1': True, 'n0_eq_n1': True, 'h_1': 0, 'h_0': 1, 'n_1': 0, 'n_0': 0, 'end_1': 0, 'ct_1': 0, 'end_0': 0, 'ct_0': 0}
Next concrete state {'end_1': 1, 'n_1': 0, 'ct_1': 0, 'ct_0': 0, 'h_0': 1, 'n_0': 0, 'end_0': 0, 'h_1': 0}
Writing an smt file to be run using mathsat
Checking output from mathsat 5
hi
paren_dict {26: 38, 20: 40, 9: 42, 7: 44, 65: 76, 54: 78, 52: 80, 101: 112, 90: 114, 88: 116, 143: 154, 137: 156, 126: 158, 124: 160, 168: 178, 237: 247, 231: 249, 263: 275, 257: 277, 360: 372, 389: 413, 374: 415, 354: 417, 339: 419, 324: 421, 309: 423, 294: 425, 279: 427, 251: 429, 225: 431, 210: 433, 195: 435, 180: 437, 162: 439, 118: 441, 82: 443, 46: 445, 1: 447}
aux_vars_first_occ_dict {'.def_347 ': 11, '.def_350 ': 56, '.def_353 ': 92, '.def_355 ': 128}
aux_vars_dict {'.def_347 ': '( not ( = end_0 1 ) ) ', '.def_350 ': '( <= h_0 1 ) ', '.def_353 ': '( <= 1 h_0 ) ', '.def_355 ': '( not ( = ct_0 1 ) ) '}
subs1 ( not ( = end_0 1 ) ) 
remove lets from formula
subs2 ( not ( = end_0 1 ) ) 
subs1 ( <= h_0 1 ) 
remove lets from formula
subs2 ( <= h_0 1 ) 
subs1 ( <= 1 h_0 ) 
remove lets from formula
subs2 ( <= 1 h_0 ) 
subs1 ( not ( = ct_0 1 ) ) 
remove lets from formula
subs2 ( not ( = ct_0 1 ) ) 
subs1 ( not ( = end_0 1 ) ) 
remove lets from formula
subs2 ( not ( = end_0 1 ) ) 
subs1 ( <= h_0 1 ) 
remove lets from formula
subs2 ( <= h_0 1 ) 
subs1 ( <= 1 h_0 ) 
remove lets from formula
subs2 ( <= 1 h_0 ) 
subs1 ( not ( = ct_0 1 ) ) 
remove lets from formula
subs2 ( not ( = ct_0 1 ) ) 
subs1 ( not ( = end_0 1 ) ) 
remove lets from formula
subs2 ( not ( = end_0 1 ) ) 
subs1 ( <= h_0 1 ) 
remove lets from formula
subs2 ( <= h_0 1 ) 
subs1 ( <= 1 h_0 ) 
remove lets from formula
subs2 ( <= 1 h_0 ) 
subs1 ( not ( = ct_0 1 ) ) 
remove lets from formula
subs2 ( not ( = ct_0 1 ) ) 
subs1 ( <= h_0 1 ) 
remove lets from formula
subs2 ( <= h_0 1 ) 
subs1 ( <= 1 h_0 ) 
remove lets from formula
subs2 ( <= 1 h_0 ) 
subs1 ( not ( = ct_0 1 ) ) 
remove lets from formula
subs2 ( not ( = ct_0 1 ) ) 
aux_vars_subs_dict  {'.def_347 ': '( not ( = end_0 1 ) ) ', '.def_350 ': '( <= h_0 1 ) ', '.def_353 ': '( <= 1 h_0 ) ', '.def_355 ': '( not ( = ct_0 1 ) ) '}
{26: 38, 20: 40, 9: 42, 7: 44, 65: 76, 54: 78, 52: 80, 101: 112, 90: 114, 88: 116, 143: 154, 137: 156, 126: 158, 124: 160, 168: 178, 237: 247, 231: 249, 263: 275, 257: 277, 360: 372, 389: 413, 374: 415, 354: 417, 339: 419, 324: 421, 309: 423, 294: 425, 279: 427, 251: 429, 225: 431, 210: 433, 195: 435, 180: 437, 162: 439, 118: 441, 82: 443, 46: 445, 1: 447}
{21: 32, 10: 34, 8: 36, 57: 68, 46: 70, 44: 72, 99: 110, 93: 112, 82: 114, 80: 116, 124: 134, 193: 203, 187: 205, 219: 231, 213: 233, 316: 328, 345: 369, 330: 371, 310: 373, 295: 375, 280: 377, 265: 379, 250: 381, 235: 383, 207: 385, 181: 387, 166: 389, 151: 391, 136: 393, 118: 395, 74: 397, 38: 399, 2: 401}
{22: 33, 11: 35, 9: 37, 64: 75, 58: 77, 47: 79, 45: 81, 89: 99, 158: 168, 152: 170, 184: 196, 178: 198, 281: 293, 310: 334, 295: 336, 275: 338, 260: 340, 245: 342, 230: 344, 215: 346, 200: 348, 172: 350, 146: 352, 131: 354, 116: 356, 101: 358, 83: 360, 39: 362, 3: 364}
{29: 40, 23: 42, 12: 44, 10: 46, 54: 64, 123: 133, 117: 135, 149: 161, 143: 163, 246: 258, 275: 299, 260: 301, 240: 303, 225: 305, 210: 307, 195: 309, 180: 311, 165: 313, 137: 315, 111: 317, 96: 319, 81: 321, 66: 323, 48: 325, 4: 327}
remove lets from formula
final_formula  ( and ( = h_0 1 ) ( and .def_347 ( and .def_350 ( and .def_353 ( and ( not ( = h_1 1 ) ) ( and ( not ( = end_1 1 ) ) ( and .def_355 ( and .def_347 ( and .def_350 ( and .def_353 ( and .def_355 ( and ( = n_0 n_1 ) ( and .def_350 ( and .def_353 .def_355 ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
[' ( and ( = h_0 1 ) ( and ( not ( = end_0 1 ) ) ( and ( <= h_0 1 ) ( and ( <= 1 h_0 ) ( and ( not ( = h_1 1 ) ) ( and ( not ( = end_1 1 ) ) ( and ( not ( = ct_0 1 ) ) ( and ( not ( = end_0 1 ) ) ( and ( <= h_0 1 ) ( and ( <= 1 h_0 ) ( and ( not ( = ct_0 1 ) ) ( and ( = n_0 n_1 ) ( and ( <= h_0 1 ) ( and ( <= 1 h_0 ) ( not ( = ct_0 1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ']
hi
paren_dict {26: 39, 20: 41, 9: 43, 7: 45, 66: 78, 55: 80, 53: 82, 103: 115, 92: 117, 90: 119, 146: 158, 140: 160, 129: 162, 127: 164, 172: 183, 242: 255, 367: 376, 378: 393, 363: 395, 354: 397, 344: 399, 416: 440, 401: 442, 338: 444, 323: 446, 308: 448, 293: 450, 278: 452, 263: 454, 257: 456, 236: 458, 230: 460, 215: 462, 200: 464, 185: 466, 166: 468, 121: 470, 84: 472, 47: 474, 1: 476}
aux_vars_first_occ_dict {'.def_152 ': 11, '.def_323 ': 57, '.def_324 ': 94, '.def_382 ': 131}
aux_vars_dict {'.def_152 ': '( not ( = endp_0 1 ) ) ', '.def_323 ': '( <= hp_0 1 ) ', '.def_324 ': '( <= 1 hp_0 ) ', '.def_382 ': '( not ( = ctp_0 1 ) ) '}
subs1 ( not ( = endp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = endp_0 1 ) ) 
subs1 ( <= hp_0 1 ) 
remove lets from formula
subs2 ( <= hp_0 1 ) 
subs1 ( <= 1 hp_0 ) 
remove lets from formula
subs2 ( <= 1 hp_0 ) 
subs1 ( not ( = ctp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = ctp_0 1 ) ) 
subs1 ( not ( = endp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = endp_0 1 ) ) 
subs1 ( <= hp_0 1 ) 
remove lets from formula
subs2 ( <= hp_0 1 ) 
subs1 ( <= 1 hp_0 ) 
remove lets from formula
subs2 ( <= 1 hp_0 ) 
subs1 ( not ( = ctp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = ctp_0 1 ) ) 
subs1 ( not ( = endp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = endp_0 1 ) ) 
subs1 ( <= hp_0 1 ) 
remove lets from formula
subs2 ( <= hp_0 1 ) 
subs1 ( <= 1 hp_0 ) 
remove lets from formula
subs2 ( <= 1 hp_0 ) 
subs1 ( not ( = ctp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = ctp_0 1 ) ) 
subs1 ( <= hp_0 1 ) 
remove lets from formula
subs2 ( <= hp_0 1 ) 
subs1 ( <= 1 hp_0 ) 
remove lets from formula
subs2 ( <= 1 hp_0 ) 
subs1 ( not ( = ctp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = ctp_0 1 ) ) 
aux_vars_subs_dict  {'.def_152 ': '( not ( = endp_0 1 ) ) ', '.def_323 ': '( <= hp_0 1 ) ', '.def_324 ': '( <= 1 hp_0 ) ', '.def_382 ': '( not ( = ctp_0 1 ) ) '}
{26: 39, 20: 41, 9: 43, 7: 45, 66: 78, 55: 80, 53: 82, 103: 115, 92: 117, 90: 119, 146: 158, 140: 160, 129: 162, 127: 164, 172: 183, 242: 255, 367: 376, 378: 393, 363: 395, 354: 397, 344: 399, 416: 440, 401: 442, 338: 444, 323: 446, 308: 448, 293: 450, 278: 452, 263: 454, 257: 456, 236: 458, 230: 460, 215: 462, 200: 464, 185: 466, 166: 468, 121: 470, 84: 472, 47: 474, 1: 476}
{21: 33, 10: 35, 8: 37, 58: 70, 47: 72, 45: 74, 101: 113, 95: 115, 84: 117, 82: 119, 127: 138, 197: 210, 322: 331, 333: 348, 318: 350, 309: 352, 299: 354, 371: 395, 356: 397, 293: 399, 278: 401, 263: 403, 248: 405, 233: 407, 218: 409, 212: 411, 191: 413, 185: 415, 170: 417, 155: 419, 140: 421, 121: 423, 76: 425, 39: 427, 2: 429}
{22: 34, 11: 36, 9: 38, 65: 77, 59: 79, 48: 81, 46: 83, 91: 102, 161: 174, 286: 295, 297: 312, 282: 314, 273: 316, 263: 318, 335: 359, 320: 361, 257: 363, 242: 365, 227: 367, 212: 369, 197: 371, 182: 373, 176: 375, 155: 377, 149: 379, 134: 381, 119: 383, 104: 385, 85: 387, 40: 389, 3: 391}
{29: 41, 23: 43, 12: 45, 10: 47, 55: 66, 125: 138, 250: 259, 261: 276, 246: 278, 237: 280, 227: 282, 299: 323, 284: 325, 221: 327, 206: 329, 191: 331, 176: 333, 161: 335, 146: 337, 140: 339, 119: 341, 113: 343, 98: 345, 83: 347, 68: 349, 49: 351, 4: 353}
remove lets from formula
final_formula  ( and ( = hp_0 1 ) ( and .def_152 ( and .def_323 ( and .def_324 ( not ( and ( = endp_1 1 ) ( not ( and .def_382 ( and .def_152 ( and .def_323 ( and .def_324 ( and .def_382 ( and ( = ctp_1 ( to_int ( * ( / 1 10 ) ( to_real np_0 ) ) ) ) ( and .def_323 ( and .def_324 .def_382 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
[' ( and ( = hp_0 1 ) ( and ( not ( = endp_0 1 ) ) ( and ( <= hp_0 1 ) ( and ( <= 1 hp_0 ) ( not ( and ( = endp_1 1 ) ( not ( and ( not ( = ctp_0 1 ) ) ( and ( not ( = endp_0 1 ) ) ( and ( <= hp_0 1 ) ( and ( <= 1 hp_0 ) ( and ( not ( = ctp_0 1 ) ) ( and ( = ctp_1 ( to_int ( * ( / 1 10 ) ( to_real np_0 ) ) ) ) ( and ( <= hp_0 1 ) ( and ( <= 1 hp_0 ) ( not ( = ctp_0 1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ']
hi
paren_dict {20: 34, 9: 36, 7: 38, 59: 71, 48: 73, 46: 75, 96: 109, 85: 111, 83: 113, 134: 147, 123: 149, 121: 151, 172: 185, 161: 187, 159: 189, 233: 247, 303: 327, 297: 329, 364: 381, 358: 383, 427: 442, 444: 459, 421: 461, 406: 463, 391: 465, 385: 467, 352: 469, 337: 471, 331: 473, 291: 475, 276: 477, 261: 479, 255: 481, 497: 521, 483: 523, 249: 525, 227: 527, 221: 529, 206: 531, 191: 533, 153: 535, 115: 537, 77: 539, 40: 541, 1: 543}
aux_vars_first_occ_dict {'.def_145 ': 11, '.def_185 ': 50, '.def_317 ': 87, '.def_318 ': 125, '.def_410 ': 163}
aux_vars_dict {'.def_145 ': '( = endpp_0 1 ) ', '.def_185 ': '( = npp_0 0 ) ', '.def_317 ': '( <= hpp_0 1 ) ', '.def_318 ': '( <= 1 hpp_0 ) ', '.def_410 ': '( = ctpp_0 1 ) '}
subs1 ( = endpp_0 1 ) 
remove lets from formula
subs2 ( = endpp_0 1 ) 
subs1 ( = npp_0 0 ) 
remove lets from formula
subs2 ( = npp_0 0 ) 
subs1 ( <= hpp_0 1 ) 
remove lets from formula
subs2 ( <= hpp_0 1 ) 
subs1 ( <= 1 hpp_0 ) 
remove lets from formula
subs2 ( <= 1 hpp_0 ) 
subs1 ( = ctpp_0 1 ) 
remove lets from formula
subs2 ( = ctpp_0 1 ) 
subs1 ( <= hpp_0 1 ) 
remove lets from formula
subs2 ( <= hpp_0 1 ) 
subs1 ( <= 1 hpp_0 ) 
remove lets from formula
subs2 ( <= 1 hpp_0 ) 
subs1 ( <= hpp_0 1 ) 
remove lets from formula
subs2 ( <= hpp_0 1 ) 
subs1 ( <= 1 hpp_0 ) 
remove lets from formula
subs2 ( <= 1 hpp_0 ) 
subs1 ( = endpp_0 1 ) 
remove lets from formula
subs2 ( = endpp_0 1 ) 
subs1 ( = ctpp_0 1 ) 
remove lets from formula
subs2 ( = ctpp_0 1 ) 
subs1 ( = npp_0 0 ) 
remove lets from formula
subs2 ( = npp_0 0 ) 
subs1 ( <= hpp_0 1 ) 
remove lets from formula
subs2 ( <= hpp_0 1 ) 
subs1 ( <= 1 hpp_0 ) 
remove lets from formula
subs2 ( <= 1 hpp_0 ) 
subs1 ( = endpp_0 1 ) 
remove lets from formula
subs2 ( = endpp_0 1 ) 
subs1 ( = ctpp_0 1 ) 
remove lets from formula
subs2 ( = ctpp_0 1 ) 
subs1 ( = ctpp_0 1 ) 
remove lets from formula
subs2 ( = ctpp_0 1 ) 
subs1 ( = npp_0 0 ) 
remove lets from formula
subs2 ( = npp_0 0 ) 
subs1 ( = ctpp_0 1 ) 
remove lets from formula
subs2 ( = ctpp_0 1 ) 
aux_vars_subs_dict  {'.def_145 ': '( = endpp_0 1 ) ', '.def_185 ': '( = npp_0 0 ) ', '.def_317 ': '( <= hpp_0 1 ) ', '.def_318 ': '( <= 1 hpp_0 ) ', '.def_410 ': '( = ctpp_0 1 ) '}
{20: 34, 9: 36, 7: 38, 59: 71, 48: 73, 46: 75, 96: 109, 85: 111, 83: 113, 134: 147, 123: 149, 121: 151, 172: 185, 161: 187, 159: 189, 233: 247, 303: 327, 297: 329, 364: 381, 358: 383, 427: 442, 444: 459, 421: 461, 406: 463, 391: 465, 385: 467, 352: 469, 337: 471, 331: 473, 291: 475, 276: 477, 261: 479, 255: 481, 497: 521, 483: 523, 249: 525, 227: 527, 221: 529, 206: 531, 191: 533, 153: 535, 115: 537, 77: 539, 40: 541, 1: 543}
{21: 33, 10: 35, 8: 37, 58: 71, 47: 73, 45: 75, 96: 109, 85: 111, 83: 113, 134: 147, 123: 149, 121: 151, 195: 209, 265: 289, 259: 291, 326: 343, 320: 345, 389: 404, 406: 421, 383: 423, 368: 425, 353: 427, 347: 429, 314: 431, 299: 433, 293: 435, 253: 437, 238: 439, 223: 441, 217: 443, 459: 483, 445: 485, 211: 487, 189: 489, 183: 491, 168: 493, 153: 495, 115: 497, 77: 499, 39: 501, 2: 503}
{22: 35, 11: 37, 9: 39, 60: 73, 49: 75, 47: 77, 98: 111, 87: 113, 85: 115, 159: 173, 229: 253, 223: 255, 290: 307, 284: 309, 353: 368, 370: 385, 347: 387, 332: 389, 317: 391, 311: 393, 278: 395, 263: 397, 257: 399, 217: 401, 202: 403, 187: 405, 181: 407, 423: 447, 409: 449, 175: 451, 153: 453, 147: 455, 132: 457, 117: 459, 79: 461, 41: 463, 3: 465}
{23: 36, 12: 38, 10: 40, 61: 74, 50: 76, 48: 78, 122: 136, 192: 216, 186: 218, 253: 270, 247: 272, 316: 331, 333: 348, 310: 350, 295: 352, 280: 354, 274: 356, 241: 358, 226: 360, 220: 362, 180: 364, 165: 366, 150: 368, 144: 370, 386: 410, 372: 412, 138: 414, 116: 416, 110: 418, 95: 420, 80: 422, 42: 424, 4: 426}
{24: 37, 13: 39, 11: 41, 85: 99, 155: 179, 149: 181, 216: 233, 210: 235, 279: 294, 296: 311, 273: 313, 258: 315, 243: 317, 237: 319, 204: 321, 189: 323, 183: 325, 143: 327, 128: 329, 113: 331, 107: 333, 349: 373, 335: 375, 101: 377, 79: 379, 73: 381, 58: 383, 43: 385, 5: 387}
remove lets from formula
final_formula  ( and .def_317 ( and .def_318 ( not ( and ( = endpp_1 1 ) ( and ( not ( and .def_317 ( and .def_318 ( and ( not ( and .def_145 .def_410 ) ) ( not ( and .def_185 ( and ( not ( = npp_0 ctpp_1 ) ) ( not ( and .def_317 ( and .def_318 ( and ( not .def_145 ) ( not .def_410 ) ) ) ) ) ) ) ) ) ) ) ) ( or .def_410 ( and .def_185 .def_410 ) ) ) ) ) ) ) 
[' ( and ( <= hpp_0 1 ) ( and ( <= 1 hpp_0 ) ( not ( and ( = endpp_1 1 ) ( and ( not ( and ( <= hpp_0 1 ) ( and ( <= 1 hpp_0 ) ( and ( not ( and ( = endpp_0 1 ) ( = ctpp_0 1 ) ) ) ( not ( and ( = npp_0 0 ) ( and ( not ( = npp_0 ctpp_1 ) ) ( not ( and ( <= hpp_0 1 ) ( and ( <= 1 hpp_0 ) ( and ( not ( = endpp_0 1 ) ) ( not ( = ctpp_0 1 ) ) ) ) ) ) ) ) ) ) ) ) ) ( or ( = ctpp_0 1 ) ( and ( = npp_0 0 ) ( = ctpp_0 1 ) ) ) ) ) ) ) ) ']
hi
paren_dict {20: 34, 9: 36, 7: 38, 52: 67, 75: 90, 119: 133, 113: 135, 98: 137, 145: 158, 139: 169, 92: 171, 69: 173, 46: 175, 40: 177, 1: 179}
aux_vars_first_occ_dict {'.def_260 ': 11}
aux_vars_dict {'.def_260 ': '( = ctppp_0 1 ) '}
subs1 ( = ctppp_0 1 ) 
remove lets from formula
subs2 ( = ctppp_0 1 ) 
subs1 ( = ctppp_0 1 ) 
remove lets from formula
subs2 ( = ctppp_0 1 ) 
subs1 ( = ctppp_0 1 ) 
remove lets from formula
subs2 ( = ctppp_0 1 ) 
aux_vars_subs_dict  {'.def_260 ': '( = ctppp_0 1 ) '}
{20: 34, 9: 36, 7: 38, 52: 67, 75: 90, 119: 133, 113: 135, 98: 137, 145: 158, 139: 169, 92: 171, 69: 173, 46: 175, 40: 177, 1: 179}
remove lets from formula
final_formula  ( not ( and ( = endppp_0 1 ) ( and ( = endppp_1 1 ) ( and ( and .def_260 ( not ( = ctppp_1 0 ) ) ) ( and ( = hppp_0 1 ) .def_260 ) ) ) ) ) 
[' ( not ( and ( = endppp_0 1 ) ( and ( = endppp_1 1 ) ( and ( and ( = ctppp_0 1 ) ( not ( = ctppp_1 0 ) ) ) ( and ( = hppp_0 1 ) ( = ctppp_0 1 ) ) ) ) ) ) ']
new_pred_smt_format ['(declare-rel pred_0_synth_msat_1 (Int Int Int Int))\n (rule (=>  ( = (rel n 0) (rel ct 1)  ) (pred_0_synth_msat_1 end n h ct)))', '(declare-rel pred_1_synth_msat_1 (Int Int Int Int))\n (rule (=>  ( = n ct  ) (pred_1_synth_msat_1 end n h ct)))']
['(declare-rel pred_0_synth_msat_1 (Int Int Int Int))\n (rule (=>  ( = (rel n 0) (rel ct 1)  ) (pred_0_synth_msat_1 end n h ct)))', '(declare-rel pred_1_synth_msat_1 (Int Int Int Int))\n (rule (=>  ( = n ct  ) (pred_1_synth_msat_1 end n h ct)))']
Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.074582 
Solver time:	2.500254
Total time:	2.574836
Iteration count:	10
Predicate count:	10
Successfully added new predicate to input file. !
PDSC: Verifying ./Benchmarks_msat/puzzle_1.smt2
Namespace(file='./Benchmarks_msat/puzzle_1.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[2]

[abs_h_0, 
ct_1_0, 
abs_end_1, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[2]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
abs_end_1, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[2]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[2]

[abs_h_0, 
ct_1_0, 
abs_end_1, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[0]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
abs_end_1, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_0_0, 
ct_0_1, 
ct0_eq_ct1, ]
--->[2]

[abs_h_0, 
ct_1_0, 
abs_end_1, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[2]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
ct_0_1, ]
--->[2]

[abs_h_0, 
abs_end_1, ]
--->[2]

[abs_h_0, 
abs_end_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
ct_0_1, ]
--->[2]

[abs_h_0, 
abs_end_1, ]
--->[0]

[abs_h_0, 
abs_end_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
pred_1_synth_msat_1_0, 
ct_0_1, ]
--->[2]

[abs_h_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
pred_1_synth_msat_1_0, 
ct_0_1, ]
--->[0]

[abs_h_0, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[2]

[abs_h_0, 
abs_end_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[0]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[2]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
ct_0_1, ]
--->[0]

[abs_h_0, 
ct_0_1, ]
--->[2]

[abs_h_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
ct_0_1, 
n0_eq_n1, ]
--->[2]

[abs_h_0, 
abs_end_1, 
pred_0_synth_msat_1, ]
--->[2]

[abs_h_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[0]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[1]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
abs_end_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[1]

[abs_h_0, 
ct_1_0, 
abs_end_1, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[1]

[abs_h_0, 
ct_0_0, 
abs_end_1, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[2]

[abs_h_0, 
ct_1_0, 
abs_end_1, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[1]

[abs_h_0, 
ct_0_0, 
abs_end_1, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
abs_end_1, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[0]


15 SMT queries performed.
before complete_trace: [abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[1]

[abs_h_0, 
ct_0_0, 
abs_end_1, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
abs_end_1, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[0]


after complete_trace [abs_h_0, 
ct_0_0, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[1]

[abs_h_0, 
ct_0_0, 
abs_end_1, 
ct_0_1, 
n0_eq_n1, 
ct0_eq_ct1, ]
--->[0]

[abs_h_0, 
ct_1_0, 
abs_end_1, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[0]

[abs_h_0, 
abs_end_0, 
ct_1_0, 
abs_end_1, 
ct_0_1, 
pred_0_synth_msat_1, ]
--->[-1]


-----------------------------------check_spur-------------------------------
final init cond And(And(0 == ct_0, end_0 == 0),
    And(0 == ct_1, end_1 == 0),
    And(n_0 == n_1, h_0 == 1, h_1 == 0))
Initial concrete state  {'n_1': 1, 'pred_1_synth_msat_1_1': False, 'ct_1_1': False, 'ct_0_1': True, 'abs_end_1': False, 'abs_h_1': False, 'pred_1_synth_msat_1_0': False, 'ct_1_0': False, 'ct_0_0': True, 'abs_end_0': False, 'abs_h_0': True, 'pred_0_synth_msat_1': False, 'ct0_eq_ct1': True, 'n0_eq_n1': True, 'h_1': 0, 'h_0': 1, 'n_0': 1, 'end_1': 0, 'ct_1': 0, 'end_0': 0, 'ct_0': 0}
Next concrete state {'end_1': 1, 'n_1': 1, 'ct_1': 0, 'ct_0': 0, 'h_0': 1, 'n_0': 1, 'end_0': 0, 'h_1': 0}
Next concrete state {'end_0': 0, 'n_0': 0, 'ct_0': 1, 'ct_1': 0, 'h_1': 0, 'n_1': 1, 'end_1': 1, 'h_0': 1}
Next concrete state {'end_0': 1, 'n_0': 0, 'ct_0': 1, 'ct_1': 0, 'h_1': 0, 'n_1': 1, 'end_1': 1, 'h_0': 1}
Trace is not spurious
Real cex. Program Unsafe.
Pre-processing time:	0.105536 
Solver time:	5.058515
Total time:	5.164051
Iteration count:	15
Predicate count:	13
Start next refinement loop: False



Total time taken : 7.739212
Number of predicates guessed: 2.0
