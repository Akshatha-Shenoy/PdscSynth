PDSC: Verifying ./Benchmarks_msat/sum_to_n.smt2
Namespace(file='./Benchmarks_msat/sum_to_n.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[2]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[1]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]


17 SMT queries performed.
before complete_trace: [
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]


after complete_trace [
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[-1]


-----------------------------------check_spur-------------------------------
final init cond And(And(n_0 > 0, sum_0 == 0, i_0 == 0),
    And(n_1 > 0, sum_1 == 0, i_1 == 0),
    n_0 == n_1)
Initial concrete state  {'n_1': 1, 'n_gt_0_1': True, 'i_lt_n_1': True, 'i_eq_n_1': False, 'n_gt_0_0': True, 'i_lt_n_0': True, 'i_eq_n_0': False, 'n0_eq_n1': True, 'sum0_eq_sum1': True, 'i1_eq_0': True, 'i0_eq_0': True, 'n_0': 1, 'i_1': 0, 'sum_1': 0, 'i_0': 0, 'sum_0': 0}
Next concrete state {'i_1': 1, 'sum_1': 0, 'sum_0': 0, 'n_0': 1, 'i_0': 0, 'n_1': 1}
Next concrete state {'i_0': 1, 'sum_0': 0, 'sum_1': 0, 'n_1': 1, 'i_1': 1, 'n_0': 1}
Writing an smt file to be run using mathsat
Checking output from mathsat 5
hi
paren_dict {19: 29, 9: 31, 7: 33, 73: 79, 69: 85, 61: 87, 54: 89, 43: 91, 41: 93, 120: 126, 116: 132, 108: 134, 101: 136, 164: 174, 176: 188, 158: 190, 248: 254, 244: 260, 270: 276, 266: 282, 262: 288, 240: 290, 232: 292, 227: 296, 213: 298, 198: 300, 399: 405, 395: 413, 419: 425, 415: 431, 391: 433, 383: 435, 373: 437, 366: 439, 352: 441, 337: 443, 476: 482, 472: 490, 496: 502, 492: 508, 468: 510, 460: 512, 450: 514, 445: 518, 331: 520, 317: 522, 302: 524, 192: 526, 152: 528, 138: 530, 95: 532, 35: 534, 1: 536}
aux_vars_first_occ_dict {'.def_24 ': 11, '.def_224 ': 45}
aux_vars_dict {'.def_24 ': '( = i_1 0 ) ', '.def_224 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) '}
subs1 ( = i_1 0 ) 
remove lets from formula
subs2 ( = i_1 0 ) 
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( = i_1 0 ) 
remove lets from formula
subs2 ( = i_1 0 ) 
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( = i_1 0 ) 
remove lets from formula
subs2 ( = i_1 0 ) 
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( = i_1 0 ) 
remove lets from formula
subs2 ( = i_1 0 ) 
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( = i_1 0 ) 
remove lets from formula
subs2 ( = i_1 0 ) 
aux_vars_subs_dict  {'.def_24 ': '( = i_1 0 ) ', '.def_224 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) '}
{19: 29, 9: 31, 7: 33, 73: 79, 69: 85, 61: 87, 54: 89, 43: 91, 41: 93, 120: 126, 116: 132, 108: 134, 101: 136, 164: 174, 176: 188, 158: 190, 248: 254, 244: 260, 270: 276, 266: 282, 262: 288, 240: 290, 232: 292, 227: 296, 213: 298, 198: 300, 399: 405, 395: 413, 419: 425, 415: 431, 391: 433, 383: 435, 373: 437, 366: 439, 352: 441, 337: 443, 476: 482, 472: 490, 496: 502, 492: 508, 468: 510, 460: 512, 450: 514, 445: 518, 331: 520, 317: 522, 302: 524, 192: 526, 152: 528, 138: 530, 95: 532, 35: 534, 1: 536}
{40: 46, 36: 52, 28: 54, 21: 56, 10: 58, 8: 60, 87: 93, 83: 99, 75: 101, 68: 103, 131: 141, 143: 155, 125: 157, 215: 221, 211: 227, 237: 243, 233: 249, 229: 255, 207: 257, 199: 259, 194: 263, 180: 265, 165: 267, 366: 372, 362: 380, 386: 392, 382: 398, 358: 400, 350: 402, 340: 404, 333: 406, 319: 408, 304: 410, 443: 449, 439: 457, 463: 469, 459: 475, 435: 477, 427: 479, 417: 481, 412: 485, 298: 487, 284: 489, 269: 491, 159: 493, 119: 495, 105: 497, 62: 499, 2: 501}
remove lets from formula
final_formula  ( and ( <= 1 ( + n_0 ( * ( - 1 ) i_0 ) ) ) ( and .def_24 ( and ( and ( = i_0 0 ) ( = n_0 n_1 ) ) ( and ( and .def_224 ( and .def_24 ( <= ( + n_0 ( + ( * ( - 1 ) i_0 ) ( + ( * ( - 1 ) n_1 ) i_1 ) ) ) 0 ) ) ) ( and .def_224 ( and .def_24 ( and ( and .def_224 ( and .def_24 ( <= 0 ( + sum_0 ( + i_0 ( + ( * ( - 1 ) sum_1 ) ( * ( - 1 ) i_1 ) ) ) ) ) ) ) ( <= ( + sum_0 ( + i_0 ( + ( * ( - 1 ) sum_1 ) ( * ( - 1 ) i_1 ) ) ) ) 0 ) ) ) ) ) ) ) ) 
[' ( and ( <= 1 ( + n_0 ( * ( - 1 ) i_0 ) ) ) ( and ( = i_1 0 ) ( and ( and ( = i_0 0 ) ( = n_0 n_1 ) ) ( and ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( and ( = i_1 0 ) ( <= ( + n_0 ( + ( * ( - 1 ) i_0 ) ( + ( * ( - 1 ) n_1 ) i_1 ) ) ) 0 ) ) ) ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( and ( = i_1 0 ) ( and ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( and ( = i_1 0 ) ( <= 0 ( + sum_0 ( + i_0 ( + ( * ( - 1 ) sum_1 ) ( * ( - 1 ) i_1 ) ) ) ) ) ) ) ( <= ( + sum_0 ( + i_0 ( + ( * ( - 1 ) sum_1 ) ( * ( - 1 ) i_1 ) ) ) ) 0 ) ) ) ) ) ) ) ) ']
hi
paren_dict {20: 31, 9: 33, 7: 35, 61: 67, 57: 74, 48: 76, 78: 84, 43: 86, 114: 128, 130: 141, 108: 143, 170: 176, 195: 201, 191: 208, 223: 229, 219: 236, 210: 238, 187: 240, 178: 242, 165: 244, 151: 246, 306: 312, 302: 319, 325: 331, 321: 340, 298: 342, 287: 344, 282: 348, 268: 350, 378: 384, 374: 391, 397: 403, 393: 412, 370: 414, 359: 416, 352: 418, 262: 420, 248: 422, 145: 424, 102: 426, 88: 428, 37: 430, 1: 432}
aux_vars_first_occ_dict {'.def_269 ': 11}
aux_vars_dict {'.def_269 ': '( = ip_1 0 ) '}
subs1 ( = ip_1 0 ) 
remove lets from formula
subs2 ( = ip_1 0 ) 
subs1 ( = ip_1 0 ) 
remove lets from formula
subs2 ( = ip_1 0 ) 
subs1 ( = ip_1 0 ) 
remove lets from formula
subs2 ( = ip_1 0 ) 
subs1 ( = ip_1 0 ) 
remove lets from formula
subs2 ( = ip_1 0 ) 
subs1 ( = ip_1 0 ) 
remove lets from formula
subs2 ( = ip_1 0 ) 
aux_vars_subs_dict  {'.def_269 ': '( = ip_1 0 ) '}
{20: 31, 9: 33, 7: 35, 61: 67, 57: 74, 48: 76, 78: 84, 43: 86, 114: 128, 130: 141, 108: 143, 170: 176, 195: 201, 191: 208, 223: 229, 219: 236, 210: 238, 187: 240, 178: 242, 165: 244, 151: 246, 306: 312, 302: 319, 325: 331, 321: 340, 298: 342, 287: 344, 282: 348, 268: 350, 378: 384, 374: 391, 397: 403, 393: 412, 370: 414, 359: 416, 352: 418, 262: 420, 248: 422, 145: 424, 102: 426, 88: 428, 37: 430, 1: 432}
remove lets from formula
final_formula  ( and ( <= ( + ip_0 ( * ( - 1 ) np_0 ) ) ( - 1 ) ) ( or .def_269 ( and ( and ( = np_1 np_0 ) ( = ip_0 0 ) ) ( and ( or .def_269 ( <= ( - 1 ) ( + np_1 ( + ( * ( - 1 ) ip_1 ) ( + ip_0 ( * ( - 1 ) np_0 ) ) ) ) ) ) ( or .def_269 ( and ( or .def_269 ( <= ( + sump_1 ( + ( * ( - 1 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) 0 ) ) ( <= 0 ( + sump_1 ( + ( * ( - 1 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) ) ) ) ) ) ) 
[' ( and ( <= ( + ip_0 ( * ( - 1 ) np_0 ) ) ( - 1 ) ) ( or ( = ip_1 0 ) ( and ( and ( = np_1 np_0 ) ( = ip_0 0 ) ) ( and ( or ( = ip_1 0 ) ( <= ( - 1 ) ( + np_1 ( + ( * ( - 1 ) ip_1 ) ( + ip_0 ( * ( - 1 ) np_0 ) ) ) ) ) ) ( or ( = ip_1 0 ) ( and ( or ( = ip_1 0 ) ( <= ( + sump_1 ( + ( * ( - 1 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) 0 ) ) ( <= 0 ( + sump_1 ( + ( * ( - 1 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) ) ) ) ) ) ) ']
hi
paren_dict {20: 32, 9: 34, 7: 36, 50: 65, 79: 91, 73: 93, 144: 150, 140: 158, 174: 180, 170: 188, 160: 190, 136: 192, 126: 194, 121: 198, 107: 200, 236: 257, 222: 259, 261: 282, 216: 284, 202: 286, 101: 288, 95: 290, 67: 292, 44: 294, 38: 296, 1: 298}
aux_vars_first_occ_dict {'.def_310 ': 11}
aux_vars_dict {'.def_310 ': '( = ipp_1 0 ) '}
subs1 ( = ipp_1 0 ) 
remove lets from formula
subs2 ( = ipp_1 0 ) 
subs1 ( = ipp_1 0 ) 
remove lets from formula
subs2 ( = ipp_1 0 ) 
subs1 ( = ipp_1 0 ) 
remove lets from formula
subs2 ( = ipp_1 0 ) 
subs1 ( = ipp_1 0 ) 
remove lets from formula
subs2 ( = ipp_1 0 ) 
subs1 ( = ipp_1 0 ) 
remove lets from formula
subs2 ( = ipp_1 0 ) 
aux_vars_subs_dict  {'.def_310 ': '( = ipp_1 0 ) '}
{20: 32, 9: 34, 7: 36, 50: 65, 79: 91, 73: 93, 144: 150, 140: 158, 174: 180, 170: 188, 160: 190, 136: 192, 126: 194, 121: 198, 107: 200, 236: 257, 222: 259, 261: 282, 216: 284, 202: 286, 101: 288, 95: 290, 67: 292, 44: 294, 38: 296, 1: 298}
remove lets from formula
final_formula  ( not ( and ( not .def_310 ) ( and ( not ( = npp_1 0 ) ) ( not ( and ( or .def_310 ( <= ( + npp_0 ( + ( * ( - 1 ) ipp_0 ) ( + ipp_1 ( * ( - 1 ) npp_1 ) ) ) ) 0 ) ) ( or .def_310 ( and ( or .def_310 ( <= sumpp_1 sumpp_0 ) ) ( <= sumpp_0 sumpp_1 ) ) ) ) ) ) ) ) 
[' ( not ( and ( not ( = ipp_1 0 ) ) ( and ( not ( = npp_1 0 ) ) ( not ( and ( or ( = ipp_1 0 ) ( <= ( + npp_0 ( + ( * ( - 1 ) ipp_0 ) ( + ipp_1 ( * ( - 1 ) npp_1 ) ) ) ) 0 ) ) ( or ( = ipp_1 0 ) ( and ( or ( = ipp_1 0 ) ( <= sumpp_1 sumpp_0 ) ) ( <= sumpp_0 sumpp_1 ) ) ) ) ) ) ) ) ']
hi
paren_dict {20: 33, 9: 35, 7: 37, 58: 73, 47: 75, 45: 77, 112: 125, 106: 127, 167: 173, 163: 182, 152: 184, 186: 192, 147: 194, 141: 196, 135: 207, 236: 255, 277: 300, 263: 302, 304: 327, 257: 329, 230: 331, 224: 333, 209: 335, 129: 337, 100: 339, 85: 341, 79: 343, 39: 345, 1: 347}
aux_vars_first_occ_dict {'.def_350 ': 11, '.def_379 ': 49}
aux_vars_dict {'.def_350 ': '( = ippp_1 0 ) ', '.def_379 ': '( not .def_350 ) '}
subs1 ( = ippp_1 0 ) 
remove lets from formula
subs2 ( = ippp_1 0 ) 
subs1 ( not .def_350 ) 
remove lets from formula
subs2 ( not .def_350 ) 
.def_350 
6
aux_vars_subs_dict {'.def_350 ': '( = ippp_1 0 ) '}
subs1 ( = ippp_1 0 ) 
remove lets from formula
subs2 ( = ippp_1 0 ) 
subs1 ( not .def_350 ) 
remove lets from formula
subs2 ( not .def_350 ) 
.def_350 
6
aux_vars_subs_dict {'.def_350 ': '( = ippp_1 0 ) ', '.def_379 ': '( not ( = ippp_1 0 ) ) '}
subs1 ( not .def_350 ) 
remove lets from formula
subs2 ( not .def_350 ) 
.def_350 
6
aux_vars_subs_dict {'.def_350 ': '( = ippp_1 0 ) ', '.def_379 ': '( not ( = ippp_1 0 ) ) '}
subs1 ( not .def_350 ) 
remove lets from formula
subs2 ( not .def_350 ) 
.def_350 
6
aux_vars_subs_dict {'.def_350 ': '( = ippp_1 0 ) ', '.def_379 ': '( not ( = ippp_1 0 ) ) '}
subs1 ( = ippp_1 0 ) 
remove lets from formula
subs2 ( = ippp_1 0 ) 
aux_vars_subs_dict  {'.def_350 ': '( = ippp_1 0 ) ', '.def_379 ': '( not ( = ippp_1 0 ) ) '}
{20: 33, 9: 35, 7: 37, 58: 73, 47: 75, 45: 77, 112: 125, 106: 127, 167: 173, 163: 182, 152: 184, 186: 192, 147: 194, 141: 196, 135: 207, 236: 255, 277: 300, 263: 302, 304: 327, 257: 329, 230: 331, 224: 333, 209: 335, 129: 337, 100: 339, 85: 341, 79: 343, 39: 345, 1: 347}
{21: 36, 10: 38, 8: 40, 75: 88, 69: 90, 130: 136, 126: 145, 115: 147, 149: 155, 110: 157, 104: 159, 98: 170, 199: 218, 240: 263, 226: 265, 267: 290, 220: 292, 193: 294, 187: 296, 172: 298, 92: 300, 63: 302, 48: 304, 42: 306, 2: 308}
remove lets from formula
final_formula  ( not ( and .def_379 ( and ( not ( = nppp_1 0 ) ) ( and ( and ( not ( <= ( + ippp_1 ( * ( - 1 ) nppp_1 ) ) ( - 1 ) ) ) .def_379 ) ( and .def_379 ( not ( and ( <= nppp_0 ippp_0 ) ( and ( or .def_350 ( <= sumppp_1 sumppp_0 ) ) ( <= sumppp_0 sumppp_1 ) ) ) ) ) ) ) ) ) 
[' ( not ( and ( not ( = ippp_1 0 ) ) ( and ( not ( = nppp_1 0 ) ) ( and ( and ( not ( <= ( + ippp_1 ( * ( - 1 ) nppp_1 ) ) ( - 1 ) ) ) ( not ( = ippp_1 0 ) ) ) ( and ( not ( = ippp_1 0 ) ) ( not ( and ( <= nppp_0 ippp_0 ) ( and ( or ( = ippp_1 0 ) ( <= sumppp_1 sumppp_0 ) ) ( <= sumppp_0 sumppp_1 ) ) ) ) ) ) ) ) ) ']
hi
paren_dict {20: 34, 9: 36, 7: 38, 59: 74, 48: 76, 46: 78, 113: 127, 107: 129, 179: 185, 175: 195, 163: 197, 199: 205, 158: 207, 152: 209, 137: 211, 240: 265, 281: 306, 267: 308, 234: 310, 228: 312, 213: 314, 131: 316, 101: 318, 86: 320, 80: 322, 40: 324, 1: 326}
aux_vars_first_occ_dict {'.def_184 ': 11, '.def_185 ': 50}
aux_vars_dict {'.def_184 ': '( = ipppp_1 0 ) ', '.def_185 ': '( not .def_184 ) '}
subs1 ( = ipppp_1 0 ) 
remove lets from formula
subs2 ( = ipppp_1 0 ) 
subs1 ( not .def_184 ) 
remove lets from formula
subs2 ( not .def_184 ) 
.def_184 
6
aux_vars_subs_dict {'.def_184 ': '( = ipppp_1 0 ) '}
subs1 ( = ipppp_1 0 ) 
remove lets from formula
subs2 ( = ipppp_1 0 ) 
subs1 ( not .def_184 ) 
remove lets from formula
subs2 ( not .def_184 ) 
.def_184 
6
aux_vars_subs_dict {'.def_184 ': '( = ipppp_1 0 ) ', '.def_185 ': '( not ( = ipppp_1 0 ) ) '}
subs1 ( not .def_184 ) 
remove lets from formula
subs2 ( not .def_184 ) 
.def_184 
6
aux_vars_subs_dict {'.def_184 ': '( = ipppp_1 0 ) ', '.def_185 ': '( not ( = ipppp_1 0 ) ) '}
subs1 ( not .def_184 ) 
remove lets from formula
subs2 ( not .def_184 ) 
.def_184 
6
aux_vars_subs_dict {'.def_184 ': '( = ipppp_1 0 ) ', '.def_185 ': '( not ( = ipppp_1 0 ) ) '}
subs1 ( = ipppp_1 0 ) 
remove lets from formula
subs2 ( = ipppp_1 0 ) 
aux_vars_subs_dict  {'.def_184 ': '( = ipppp_1 0 ) ', '.def_185 ': '( not ( = ipppp_1 0 ) ) '}
{20: 34, 9: 36, 7: 38, 59: 74, 48: 76, 46: 78, 113: 127, 107: 129, 179: 185, 175: 195, 163: 197, 199: 205, 158: 207, 152: 209, 137: 211, 240: 265, 281: 306, 267: 308, 234: 310, 228: 312, 213: 314, 131: 316, 101: 318, 86: 320, 80: 322, 40: 324, 1: 326}
{21: 36, 10: 38, 8: 40, 75: 89, 69: 91, 141: 147, 137: 157, 125: 159, 161: 167, 120: 169, 114: 171, 99: 173, 202: 227, 243: 268, 229: 270, 196: 272, 190: 274, 175: 276, 93: 278, 63: 280, 48: 282, 42: 284, 2: 286}
remove lets from formula
final_formula  ( not ( and .def_185 ( and ( not ( = npppp_1 0 ) ) ( and ( and .def_185 ( not ( <= ( + ipppp_1 ( * ( - 1 ) npppp_1 ) ) ( - 1 ) ) ) ) ( and .def_185 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( or .def_184 ( <= sumpppp_1 sumpppp_0 ) ) ) ) ) ) ) ) ) 
[' ( not ( and ( not ( = ipppp_1 0 ) ) ( and ( not ( = npppp_1 0 ) ) ( and ( and ( not ( = ipppp_1 0 ) ) ( not ( <= ( + ipppp_1 ( * ( - 1 ) npppp_1 ) ) ( - 1 ) ) ) ) ( and ( not ( = ipppp_1 0 ) ) ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( or ( = ipppp_1 0 ) ( <= sumpppp_1 sumpppp_0 ) ) ) ) ) ) ) ) ) ']
new_pred_smt_format ['(declare-rel pred_0_synth_msat_1 (Int Int Int))\n (rule (=>  ( =  ( - 1  )  ( + (rel n 1)  ( +  ( *  ( - 1  ) (rel i 1)  )  ( + (rel i 0)  ( *  ( - 1  ) (rel n 0)  )  )  )  )  ) (pred_0_synth_msat_1 i n sum)))']
['(declare-rel pred_0_synth_msat_1 (Int Int Int))\n (rule (=>  ( =  ( - 1  )  ( + (rel n 1)  ( +  ( *  ( - 1  ) (rel i 1)  )  ( + (rel i 0)  ( *  ( - 1  ) (rel n 0)  )  )  )  )  ) (pred_0_synth_msat_1 i n sum)))']
Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.054748 
Solver time:	2.896381
Total time:	2.951129
Iteration count:	17
Predicate count:	10
Successfully added new predicate to input file. !
PDSC: Verifying ./Benchmarks_msat/sum_to_n.smt2
Namespace(file='./Benchmarks_msat/sum_to_n.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[2]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[1]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]


17 SMT queries performed.
before complete_trace: [
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]


after complete_trace [
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[-1]


-----------------------------------check_spur-------------------------------
final init cond And(And(n_0 > 0, sum_0 == 0, i_0 == 0),
    And(n_1 > 0, sum_1 == 0, i_1 == 0),
    n_0 == n_1)
Initial concrete state  {'n_1': 1, 'n_gt_0_1': True, 'i_lt_n_1': True, 'i_eq_n_1': False, 'n_gt_0_0': True, 'i_lt_n_0': True, 'i_eq_n_0': False, 'pred_0_synth_msat_1': False, 'n0_eq_n1': True, 'sum0_eq_sum1': True, 'i1_eq_0': True, 'i0_eq_0': True, 'n_0': 1, 'i_1': 0, 'sum_1': 0, 'i_0': 0, 'sum_0': 0}
Next concrete state {'i_1': 1, 'sum_1': 0, 'sum_0': 0, 'n_0': 1, 'i_0': 0, 'n_1': 1}
Writing an smt file to be run using mathsat
Checking output from mathsat 5
hi
paren_dict {19: 31, 9: 33, 7: 35, 75: 81, 71: 87, 63: 89, 56: 91, 45: 93, 43: 95, 122: 132, 116: 142, 105: 144, 103: 146, 221: 227, 217: 233, 239: 245, 235: 251, 213: 253, 205: 255, 198: 257, 301: 314, 353: 359, 349: 367, 373: 379, 369: 385, 345: 387, 337: 389, 327: 391, 322: 395, 430: 436, 426: 444, 450: 456, 446: 462, 422: 464, 414: 466, 404: 468, 397: 470, 316: 472, 295: 474, 527: 540, 512: 542, 584: 594, 604: 610, 600: 618, 624: 630, 620: 636, 596: 638, 580: 640, 570: 642, 565: 646, 550: 648, 671: 681, 691: 697, 687: 705, 711: 717, 707: 723, 683: 725, 667: 727, 657: 729, 650: 731, 544: 733, 506: 735, 491: 737, 476: 739, 289: 741, 274: 743, 259: 745, 192: 747, 178: 749, 163: 751, 148: 753, 97: 755, 37: 757, 1: 759}
aux_vars_first_occ_dict {'.def_25 ': 11, '.def_231 ': 47, '.def_232 ': 107}
aux_vars_dict {'.def_25 ': '( = n_0 n_1 ) ', '.def_231 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_232 ': '( and ( = i_0 0 ) .def_25 ) '}
subs1 ( = n_0 n_1 ) 
remove lets from formula
subs2 ( = n_0 n_1 ) 
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( and ( = i_0 0 ) .def_25 ) 
remove lets from formula
subs2 ( and ( = i_0 0 ) .def_25 ) 
.def_25 
18
aux_vars_subs_dict {'.def_25 ': '( = n_0 n_1 ) ', '.def_231 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) '}
subs1 ( = n_0 n_1 ) 
remove lets from formula
subs2 ( = n_0 n_1 ) 
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( and ( = i_0 0 ) .def_25 ) 
remove lets from formula
subs2 ( and ( = i_0 0 ) .def_25 ) 
.def_25 
18
aux_vars_subs_dict {'.def_25 ': '( = n_0 n_1 ) ', '.def_231 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_232 ': '( and ( = i_0 0 ) ( = n_0 n_1 ) ) '}
subs1 ( = n_0 n_1 ) 
remove lets from formula
subs2 ( = n_0 n_1 ) 
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( and ( = i_0 0 ) .def_25 ) 
remove lets from formula
subs2 ( and ( = i_0 0 ) .def_25 ) 
.def_25 
18
aux_vars_subs_dict {'.def_25 ': '( = n_0 n_1 ) ', '.def_231 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_232 ': '( and ( = i_0 0 ) ( = n_0 n_1 ) ) '}
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( and ( = i_0 0 ) .def_25 ) 
remove lets from formula
subs2 ( and ( = i_0 0 ) .def_25 ) 
.def_25 
18
aux_vars_subs_dict {'.def_25 ': '( = n_0 n_1 ) ', '.def_231 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_232 ': '( and ( = i_0 0 ) ( = n_0 n_1 ) ) '}
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
aux_vars_subs_dict  {'.def_25 ': '( = n_0 n_1 ) ', '.def_231 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_232 ': '( and ( = i_0 0 ) ( = n_0 n_1 ) ) '}
{19: 31, 9: 33, 7: 35, 75: 81, 71: 87, 63: 89, 56: 91, 45: 93, 43: 95, 122: 132, 116: 142, 105: 144, 103: 146, 221: 227, 217: 233, 239: 245, 235: 251, 213: 253, 205: 255, 198: 257, 301: 314, 353: 359, 349: 367, 373: 379, 369: 385, 345: 387, 337: 389, 327: 391, 322: 395, 430: 436, 426: 444, 450: 456, 446: 462, 422: 464, 414: 466, 404: 468, 397: 470, 316: 472, 295: 474, 527: 540, 512: 542, 584: 594, 604: 610, 600: 618, 624: 630, 620: 636, 596: 638, 580: 640, 570: 642, 565: 646, 550: 648, 671: 681, 691: 697, 687: 705, 711: 717, 707: 723, 683: 725, 667: 727, 657: 729, 650: 731, 544: 733, 506: 735, 491: 737, 476: 739, 289: 741, 274: 743, 259: 745, 192: 747, 178: 749, 163: 751, 148: 753, 97: 755, 37: 757, 1: 759}
{40: 46, 36: 52, 28: 54, 21: 56, 10: 58, 8: 60, 87: 97, 81: 107, 70: 109, 68: 111, 186: 192, 182: 198, 204: 210, 200: 216, 178: 218, 170: 220, 163: 222, 266: 279, 318: 324, 314: 332, 338: 344, 334: 350, 310: 352, 302: 354, 292: 356, 287: 360, 395: 401, 391: 409, 415: 421, 411: 427, 387: 429, 379: 431, 369: 433, 362: 435, 281: 437, 260: 439, 492: 505, 477: 507, 549: 559, 569: 575, 565: 583, 589: 595, 585: 601, 561: 603, 545: 605, 535: 607, 530: 611, 515: 613, 636: 646, 656: 662, 652: 670, 676: 682, 672: 688, 648: 690, 632: 692, 622: 694, 615: 696, 509: 698, 471: 700, 456: 702, 441: 704, 254: 706, 239: 708, 224: 710, 157: 712, 143: 714, 128: 716, 113: 718, 62: 720, 2: 722}
{28: 38, 22: 48, 11: 50, 9: 52, 127: 133, 123: 139, 145: 151, 141: 157, 119: 159, 111: 161, 104: 163, 207: 220, 259: 265, 255: 273, 279: 285, 275: 291, 251: 293, 243: 295, 233: 297, 228: 301, 336: 342, 332: 350, 356: 362, 352: 368, 328: 370, 320: 372, 310: 374, 303: 376, 222: 378, 201: 380, 433: 446, 418: 448, 490: 500, 510: 516, 506: 524, 530: 536, 526: 542, 502: 544, 486: 546, 476: 548, 471: 552, 456: 554, 577: 587, 597: 603, 593: 611, 617: 623, 613: 629, 589: 631, 573: 633, 563: 635, 556: 637, 450: 639, 412: 641, 397: 643, 382: 645, 195: 647, 180: 649, 165: 651, 98: 653, 84: 655, 69: 657, 54: 659, 3: 661}
remove lets from formula
final_formula  ( and .def_231 ( and .def_232 ( and .def_25 ( and ( <= 0 ( + n_0 ( + ( * ( - 1 ) i_0 ) ( * ( - 1 ) n_1 ) ) ) ) ( and .def_231 ( and .def_232 ( and ( and ( <= i_0 i_1 ) ( and ( <= ( + sum_0 ( + i_0 ( + ( * ( - 1 ) sum_1 ) ( * ( - 1 ) i_1 ) ) ) ) 0 ) ( <= 0 ( + sum_0 ( + i_0 ( + ( * ( - 1 ) sum_1 ) ( * ( - 1 ) i_1 ) ) ) ) ) ) ) ( and .def_231 ( and .def_232 ( and ( and .def_231 ( <= i_1 i_0 ) ) ( and ( and .def_231 ( <= ( + sum_0 ( + ( * 2 i_0 ) ( + ( * ( - 1 ) sum_1 ) ( * ( - 2 ) i_1 ) ) ) ) 0 ) ) ( <= 0 ( + sum_0 ( + ( * 2 i_0 ) ( + ( * ( - 1 ) sum_1 ) ( * ( - 2 ) i_1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
[' ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( = i_0 0 ) ( = n_0 n_1 ) ) ( and ( = n_0 n_1 ) ( and ( <= 0 ( + n_0 ( + ( * ( - 1 ) i_0 ) ( * ( - 1 ) n_1 ) ) ) ) ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( = i_0 0 ) ( = n_0 n_1 ) ) ( and ( and ( <= i_0 i_1 ) ( and ( <= ( + sum_0 ( + i_0 ( + ( * ( - 1 ) sum_1 ) ( * ( - 1 ) i_1 ) ) ) ) 0 ) ( <= 0 ( + sum_0 ( + i_0 ( + ( * ( - 1 ) sum_1 ) ( * ( - 1 ) i_1 ) ) ) ) ) ) ) ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( = i_0 0 ) ( = n_0 n_1 ) ) ( and ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( <= i_1 i_0 ) ) ( and ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( <= ( + sum_0 ( + ( * 2 i_0 ) ( + ( * ( - 1 ) sum_1 ) ( * ( - 2 ) i_1 ) ) ) ) 0 ) ) ( <= 0 ( + sum_0 ( + ( * 2 i_0 ) ( + ( * ( - 1 ) sum_1 ) ( * ( - 2 ) i_1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ']
hi
paren_dict {20: 34, 9: 36, 7: 38, 65: 76, 59: 87, 48: 89, 46: 91, 189: 195, 185: 202, 176: 204, 171: 208, 251: 257, 247: 264, 270: 276, 266: 285, 243: 287, 234: 289, 223: 291, 216: 293, 328: 334, 324: 341, 347: 353, 343: 362, 320: 364, 311: 366, 300: 368, 295: 372, 210: 374, 165: 376, 150: 378, 406: 412, 402: 419, 393: 421, 386: 423, 457: 463, 453: 470, 476: 482, 472: 491, 449: 493, 438: 495, 431: 497, 523: 529, 519: 536, 542: 548, 538: 557, 515: 559, 504: 561, 499: 565, 425: 567, 380: 569, 144: 571, 129: 573, 602: 608, 598: 615, 589: 617, 580: 619, 575: 623, 123: 625, 108: 627, 93: 629, 40: 631, 1: 633}
aux_vars_first_occ_dict {'.def_310 ': 11, '.def_311 ': 50}
aux_vars_dict {'.def_310 ': '( = np_1 np_0 ) ', '.def_311 ': '( and ( = ip_0 0 ) .def_310 ) '}
subs1 ( = np_1 np_0 ) 
remove lets from formula
subs2 ( = np_1 np_0 ) 
subs1 ( and ( = ip_0 0 ) .def_310 ) 
remove lets from formula
subs2 ( and ( = ip_0 0 ) .def_310 ) 
.def_310 
19
aux_vars_subs_dict {'.def_310 ': '( = np_1 np_0 ) '}
subs1 ( = np_1 np_0 ) 
remove lets from formula
subs2 ( = np_1 np_0 ) 
subs1 ( and ( = ip_0 0 ) .def_310 ) 
remove lets from formula
subs2 ( and ( = ip_0 0 ) .def_310 ) 
.def_310 
19
aux_vars_subs_dict {'.def_310 ': '( = np_1 np_0 ) ', '.def_311 ': '( and ( = ip_0 0 ) ( = np_1 np_0 ) ) '}
subs1 ( = np_1 np_0 ) 
remove lets from formula
subs2 ( = np_1 np_0 ) 
subs1 ( and ( = ip_0 0 ) .def_310 ) 
remove lets from formula
subs2 ( and ( = ip_0 0 ) .def_310 ) 
.def_310 
19
aux_vars_subs_dict {'.def_310 ': '( = np_1 np_0 ) ', '.def_311 ': '( and ( = ip_0 0 ) ( = np_1 np_0 ) ) '}
subs1 ( and ( = ip_0 0 ) .def_310 ) 
remove lets from formula
subs2 ( and ( = ip_0 0 ) .def_310 ) 
.def_310 
19
aux_vars_subs_dict {'.def_310 ': '( = np_1 np_0 ) ', '.def_311 ': '( and ( = ip_0 0 ) ( = np_1 np_0 ) ) '}
aux_vars_subs_dict  {'.def_310 ': '( = np_1 np_0 ) ', '.def_311 ': '( and ( = ip_0 0 ) ( = np_1 np_0 ) ) '}
{20: 34, 9: 36, 7: 38, 65: 76, 59: 87, 48: 89, 46: 91, 189: 195, 185: 202, 176: 204, 171: 208, 251: 257, 247: 264, 270: 276, 266: 285, 243: 287, 234: 289, 223: 291, 216: 293, 328: 334, 324: 341, 347: 353, 343: 362, 320: 364, 311: 366, 300: 368, 295: 372, 210: 374, 165: 376, 150: 378, 406: 412, 402: 419, 393: 421, 386: 423, 457: 463, 453: 470, 476: 482, 472: 491, 449: 493, 438: 495, 431: 497, 523: 529, 519: 536, 542: 548, 538: 557, 515: 559, 504: 561, 499: 565, 425: 567, 380: 569, 144: 571, 129: 573, 602: 608, 598: 615, 589: 617, 580: 619, 575: 623, 123: 625, 108: 627, 93: 629, 40: 631, 1: 633}
{27: 38, 21: 49, 10: 51, 8: 53, 151: 157, 147: 164, 138: 166, 133: 170, 213: 219, 209: 226, 232: 238, 228: 247, 205: 249, 196: 251, 185: 253, 178: 255, 290: 296, 286: 303, 309: 315, 305: 324, 282: 326, 273: 328, 262: 330, 257: 334, 172: 336, 127: 338, 112: 340, 368: 374, 364: 381, 355: 383, 348: 385, 419: 425, 415: 432, 438: 444, 434: 453, 411: 455, 400: 457, 393: 459, 485: 491, 481: 498, 504: 510, 500: 519, 477: 521, 466: 523, 461: 527, 387: 529, 342: 531, 106: 533, 91: 535, 564: 570, 560: 577, 551: 579, 542: 581, 537: 585, 85: 587, 70: 589, 55: 591, 2: 593}
remove lets from formula
final_formula  ( and .def_311 ( and .def_310 ( and ( and .def_311 ( and ( and .def_311 ( and ( <= ( + ip_1 ( * ( - 1 ) ip_0 ) ) 1 ) ( and ( <= 1 ( + sump_1 ( + ip_1 ( + ( * ( - 2 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) ) ( <= ( + sump_1 ( + ip_1 ( + ( * ( - 2 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) 1 ) ) ) ) ( and ( <= 1 ( + ip_1 ( * ( - 1 ) ip_0 ) ) ) ( and ( <= 0 ( + sump_1 ( + ( * ( - 1 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) ( <= ( + sump_1 ( + ( * ( - 1 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) 0 ) ) ) ) ) ( <= ( + np_1 ( + ip_0 ( * ( - 1 ) np_0 ) ) ) 0 ) ) ) ) 
[' ( and ( and ( = ip_0 0 ) ( = np_1 np_0 ) ) ( and ( = np_1 np_0 ) ( and ( and ( and ( = ip_0 0 ) ( = np_1 np_0 ) ) ( and ( and ( and ( = ip_0 0 ) ( = np_1 np_0 ) ) ( and ( <= ( + ip_1 ( * ( - 1 ) ip_0 ) ) 1 ) ( and ( <= 1 ( + sump_1 ( + ip_1 ( + ( * ( - 2 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) ) ( <= ( + sump_1 ( + ip_1 ( + ( * ( - 2 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) 1 ) ) ) ) ( and ( <= 1 ( + ip_1 ( * ( - 1 ) ip_0 ) ) ) ( and ( <= 0 ( + sump_1 ( + ( * ( - 1 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) ( <= ( + sump_1 ( + ( * ( - 1 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) 0 ) ) ) ) ) ( <= ( + np_1 ( + ip_0 ( * ( - 1 ) np_0 ) ) ) 0 ) ) ) ) ']
hi
paren_dict {20: 36, 9: 38, 7: 40, 67: 79, 61: 90, 50: 92, 48: 94, 192: 198, 188: 206, 178: 208, 173: 212, 247: 253, 243: 261, 267: 273, 263: 283, 239: 285, 227: 287, 220: 289, 316: 322, 312: 330, 336: 342, 332: 352, 308: 354, 296: 356, 291: 360, 214: 362, 168: 364, 153: 366, 394: 400, 390: 408, 380: 410, 373: 412, 447: 453, 443: 461, 467: 473, 463: 483, 439: 485, 427: 487, 420: 489, 516: 522, 512: 530, 536: 542, 532: 552, 508: 554, 496: 556, 491: 560, 414: 562, 368: 564, 147: 566, 132: 568, 599: 605, 595: 613, 585: 615, 575: 617, 570: 621, 126: 623, 111: 625, 96: 627, 42: 629, 1: 631}
aux_vars_first_occ_dict {'.def_367 ': 11, '.def_368 ': 52}
aux_vars_dict {'.def_367 ': '( = npp_1 npp_0 ) ', '.def_368 ': '( and ( = ipp_0 0 ) .def_367 ) '}
subs1 ( = npp_1 npp_0 ) 
remove lets from formula
subs2 ( = npp_1 npp_0 ) 
subs1 ( and ( = ipp_0 0 ) .def_367 ) 
remove lets from formula
subs2 ( and ( = ipp_0 0 ) .def_367 ) 
.def_367 
20
aux_vars_subs_dict {'.def_367 ': '( = npp_1 npp_0 ) '}
subs1 ( = npp_1 npp_0 ) 
remove lets from formula
subs2 ( = npp_1 npp_0 ) 
subs1 ( and ( = ipp_0 0 ) .def_367 ) 
remove lets from formula
subs2 ( and ( = ipp_0 0 ) .def_367 ) 
.def_367 
20
aux_vars_subs_dict {'.def_367 ': '( = npp_1 npp_0 ) ', '.def_368 ': '( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) '}
subs1 ( = npp_1 npp_0 ) 
remove lets from formula
subs2 ( = npp_1 npp_0 ) 
subs1 ( and ( = ipp_0 0 ) .def_367 ) 
remove lets from formula
subs2 ( and ( = ipp_0 0 ) .def_367 ) 
.def_367 
20
aux_vars_subs_dict {'.def_367 ': '( = npp_1 npp_0 ) ', '.def_368 ': '( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) '}
subs1 ( and ( = ipp_0 0 ) .def_367 ) 
remove lets from formula
subs2 ( and ( = ipp_0 0 ) .def_367 ) 
.def_367 
20
aux_vars_subs_dict {'.def_367 ': '( = npp_1 npp_0 ) ', '.def_368 ': '( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) '}
aux_vars_subs_dict  {'.def_367 ': '( = npp_1 npp_0 ) ', '.def_368 ': '( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) '}
{20: 36, 9: 38, 7: 40, 67: 79, 61: 90, 50: 92, 48: 94, 192: 198, 188: 206, 178: 208, 173: 212, 247: 253, 243: 261, 267: 273, 263: 283, 239: 285, 227: 287, 220: 289, 316: 322, 312: 330, 336: 342, 332: 352, 308: 354, 296: 356, 291: 360, 214: 362, 168: 364, 153: 366, 394: 400, 390: 408, 380: 410, 373: 412, 447: 453, 443: 461, 467: 473, 463: 483, 439: 485, 427: 487, 420: 489, 516: 522, 512: 530, 536: 542, 532: 552, 508: 554, 496: 556, 491: 560, 414: 562, 368: 564, 147: 566, 132: 568, 599: 605, 595: 613, 585: 615, 575: 617, 570: 621, 126: 623, 111: 625, 96: 627, 42: 629, 1: 631}
{27: 39, 21: 50, 10: 52, 8: 54, 152: 158, 148: 166, 138: 168, 133: 172, 207: 213, 203: 221, 227: 233, 223: 243, 199: 245, 187: 247, 180: 249, 276: 282, 272: 290, 296: 302, 292: 312, 268: 314, 256: 316, 251: 320, 174: 322, 128: 324, 113: 326, 354: 360, 350: 368, 340: 370, 333: 372, 407: 413, 403: 421, 427: 433, 423: 443, 399: 445, 387: 447, 380: 449, 476: 482, 472: 490, 496: 502, 492: 512, 468: 514, 456: 516, 451: 520, 374: 522, 328: 524, 107: 526, 92: 528, 559: 565, 555: 573, 545: 575, 535: 577, 530: 581, 86: 583, 71: 585, 56: 587, 2: 589}
remove lets from formula
final_formula  ( and .def_368 ( and .def_367 ( and ( and .def_368 ( and ( and .def_368 ( or ( <= ( + npp_1 ( * ( - 1 ) ipp_0 ) ) 1 ) ( and ( <= 1 ( + sumpp_1 ( + ( * ( - 2 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) ) ( <= ( + sumpp_1 ( + ( * ( - 2 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) 1 ) ) ) ) ( or ( <= 2 ( + npp_1 ( * ( - 1 ) ipp_0 ) ) ) ( and ( <= 0 ( + sumpp_1 ( + ( * ( - 1 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) ) ( <= ( + sumpp_1 ( + ( * ( - 1 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) 0 ) ) ) ) ) ( <= ( + npp_1 ( + ipp_0 ( * ( - 1 ) npp_0 ) ) ) 0 ) ) ) ) 
[' ( and ( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) ( and ( = npp_1 npp_0 ) ( and ( and ( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) ( and ( and ( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) ( or ( <= ( + npp_1 ( * ( - 1 ) ipp_0 ) ) 1 ) ( and ( <= 1 ( + sumpp_1 ( + ( * ( - 2 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) ) ( <= ( + sumpp_1 ( + ( * ( - 2 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) 1 ) ) ) ) ( or ( <= 2 ( + npp_1 ( * ( - 1 ) ipp_0 ) ) ) ( and ( <= 0 ( + sumpp_1 ( + ( * ( - 1 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) ) ( <= ( + sumpp_1 ( + ( * ( - 1 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) 0 ) ) ) ) ) ( <= ( + npp_1 ( + ipp_0 ( * ( - 1 ) npp_0 ) ) ) 0 ) ) ) ) ']
hi
paren_dict {20: 33, 9: 35, 7: 37, 58: 73, 47: 75, 45: 77, 99: 117, 183: 189, 179: 198, 168: 200, 202: 208, 163: 210, 218: 241, 243: 266, 212: 268, 158: 270, 305: 324, 299: 326, 373: 379, 369: 390, 358: 392, 345: 394, 340: 398, 435: 441, 431: 452, 420: 454, 407: 456, 400: 458, 334: 460, 328: 462, 293: 464, 278: 466, 272: 468, 152: 470, 146: 472, 131: 474, 482: 496, 476: 498, 125: 500, 119: 502, 93: 504, 79: 506, 39: 508, 1: 510}
aux_vars_first_occ_dict {'.def_426 ': 11, '.def_463 ': 49}
aux_vars_dict {'.def_426 ': '( = nppp_1 0 ) ', '.def_463 ': '( not .def_426 ) '}
subs1 ( = nppp_1 0 ) 
remove lets from formula
subs2 ( = nppp_1 0 ) 
subs1 ( not .def_426 ) 
remove lets from formula
subs2 ( not .def_426 ) 
.def_426 
6
aux_vars_subs_dict {'.def_426 ': '( = nppp_1 0 ) '}
subs1 ( = nppp_1 0 ) 
remove lets from formula
subs2 ( = nppp_1 0 ) 
subs1 ( = nppp_1 0 ) 
remove lets from formula
subs2 ( = nppp_1 0 ) 
subs1 ( not .def_426 ) 
remove lets from formula
subs2 ( not .def_426 ) 
.def_426 
6
aux_vars_subs_dict {'.def_426 ': '( = nppp_1 0 ) ', '.def_463 ': '( not ( = nppp_1 0 ) ) '}
subs1 ( not .def_426 ) 
remove lets from formula
subs2 ( not .def_426 ) 
.def_426 
6
aux_vars_subs_dict {'.def_426 ': '( = nppp_1 0 ) ', '.def_463 ': '( not ( = nppp_1 0 ) ) '}
aux_vars_subs_dict  {'.def_426 ': '( = nppp_1 0 ) ', '.def_463 ': '( not ( = nppp_1 0 ) ) '}
{20: 33, 9: 35, 7: 37, 58: 73, 47: 75, 45: 77, 99: 117, 183: 189, 179: 198, 168: 200, 202: 208, 163: 210, 218: 241, 243: 266, 212: 268, 158: 270, 305: 324, 299: 326, 373: 379, 369: 390, 358: 392, 345: 394, 340: 398, 435: 441, 431: 452, 420: 454, 407: 456, 400: 458, 334: 460, 328: 462, 293: 464, 278: 466, 272: 468, 152: 470, 146: 472, 131: 474, 482: 496, 476: 498, 125: 500, 119: 502, 93: 504, 79: 506, 39: 508, 1: 510}
{21: 36, 10: 38, 8: 40, 62: 80, 146: 152, 142: 161, 131: 163, 165: 171, 126: 173, 181: 204, 206: 229, 175: 231, 121: 233, 268: 287, 262: 289, 336: 342, 332: 353, 321: 355, 308: 357, 303: 361, 398: 404, 394: 415, 383: 417, 370: 419, 363: 421, 297: 423, 291: 425, 256: 427, 241: 429, 235: 431, 115: 433, 109: 435, 94: 437, 445: 459, 439: 461, 88: 463, 82: 465, 56: 467, 42: 469, 2: 471}
remove lets from formula
final_formula  ( or .def_426 ( and ( = nppp_0 nppp_1 ) ( not ( and ( and .def_463 ( not ( and ( or ( <= ( + ippp_0 ( * ( - 1 ) nppp_1 ) ) ( - 1 ) ) ( and ( <= sumppp_0 sumppp_1 ) ( <= sumppp_1 sumppp_0 ) ) ) ( not ( and .def_463 ( and ( not ( <= nppp_1 ippp_0 ) ) ( not ( and ( <= ( + sumppp_0 ( + ippp_0 ( * ( - 1 ) sumppp_1 ) ) ) 0 ) ( <= 0 ( + sumppp_0 ( + ippp_0 ( * ( - 1 ) sumppp_1 ) ) ) ) ) ) ) ) ) ) ) ) ( not ( <= nppp_1 0 ) ) ) ) ) ) 
[' ( or ( = nppp_1 0 ) ( and ( = nppp_0 nppp_1 ) ( not ( and ( and ( not ( = nppp_1 0 ) ) ( not ( and ( or ( <= ( + ippp_0 ( * ( - 1 ) nppp_1 ) ) ( - 1 ) ) ( and ( <= sumppp_0 sumppp_1 ) ( <= sumppp_1 sumppp_0 ) ) ) ( not ( and ( not ( = nppp_1 0 ) ) ( and ( not ( <= nppp_1 ippp_0 ) ) ( not ( and ( <= ( + sumppp_0 ( + ippp_0 ( * ( - 1 ) sumppp_1 ) ) ) 0 ) ( <= 0 ( + sumppp_0 ( + ippp_0 ( * ( - 1 ) sumppp_1 ) ) ) ) ) ) ) ) ) ) ) ) ( not ( <= nppp_1 0 ) ) ) ) ) ) ']
hi
paren_dict {26: 40, 20: 42, 9: 44, 7: 46, 79: 104, 106: 131, 73: 133, 67: 135, 56: 137, 54: 139, 168: 188, 202: 217, 196: 219, 292: 298, 288: 308, 276: 310, 269: 312, 263: 314, 257: 325, 242: 327, 371: 377, 367: 387, 355: 389, 391: 397, 350: 399, 344: 401, 329: 403, 236: 405, 221: 407, 190: 409, 162: 411, 147: 413, 141: 415, 48: 417, 1: 419}
aux_vars_first_occ_dict {'.def_508 ': 11, '.def_510 ': 58}
aux_vars_dict {'.def_508 ': '( not ( = npppp_1 0 ) ) ', '.def_510 ': '( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) '}
subs1 ( not ( = npppp_1 0 ) ) 
remove lets from formula
subs2 ( not ( = npppp_1 0 ) ) 
subs1 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) 
remove lets from formula
subs2 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) 
subs1 ( not ( = npppp_1 0 ) ) 
remove lets from formula
subs2 ( not ( = npppp_1 0 ) ) 
subs1 ( not ( = npppp_1 0 ) ) 
remove lets from formula
subs2 ( not ( = npppp_1 0 ) ) 
subs1 ( not ( = npppp_1 0 ) ) 
remove lets from formula
subs2 ( not ( = npppp_1 0 ) ) 
subs1 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) 
remove lets from formula
subs2 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) 
subs1 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) 
remove lets from formula
subs2 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) 
aux_vars_subs_dict  {'.def_508 ': '( not ( = npppp_1 0 ) ) ', '.def_510 ': '( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) '}
{26: 40, 20: 42, 9: 44, 7: 46, 79: 104, 106: 131, 73: 133, 67: 135, 56: 137, 54: 139, 168: 188, 202: 217, 196: 219, 292: 298, 288: 308, 276: 310, 269: 312, 263: 314, 257: 325, 242: 327, 371: 377, 367: 387, 355: 389, 391: 397, 350: 399, 344: 401, 329: 403, 236: 405, 221: 407, 190: 409, 162: 411, 147: 413, 141: 415, 48: 417, 1: 419}
{33: 58, 60: 85, 27: 87, 21: 89, 10: 91, 8: 93, 122: 142, 156: 171, 150: 173, 246: 252, 242: 262, 230: 264, 223: 266, 217: 268, 211: 279, 196: 281, 325: 331, 321: 341, 309: 343, 345: 351, 304: 353, 298: 355, 283: 357, 190: 359, 175: 361, 144: 363, 116: 365, 101: 367, 95: 369, 2: 371}
remove lets from formula
final_formula  ( not ( and .def_508 ( and ( = npppp_0 npppp_1 ) ( and ( not ( <= npppp_1 0 ) ) ( and .def_508 ( and ( and .def_508 ( and ( not ( <= 1 ( + ipppp_0 ( * ( - 1 ) npppp_1 ) ) ) ) .def_510 ) ) ( and .def_510 ( not ( <= ( + npppp_0 ( * ( - 1 ) npppp_1 ) ) ( - 1 ) ) ) ) ) ) ) ) ) ) 
[' ( not ( and ( not ( = npppp_1 0 ) ) ( and ( = npppp_0 npppp_1 ) ( and ( not ( <= npppp_1 0 ) ) ( and ( not ( = npppp_1 0 ) ) ( and ( and ( not ( = npppp_1 0 ) ) ( and ( not ( <= 1 ( + ipppp_0 ( * ( - 1 ) npppp_1 ) ) ) ) ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) ) ) ( and ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) ( not ( <= ( + npppp_0 ( * ( - 1 ) npppp_1 ) ) ( - 1 ) ) ) ) ) ) ) ) ) ) ']
new_pred_smt_format ['(declare-rel pred_0_synth_msat_2 (Int Int Int))\n (rule (=>  ( = (rel n 1) 0  ) (pred_0_synth_msat_2 i n sum)))']
['(declare-rel pred_0_synth_msat_2 (Int Int Int))\n (rule (=>  ( = (rel n 1) 0  ) (pred_0_synth_msat_2 i n sum)))']
Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.069896 
Solver time:	3.785008
Total time:	3.854904
Iteration count:	17
Predicate count:	11
Successfully added new predicate to input file. !
Start next refinement loop: True



PDSC: Verifying ./Benchmarks_msat/sum_to_n.smt2
Namespace(file='./Benchmarks_msat/sum_to_n.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[2]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[1]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[2]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[i_eq_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
n0_eq_n1, ]
--->[2]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]


17 SMT queries performed.
before complete_trace: [
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]


after complete_trace [
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
i1_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_lt_n_1, 
n_gt_0_1, 
i0_eq_0, 
sum0_eq_sum1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[1]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
i0_eq_0, 
n0_eq_n1, ]
--->[0]

[
i_lt_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, 
pred_0_synth_msat_1, ]
--->[0]

[i_eq_n_0, 
n_gt_0_0, 
i_eq_n_1, 
n_gt_0_1, 
n0_eq_n1, ]
--->[-1]


-----------------------------------check_spur-------------------------------
final init cond And(And(n_0 > 0, sum_0 == 0, i_0 == 0),
    And(n_1 > 0, sum_1 == 0, i_1 == 0),
    n_0 == n_1)
Initial concrete state  {'n_1': 1, 'n_gt_0_1': True, 'i_lt_n_1': True, 'i_eq_n_1': False, 'n_gt_0_0': True, 'i_lt_n_0': True, 'i_eq_n_0': False, 'pred_0_synth_msat_2': False, 'pred_0_synth_msat_1': False, 'n0_eq_n1': True, 'sum0_eq_sum1': True, 'i1_eq_0': True, 'i0_eq_0': True, 'n_0': 1, 'i_1': 0, 'sum_1': 0, 'i_0': 0, 'sum_0': 0}
Next concrete state {'i_1': 1, 'sum_1': 0, 'sum_0': 0, 'n_0': 1, 'i_0': 0, 'n_1': 1}
Writing an smt file to be run using mathsat
Checking output from mathsat 5
hi
paren_dict {19: 31, 9: 33, 7: 35, 75: 81, 71: 87, 63: 89, 56: 91, 45: 93, 43: 95, 122: 132, 116: 142, 105: 144, 103: 146, 221: 227, 217: 233, 239: 245, 235: 251, 213: 253, 205: 255, 198: 257, 301: 314, 353: 359, 349: 367, 373: 379, 369: 385, 345: 387, 337: 389, 327: 391, 322: 395, 430: 436, 426: 444, 450: 456, 446: 462, 422: 464, 414: 466, 404: 468, 397: 470, 316: 472, 295: 474, 527: 540, 512: 542, 584: 594, 604: 610, 600: 618, 624: 630, 620: 636, 596: 638, 580: 640, 570: 642, 565: 646, 550: 648, 671: 681, 691: 697, 687: 705, 711: 717, 707: 723, 683: 725, 667: 727, 657: 729, 650: 731, 544: 733, 506: 735, 491: 737, 476: 739, 289: 741, 274: 743, 259: 745, 192: 747, 178: 749, 163: 751, 148: 753, 97: 755, 37: 757, 1: 759}
aux_vars_first_occ_dict {'.def_25 ': 11, '.def_235 ': 47, '.def_236 ': 107}
aux_vars_dict {'.def_25 ': '( = n_0 n_1 ) ', '.def_235 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_236 ': '( and ( = i_0 0 ) .def_25 ) '}
subs1 ( = n_0 n_1 ) 
remove lets from formula
subs2 ( = n_0 n_1 ) 
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( and ( = i_0 0 ) .def_25 ) 
remove lets from formula
subs2 ( and ( = i_0 0 ) .def_25 ) 
.def_25 
18
aux_vars_subs_dict {'.def_25 ': '( = n_0 n_1 ) ', '.def_235 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) '}
subs1 ( = n_0 n_1 ) 
remove lets from formula
subs2 ( = n_0 n_1 ) 
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( and ( = i_0 0 ) .def_25 ) 
remove lets from formula
subs2 ( and ( = i_0 0 ) .def_25 ) 
.def_25 
18
aux_vars_subs_dict {'.def_25 ': '( = n_0 n_1 ) ', '.def_235 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_236 ': '( and ( = i_0 0 ) ( = n_0 n_1 ) ) '}
subs1 ( = n_0 n_1 ) 
remove lets from formula
subs2 ( = n_0 n_1 ) 
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( and ( = i_0 0 ) .def_25 ) 
remove lets from formula
subs2 ( and ( = i_0 0 ) .def_25 ) 
.def_25 
18
aux_vars_subs_dict {'.def_25 ': '( = n_0 n_1 ) ', '.def_235 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_236 ': '( and ( = i_0 0 ) ( = n_0 n_1 ) ) '}
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( and ( = i_0 0 ) .def_25 ) 
remove lets from formula
subs2 ( and ( = i_0 0 ) .def_25 ) 
.def_25 
18
aux_vars_subs_dict {'.def_25 ': '( = n_0 n_1 ) ', '.def_235 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_236 ': '( and ( = i_0 0 ) ( = n_0 n_1 ) ) '}
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) 
aux_vars_subs_dict  {'.def_25 ': '( = n_0 n_1 ) ', '.def_235 ': '( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_236 ': '( and ( = i_0 0 ) ( = n_0 n_1 ) ) '}
{19: 31, 9: 33, 7: 35, 75: 81, 71: 87, 63: 89, 56: 91, 45: 93, 43: 95, 122: 132, 116: 142, 105: 144, 103: 146, 221: 227, 217: 233, 239: 245, 235: 251, 213: 253, 205: 255, 198: 257, 301: 314, 353: 359, 349: 367, 373: 379, 369: 385, 345: 387, 337: 389, 327: 391, 322: 395, 430: 436, 426: 444, 450: 456, 446: 462, 422: 464, 414: 466, 404: 468, 397: 470, 316: 472, 295: 474, 527: 540, 512: 542, 584: 594, 604: 610, 600: 618, 624: 630, 620: 636, 596: 638, 580: 640, 570: 642, 565: 646, 550: 648, 671: 681, 691: 697, 687: 705, 711: 717, 707: 723, 683: 725, 667: 727, 657: 729, 650: 731, 544: 733, 506: 735, 491: 737, 476: 739, 289: 741, 274: 743, 259: 745, 192: 747, 178: 749, 163: 751, 148: 753, 97: 755, 37: 757, 1: 759}
{40: 46, 36: 52, 28: 54, 21: 56, 10: 58, 8: 60, 87: 97, 81: 107, 70: 109, 68: 111, 186: 192, 182: 198, 204: 210, 200: 216, 178: 218, 170: 220, 163: 222, 266: 279, 318: 324, 314: 332, 338: 344, 334: 350, 310: 352, 302: 354, 292: 356, 287: 360, 395: 401, 391: 409, 415: 421, 411: 427, 387: 429, 379: 431, 369: 433, 362: 435, 281: 437, 260: 439, 492: 505, 477: 507, 549: 559, 569: 575, 565: 583, 589: 595, 585: 601, 561: 603, 545: 605, 535: 607, 530: 611, 515: 613, 636: 646, 656: 662, 652: 670, 676: 682, 672: 688, 648: 690, 632: 692, 622: 694, 615: 696, 509: 698, 471: 700, 456: 702, 441: 704, 254: 706, 239: 708, 224: 710, 157: 712, 143: 714, 128: 716, 113: 718, 62: 720, 2: 722}
{28: 38, 22: 48, 11: 50, 9: 52, 127: 133, 123: 139, 145: 151, 141: 157, 119: 159, 111: 161, 104: 163, 207: 220, 259: 265, 255: 273, 279: 285, 275: 291, 251: 293, 243: 295, 233: 297, 228: 301, 336: 342, 332: 350, 356: 362, 352: 368, 328: 370, 320: 372, 310: 374, 303: 376, 222: 378, 201: 380, 433: 446, 418: 448, 490: 500, 510: 516, 506: 524, 530: 536, 526: 542, 502: 544, 486: 546, 476: 548, 471: 552, 456: 554, 577: 587, 597: 603, 593: 611, 617: 623, 613: 629, 589: 631, 573: 633, 563: 635, 556: 637, 450: 639, 412: 641, 397: 643, 382: 645, 195: 647, 180: 649, 165: 651, 98: 653, 84: 655, 69: 657, 54: 659, 3: 661}
remove lets from formula
final_formula  ( and .def_235 ( and .def_236 ( and .def_25 ( and ( <= 0 ( + n_0 ( + ( * ( - 1 ) i_0 ) ( * ( - 1 ) n_1 ) ) ) ) ( and .def_235 ( and .def_236 ( and ( and ( <= i_0 i_1 ) ( and ( <= ( + sum_0 ( + i_0 ( + ( * ( - 1 ) sum_1 ) ( * ( - 1 ) i_1 ) ) ) ) 0 ) ( <= 0 ( + sum_0 ( + i_0 ( + ( * ( - 1 ) sum_1 ) ( * ( - 1 ) i_1 ) ) ) ) ) ) ) ( and .def_235 ( and .def_236 ( and ( and .def_235 ( <= i_1 i_0 ) ) ( and ( and .def_235 ( <= ( + sum_0 ( + ( * 2 i_0 ) ( + ( * ( - 1 ) sum_1 ) ( * ( - 2 ) i_1 ) ) ) ) 0 ) ) ( <= 0 ( + sum_0 ( + ( * 2 i_0 ) ( + ( * ( - 1 ) sum_1 ) ( * ( - 2 ) i_1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
[' ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( = i_0 0 ) ( = n_0 n_1 ) ) ( and ( = n_0 n_1 ) ( and ( <= 0 ( + n_0 ( + ( * ( - 1 ) i_0 ) ( * ( - 1 ) n_1 ) ) ) ) ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( = i_0 0 ) ( = n_0 n_1 ) ) ( and ( and ( <= i_0 i_1 ) ( and ( <= ( + sum_0 ( + i_0 ( + ( * ( - 1 ) sum_1 ) ( * ( - 1 ) i_1 ) ) ) ) 0 ) ( <= 0 ( + sum_0 ( + i_0 ( + ( * ( - 1 ) sum_1 ) ( * ( - 1 ) i_1 ) ) ) ) ) ) ) ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( = i_0 0 ) ( = n_0 n_1 ) ) ( and ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( <= i_1 i_0 ) ) ( and ( and ( <= 1 ( + n_1 ( * ( - 1 ) i_1 ) ) ) ( <= ( + sum_0 ( + ( * 2 i_0 ) ( + ( * ( - 1 ) sum_1 ) ( * ( - 2 ) i_1 ) ) ) ) 0 ) ) ( <= 0 ( + sum_0 ( + ( * 2 i_0 ) ( + ( * ( - 1 ) sum_1 ) ( * ( - 2 ) i_1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ']
hi
paren_dict {20: 34, 9: 36, 7: 38, 65: 76, 59: 87, 48: 89, 46: 91, 189: 195, 185: 202, 176: 204, 171: 208, 251: 257, 247: 264, 270: 276, 266: 285, 243: 287, 234: 289, 223: 291, 216: 293, 328: 334, 324: 341, 347: 353, 343: 362, 320: 364, 311: 366, 300: 368, 295: 372, 210: 374, 165: 376, 150: 378, 406: 412, 402: 419, 393: 421, 386: 423, 457: 463, 453: 470, 476: 482, 472: 491, 449: 493, 438: 495, 431: 497, 523: 529, 519: 536, 542: 548, 538: 557, 515: 559, 504: 561, 499: 565, 425: 567, 380: 569, 144: 571, 129: 573, 602: 608, 598: 615, 589: 617, 580: 619, 575: 623, 123: 625, 108: 627, 93: 629, 40: 631, 1: 633}
aux_vars_first_occ_dict {'.def_314 ': 11, '.def_315 ': 50}
aux_vars_dict {'.def_314 ': '( = np_1 np_0 ) ', '.def_315 ': '( and ( = ip_0 0 ) .def_314 ) '}
subs1 ( = np_1 np_0 ) 
remove lets from formula
subs2 ( = np_1 np_0 ) 
subs1 ( and ( = ip_0 0 ) .def_314 ) 
remove lets from formula
subs2 ( and ( = ip_0 0 ) .def_314 ) 
.def_314 
19
aux_vars_subs_dict {'.def_314 ': '( = np_1 np_0 ) '}
subs1 ( = np_1 np_0 ) 
remove lets from formula
subs2 ( = np_1 np_0 ) 
subs1 ( and ( = ip_0 0 ) .def_314 ) 
remove lets from formula
subs2 ( and ( = ip_0 0 ) .def_314 ) 
.def_314 
19
aux_vars_subs_dict {'.def_314 ': '( = np_1 np_0 ) ', '.def_315 ': '( and ( = ip_0 0 ) ( = np_1 np_0 ) ) '}
subs1 ( = np_1 np_0 ) 
remove lets from formula
subs2 ( = np_1 np_0 ) 
subs1 ( and ( = ip_0 0 ) .def_314 ) 
remove lets from formula
subs2 ( and ( = ip_0 0 ) .def_314 ) 
.def_314 
19
aux_vars_subs_dict {'.def_314 ': '( = np_1 np_0 ) ', '.def_315 ': '( and ( = ip_0 0 ) ( = np_1 np_0 ) ) '}
subs1 ( and ( = ip_0 0 ) .def_314 ) 
remove lets from formula
subs2 ( and ( = ip_0 0 ) .def_314 ) 
.def_314 
19
aux_vars_subs_dict {'.def_314 ': '( = np_1 np_0 ) ', '.def_315 ': '( and ( = ip_0 0 ) ( = np_1 np_0 ) ) '}
aux_vars_subs_dict  {'.def_314 ': '( = np_1 np_0 ) ', '.def_315 ': '( and ( = ip_0 0 ) ( = np_1 np_0 ) ) '}
{20: 34, 9: 36, 7: 38, 65: 76, 59: 87, 48: 89, 46: 91, 189: 195, 185: 202, 176: 204, 171: 208, 251: 257, 247: 264, 270: 276, 266: 285, 243: 287, 234: 289, 223: 291, 216: 293, 328: 334, 324: 341, 347: 353, 343: 362, 320: 364, 311: 366, 300: 368, 295: 372, 210: 374, 165: 376, 150: 378, 406: 412, 402: 419, 393: 421, 386: 423, 457: 463, 453: 470, 476: 482, 472: 491, 449: 493, 438: 495, 431: 497, 523: 529, 519: 536, 542: 548, 538: 557, 515: 559, 504: 561, 499: 565, 425: 567, 380: 569, 144: 571, 129: 573, 602: 608, 598: 615, 589: 617, 580: 619, 575: 623, 123: 625, 108: 627, 93: 629, 40: 631, 1: 633}
{27: 38, 21: 49, 10: 51, 8: 53, 151: 157, 147: 164, 138: 166, 133: 170, 213: 219, 209: 226, 232: 238, 228: 247, 205: 249, 196: 251, 185: 253, 178: 255, 290: 296, 286: 303, 309: 315, 305: 324, 282: 326, 273: 328, 262: 330, 257: 334, 172: 336, 127: 338, 112: 340, 368: 374, 364: 381, 355: 383, 348: 385, 419: 425, 415: 432, 438: 444, 434: 453, 411: 455, 400: 457, 393: 459, 485: 491, 481: 498, 504: 510, 500: 519, 477: 521, 466: 523, 461: 527, 387: 529, 342: 531, 106: 533, 91: 535, 564: 570, 560: 577, 551: 579, 542: 581, 537: 585, 85: 587, 70: 589, 55: 591, 2: 593}
remove lets from formula
final_formula  ( and .def_315 ( and .def_314 ( and ( and .def_315 ( and ( and .def_315 ( and ( <= ( + ip_1 ( * ( - 1 ) ip_0 ) ) 1 ) ( and ( <= 1 ( + sump_1 ( + ip_1 ( + ( * ( - 2 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) ) ( <= ( + sump_1 ( + ip_1 ( + ( * ( - 2 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) 1 ) ) ) ) ( and ( <= 1 ( + ip_1 ( * ( - 1 ) ip_0 ) ) ) ( and ( <= 0 ( + sump_1 ( + ( * ( - 1 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) ( <= ( + sump_1 ( + ( * ( - 1 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) 0 ) ) ) ) ) ( <= ( + np_1 ( + ip_0 ( * ( - 1 ) np_0 ) ) ) 0 ) ) ) ) 
[' ( and ( and ( = ip_0 0 ) ( = np_1 np_0 ) ) ( and ( = np_1 np_0 ) ( and ( and ( and ( = ip_0 0 ) ( = np_1 np_0 ) ) ( and ( and ( and ( = ip_0 0 ) ( = np_1 np_0 ) ) ( and ( <= ( + ip_1 ( * ( - 1 ) ip_0 ) ) 1 ) ( and ( <= 1 ( + sump_1 ( + ip_1 ( + ( * ( - 2 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) ) ( <= ( + sump_1 ( + ip_1 ( + ( * ( - 2 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) 1 ) ) ) ) ( and ( <= 1 ( + ip_1 ( * ( - 1 ) ip_0 ) ) ) ( and ( <= 0 ( + sump_1 ( + ( * ( - 1 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) ) ( <= ( + sump_1 ( + ( * ( - 1 ) ip_0 ) ( * ( - 1 ) sump_0 ) ) ) 0 ) ) ) ) ) ( <= ( + np_1 ( + ip_0 ( * ( - 1 ) np_0 ) ) ) 0 ) ) ) ) ']
hi
paren_dict {20: 36, 9: 38, 7: 40, 67: 79, 61: 90, 50: 92, 48: 94, 192: 198, 188: 206, 178: 208, 173: 212, 247: 253, 243: 261, 267: 273, 263: 283, 239: 285, 227: 287, 220: 289, 316: 322, 312: 330, 336: 342, 332: 352, 308: 354, 296: 356, 291: 360, 214: 362, 168: 364, 153: 366, 394: 400, 390: 408, 380: 410, 373: 412, 447: 453, 443: 461, 467: 473, 463: 483, 439: 485, 427: 487, 420: 489, 516: 522, 512: 530, 536: 542, 532: 552, 508: 554, 496: 556, 491: 560, 414: 562, 368: 564, 147: 566, 132: 568, 599: 605, 595: 613, 585: 615, 575: 617, 570: 621, 126: 623, 111: 625, 96: 627, 42: 629, 1: 631}
aux_vars_first_occ_dict {'.def_371 ': 11, '.def_372 ': 52}
aux_vars_dict {'.def_371 ': '( = npp_1 npp_0 ) ', '.def_372 ': '( and ( = ipp_0 0 ) .def_371 ) '}
subs1 ( = npp_1 npp_0 ) 
remove lets from formula
subs2 ( = npp_1 npp_0 ) 
subs1 ( and ( = ipp_0 0 ) .def_371 ) 
remove lets from formula
subs2 ( and ( = ipp_0 0 ) .def_371 ) 
.def_371 
20
aux_vars_subs_dict {'.def_371 ': '( = npp_1 npp_0 ) '}
subs1 ( = npp_1 npp_0 ) 
remove lets from formula
subs2 ( = npp_1 npp_0 ) 
subs1 ( and ( = ipp_0 0 ) .def_371 ) 
remove lets from formula
subs2 ( and ( = ipp_0 0 ) .def_371 ) 
.def_371 
20
aux_vars_subs_dict {'.def_371 ': '( = npp_1 npp_0 ) ', '.def_372 ': '( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) '}
subs1 ( = npp_1 npp_0 ) 
remove lets from formula
subs2 ( = npp_1 npp_0 ) 
subs1 ( and ( = ipp_0 0 ) .def_371 ) 
remove lets from formula
subs2 ( and ( = ipp_0 0 ) .def_371 ) 
.def_371 
20
aux_vars_subs_dict {'.def_371 ': '( = npp_1 npp_0 ) ', '.def_372 ': '( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) '}
subs1 ( and ( = ipp_0 0 ) .def_371 ) 
remove lets from formula
subs2 ( and ( = ipp_0 0 ) .def_371 ) 
.def_371 
20
aux_vars_subs_dict {'.def_371 ': '( = npp_1 npp_0 ) ', '.def_372 ': '( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) '}
aux_vars_subs_dict  {'.def_371 ': '( = npp_1 npp_0 ) ', '.def_372 ': '( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) '}
{20: 36, 9: 38, 7: 40, 67: 79, 61: 90, 50: 92, 48: 94, 192: 198, 188: 206, 178: 208, 173: 212, 247: 253, 243: 261, 267: 273, 263: 283, 239: 285, 227: 287, 220: 289, 316: 322, 312: 330, 336: 342, 332: 352, 308: 354, 296: 356, 291: 360, 214: 362, 168: 364, 153: 366, 394: 400, 390: 408, 380: 410, 373: 412, 447: 453, 443: 461, 467: 473, 463: 483, 439: 485, 427: 487, 420: 489, 516: 522, 512: 530, 536: 542, 532: 552, 508: 554, 496: 556, 491: 560, 414: 562, 368: 564, 147: 566, 132: 568, 599: 605, 595: 613, 585: 615, 575: 617, 570: 621, 126: 623, 111: 625, 96: 627, 42: 629, 1: 631}
{27: 39, 21: 50, 10: 52, 8: 54, 152: 158, 148: 166, 138: 168, 133: 172, 207: 213, 203: 221, 227: 233, 223: 243, 199: 245, 187: 247, 180: 249, 276: 282, 272: 290, 296: 302, 292: 312, 268: 314, 256: 316, 251: 320, 174: 322, 128: 324, 113: 326, 354: 360, 350: 368, 340: 370, 333: 372, 407: 413, 403: 421, 427: 433, 423: 443, 399: 445, 387: 447, 380: 449, 476: 482, 472: 490, 496: 502, 492: 512, 468: 514, 456: 516, 451: 520, 374: 522, 328: 524, 107: 526, 92: 528, 559: 565, 555: 573, 545: 575, 535: 577, 530: 581, 86: 583, 71: 585, 56: 587, 2: 589}
remove lets from formula
final_formula  ( and .def_372 ( and .def_371 ( and ( and .def_372 ( and ( and .def_372 ( or ( <= ( + npp_1 ( * ( - 1 ) ipp_0 ) ) 1 ) ( and ( <= 1 ( + sumpp_1 ( + ( * ( - 2 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) ) ( <= ( + sumpp_1 ( + ( * ( - 2 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) 1 ) ) ) ) ( or ( <= 2 ( + npp_1 ( * ( - 1 ) ipp_0 ) ) ) ( and ( <= 0 ( + sumpp_1 ( + ( * ( - 1 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) ) ( <= ( + sumpp_1 ( + ( * ( - 1 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) 0 ) ) ) ) ) ( <= ( + npp_1 ( + ipp_0 ( * ( - 1 ) npp_0 ) ) ) 0 ) ) ) ) 
[' ( and ( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) ( and ( = npp_1 npp_0 ) ( and ( and ( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) ( and ( and ( and ( = ipp_0 0 ) ( = npp_1 npp_0 ) ) ( or ( <= ( + npp_1 ( * ( - 1 ) ipp_0 ) ) 1 ) ( and ( <= 1 ( + sumpp_1 ( + ( * ( - 2 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) ) ( <= ( + sumpp_1 ( + ( * ( - 2 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) 1 ) ) ) ) ( or ( <= 2 ( + npp_1 ( * ( - 1 ) ipp_0 ) ) ) ( and ( <= 0 ( + sumpp_1 ( + ( * ( - 1 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) ) ( <= ( + sumpp_1 ( + ( * ( - 1 ) ipp_0 ) ( * ( - 1 ) sumpp_0 ) ) ) 0 ) ) ) ) ) ( <= ( + npp_1 ( + ipp_0 ( * ( - 1 ) npp_0 ) ) ) 0 ) ) ) ) ']
hi
paren_dict {20: 33, 9: 35, 7: 37, 58: 73, 47: 75, 45: 77, 99: 117, 183: 189, 179: 198, 168: 200, 202: 208, 163: 210, 218: 241, 243: 266, 212: 268, 158: 270, 305: 324, 299: 326, 373: 379, 369: 390, 358: 392, 345: 394, 340: 398, 435: 441, 431: 452, 420: 454, 407: 456, 400: 458, 334: 460, 328: 462, 293: 464, 278: 466, 272: 468, 152: 470, 146: 472, 131: 474, 482: 496, 476: 498, 125: 500, 119: 502, 93: 504, 79: 506, 39: 508, 1: 510}
aux_vars_first_occ_dict {'.def_430 ': 11, '.def_467 ': 49}
aux_vars_dict {'.def_430 ': '( = nppp_1 0 ) ', '.def_467 ': '( not .def_430 ) '}
subs1 ( = nppp_1 0 ) 
remove lets from formula
subs2 ( = nppp_1 0 ) 
subs1 ( not .def_430 ) 
remove lets from formula
subs2 ( not .def_430 ) 
.def_430 
6
aux_vars_subs_dict {'.def_430 ': '( = nppp_1 0 ) '}
subs1 ( = nppp_1 0 ) 
remove lets from formula
subs2 ( = nppp_1 0 ) 
subs1 ( = nppp_1 0 ) 
remove lets from formula
subs2 ( = nppp_1 0 ) 
subs1 ( not .def_430 ) 
remove lets from formula
subs2 ( not .def_430 ) 
.def_430 
6
aux_vars_subs_dict {'.def_430 ': '( = nppp_1 0 ) ', '.def_467 ': '( not ( = nppp_1 0 ) ) '}
subs1 ( not .def_430 ) 
remove lets from formula
subs2 ( not .def_430 ) 
.def_430 
6
aux_vars_subs_dict {'.def_430 ': '( = nppp_1 0 ) ', '.def_467 ': '( not ( = nppp_1 0 ) ) '}
aux_vars_subs_dict  {'.def_430 ': '( = nppp_1 0 ) ', '.def_467 ': '( not ( = nppp_1 0 ) ) '}
{20: 33, 9: 35, 7: 37, 58: 73, 47: 75, 45: 77, 99: 117, 183: 189, 179: 198, 168: 200, 202: 208, 163: 210, 218: 241, 243: 266, 212: 268, 158: 270, 305: 324, 299: 326, 373: 379, 369: 390, 358: 392, 345: 394, 340: 398, 435: 441, 431: 452, 420: 454, 407: 456, 400: 458, 334: 460, 328: 462, 293: 464, 278: 466, 272: 468, 152: 470, 146: 472, 131: 474, 482: 496, 476: 498, 125: 500, 119: 502, 93: 504, 79: 506, 39: 508, 1: 510}
{21: 36, 10: 38, 8: 40, 62: 80, 146: 152, 142: 161, 131: 163, 165: 171, 126: 173, 181: 204, 206: 229, 175: 231, 121: 233, 268: 287, 262: 289, 336: 342, 332: 353, 321: 355, 308: 357, 303: 361, 398: 404, 394: 415, 383: 417, 370: 419, 363: 421, 297: 423, 291: 425, 256: 427, 241: 429, 235: 431, 115: 433, 109: 435, 94: 437, 445: 459, 439: 461, 88: 463, 82: 465, 56: 467, 42: 469, 2: 471}
remove lets from formula
final_formula  ( or .def_430 ( and ( = nppp_0 nppp_1 ) ( not ( and ( and .def_467 ( not ( and ( or ( <= ( + ippp_0 ( * ( - 1 ) nppp_1 ) ) ( - 1 ) ) ( and ( <= sumppp_0 sumppp_1 ) ( <= sumppp_1 sumppp_0 ) ) ) ( not ( and .def_467 ( and ( not ( <= nppp_1 ippp_0 ) ) ( not ( and ( <= ( + sumppp_0 ( + ippp_0 ( * ( - 1 ) sumppp_1 ) ) ) 0 ) ( <= 0 ( + sumppp_0 ( + ippp_0 ( * ( - 1 ) sumppp_1 ) ) ) ) ) ) ) ) ) ) ) ) ( not ( <= nppp_1 0 ) ) ) ) ) ) 
[' ( or ( = nppp_1 0 ) ( and ( = nppp_0 nppp_1 ) ( not ( and ( and ( not ( = nppp_1 0 ) ) ( not ( and ( or ( <= ( + ippp_0 ( * ( - 1 ) nppp_1 ) ) ( - 1 ) ) ( and ( <= sumppp_0 sumppp_1 ) ( <= sumppp_1 sumppp_0 ) ) ) ( not ( and ( not ( = nppp_1 0 ) ) ( and ( not ( <= nppp_1 ippp_0 ) ) ( not ( and ( <= ( + sumppp_0 ( + ippp_0 ( * ( - 1 ) sumppp_1 ) ) ) 0 ) ( <= 0 ( + sumppp_0 ( + ippp_0 ( * ( - 1 ) sumppp_1 ) ) ) ) ) ) ) ) ) ) ) ) ( not ( <= nppp_1 0 ) ) ) ) ) ) ']
hi
paren_dict {26: 40, 20: 42, 9: 44, 7: 46, 79: 104, 106: 131, 73: 133, 67: 135, 56: 137, 54: 139, 168: 188, 202: 217, 196: 219, 292: 298, 288: 308, 276: 310, 269: 312, 263: 314, 257: 325, 242: 327, 371: 377, 367: 387, 355: 389, 391: 397, 350: 399, 344: 401, 329: 403, 236: 405, 221: 407, 190: 409, 162: 411, 147: 413, 141: 415, 48: 417, 1: 419}
aux_vars_first_occ_dict {'.def_201 ': 11, '.def_512 ': 58}
aux_vars_dict {'.def_201 ': '( not ( = npppp_1 0 ) ) ', '.def_512 ': '( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) '}
subs1 ( not ( = npppp_1 0 ) ) 
remove lets from formula
subs2 ( not ( = npppp_1 0 ) ) 
subs1 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) 
remove lets from formula
subs2 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) 
subs1 ( not ( = npppp_1 0 ) ) 
remove lets from formula
subs2 ( not ( = npppp_1 0 ) ) 
subs1 ( not ( = npppp_1 0 ) ) 
remove lets from formula
subs2 ( not ( = npppp_1 0 ) ) 
subs1 ( not ( = npppp_1 0 ) ) 
remove lets from formula
subs2 ( not ( = npppp_1 0 ) ) 
subs1 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) 
remove lets from formula
subs2 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) 
subs1 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) 
remove lets from formula
subs2 ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) 
aux_vars_subs_dict  {'.def_201 ': '( not ( = npppp_1 0 ) ) ', '.def_512 ': '( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) '}
{26: 40, 20: 42, 9: 44, 7: 46, 79: 104, 106: 131, 73: 133, 67: 135, 56: 137, 54: 139, 168: 188, 202: 217, 196: 219, 292: 298, 288: 308, 276: 310, 269: 312, 263: 314, 257: 325, 242: 327, 371: 377, 367: 387, 355: 389, 391: 397, 350: 399, 344: 401, 329: 403, 236: 405, 221: 407, 190: 409, 162: 411, 147: 413, 141: 415, 48: 417, 1: 419}
{33: 58, 60: 85, 27: 87, 21: 89, 10: 91, 8: 93, 122: 142, 156: 171, 150: 173, 246: 252, 242: 262, 230: 264, 223: 266, 217: 268, 211: 279, 196: 281, 325: 331, 321: 341, 309: 343, 345: 351, 304: 353, 298: 355, 283: 357, 190: 359, 175: 361, 144: 363, 116: 365, 101: 367, 95: 369, 2: 371}
remove lets from formula
final_formula  ( not ( and .def_201 ( and ( = npppp_0 npppp_1 ) ( and ( not ( <= npppp_1 0 ) ) ( and .def_201 ( and ( and .def_201 ( and ( not ( <= 1 ( + ipppp_0 ( * ( - 1 ) npppp_1 ) ) ) ) .def_512 ) ) ( and .def_512 ( not ( <= ( + npppp_0 ( * ( - 1 ) npppp_1 ) ) ( - 1 ) ) ) ) ) ) ) ) ) ) 
[' ( not ( and ( not ( = npppp_1 0 ) ) ( and ( = npppp_0 npppp_1 ) ( and ( not ( <= npppp_1 0 ) ) ( and ( not ( = npppp_1 0 ) ) ( and ( and ( not ( = npppp_1 0 ) ) ( and ( not ( <= 1 ( + ipppp_0 ( * ( - 1 ) npppp_1 ) ) ) ) ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) ) ) ( and ( not ( and ( <= sumpppp_0 sumpppp_1 ) ( <= sumpppp_1 sumpppp_0 ) ) ) ( not ( <= ( + npppp_0 ( * ( - 1 ) npppp_1 ) ) ( - 1 ) ) ) ) ) ) ) ) ) ) ']
new_pred_smt_format ['(declare-rel pred_0_synth_msat_3 (Int Int Int))\n (rule (=>  ( =  ( + (rel sum 0)  ( +  ( * 2 (rel i 0)  )  ( +  ( *  ( - 1  ) (rel sum 1)  )  ( *  ( - 2  ) (rel i 1)  )  )  )  ) 0  ) (pred_0_synth_msat_3 i n sum)))']
['(declare-rel pred_0_synth_msat_3 (Int Int Int))\n (rule (=>  ( =  ( + (rel sum 0)  ( +  ( * 2 (rel i 0)  )  ( +  ( *  ( - 1  ) (rel sum 1)  )  ( *  ( - 2  ) (rel i 1)  )  )  )  ) 0  ) (pred_0_synth_msat_3 i n sum)))']
Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.071762 
Solver time:	3.884746
Total time:	3.956508
Iteration count:	17
Predicate count:	12
Successfully added new predicate to input file. !
Start next refinement loop: True



PDSC: Verifying ./Benchmarks_msat/sum_to_n.smt2
Namespace(file='./Benchmarks_msat/sum_to_n.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
1 SMT queries performed.
Proved by invariant:
And(n_gt_0_1,
    sum0_eq_sum1,
    n0_eq_n1,
    pred_0_synth_msat_3,
    Or(Not(i_lt_n_1), i_lt_n_0),
    Or(Not(i_lt_n_0), i_lt_n_1),
    Or(i_lt_n_0, i_eq_n_1))
Pre-processing time:	0.090291 
Solver time:	2.650373
Total time:	2.740664
Iteration count:	1
Predicate count:	13
Start next refinement loop: False



Total time taken : 13.50375
Number of predicates guessed: 3.0
