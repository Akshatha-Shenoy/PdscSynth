PDSC: Verifying ./Benchmarks_msat/inc_dec.smt2
Namespace(file='./Benchmarks_msat/inc_dec.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[2]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
count1_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
count0_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
count0_eq_2, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
count1_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]


17 SMT queries performed.
before complete_trace: [count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]


after complete_trace [count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[-1]


-----------------------------------check_spur-------------------------------
final init cond And(And(count_0 == 0, h_0 > 0),
    And(count_1 == 0, h_1 > 0),
    l_0 == l_1)
Initial concrete state  {'h_1': 1, 'h_0': 1, 'h_gt_0_1': True, 'count_eq_0_1': True, 'h_gt_0_0': True, 'count_eq_0_0': True, 'count1_eq_2': False, 'count0_eq_2': False, 'l0_eq_l1': True, 'l_1': 0, 'l_0': 0, 'count_1': 0, 'count_0': 0}
Next concrete state {'count_1': 1, 'l_1': 1, 'count_0': 0, 'h_0': 1, 'l_0': 0, 'h_1': 1}
Next concrete state {'count_1': 2, 'l_1': 0, 'count_0': 0, 'h_0': 1, 'l_0': 0, 'h_1': 1}
Writing an smt file to be run using mathsat
Checking output from mathsat 5
hi
paren_dict {19: 33, 9: 35, 7: 37, 59: 73, 101: 115, 95: 117, 139: 152, 154: 167, 133: 169, 119: 171, 89: 173, 75: 175, 53: 177, 39: 179, 1: 181}
aux_vars_first_occ_dict {'.def_17 ': 11}
aux_vars_dict {'.def_17 ': '( = count_1 0 ) '}
subs1 ( = count_1 0 ) 
remove lets from formula
subs2 ( = count_1 0 ) 
subs1 ( = count_1 0 ) 
remove lets from formula
subs2 ( = count_1 0 ) 
subs1 ( = count_1 0 ) 
remove lets from formula
subs2 ( = count_1 0 ) 
subs1 ( = count_1 0 ) 
remove lets from formula
subs2 ( = count_1 0 ) 
aux_vars_subs_dict  {'.def_17 ': '( = count_1 0 ) '}
{19: 33, 9: 35, 7: 37, 59: 73, 101: 115, 95: 117, 139: 152, 154: 167, 133: 169, 119: 171, 89: 173, 75: 175, 53: 177, 39: 179, 1: 181}
remove lets from formula
final_formula  ( and .def_17 ( and ( = count_0 0 ) ( and .def_17 ( and ( not ( = count_0 2 ) ) ( and .def_17 ( and ( <= l_0 l_1 ) ( <= l_1 l_0 ) ) ) ) ) ) ) 
[' ( and ( = count_1 0 ) ( and ( = count_0 0 ) ( and ( = count_1 0 ) ( and ( not ( = count_0 2 ) ) ( and ( = count_1 0 ) ( and ( <= l_0 l_1 ) ( <= l_1 l_0 ) ) ) ) ) ) ) ']
hi
paren_dict {20: 36, 9: 38, 7: 40, 61: 77, 50: 79, 48: 81, 89: 104, 118: 133, 112: 135, 173: 197, 227: 233, 223: 240, 219: 247, 210: 249, 205: 253, 279: 285, 275: 292, 271: 299, 262: 301, 255: 303, 199: 305, 167: 307, 152: 309, 137: 311, 106: 313, 83: 315, 42: 317, 1: 319}
aux_vars_first_occ_dict {'.def_259 ': 11, '.def_260 ': 52}
aux_vars_dict {'.def_259 ': '( <= countp_1 1 ) ', '.def_260 ': '( <= 1 countp_1 ) '}
subs1 ( <= countp_1 1 ) 
remove lets from formula
subs2 ( <= countp_1 1 ) 
subs1 ( <= 1 countp_1 ) 
remove lets from formula
subs2 ( <= 1 countp_1 ) 
subs1 ( <= countp_1 1 ) 
remove lets from formula
subs2 ( <= countp_1 1 ) 
subs1 ( <= 1 countp_1 ) 
remove lets from formula
subs2 ( <= 1 countp_1 ) 
subs1 ( <= countp_1 1 ) 
remove lets from formula
subs2 ( <= countp_1 1 ) 
subs1 ( <= 1 countp_1 ) 
remove lets from formula
subs2 ( <= 1 countp_1 ) 
aux_vars_subs_dict  {'.def_259 ': '( <= countp_1 1 ) ', '.def_260 ': '( <= 1 countp_1 ) '}
{20: 36, 9: 38, 7: 40, 61: 77, 50: 79, 48: 81, 89: 104, 118: 133, 112: 135, 173: 197, 227: 233, 223: 240, 219: 247, 210: 249, 205: 253, 279: 285, 275: 292, 271: 299, 262: 301, 255: 303, 199: 305, 167: 307, 152: 309, 137: 311, 106: 313, 83: 315, 42: 317, 1: 319}
{21: 37, 10: 39, 8: 41, 49: 64, 78: 93, 72: 95, 133: 157, 187: 193, 183: 200, 179: 207, 170: 209, 165: 213, 239: 245, 235: 252, 231: 259, 222: 261, 215: 263, 159: 265, 127: 267, 112: 269, 97: 271, 66: 273, 43: 275, 2: 277}
remove lets from formula
final_formula  ( and ( = countp_0 0 ) ( and ( not ( = countp_0 2 ) ) ( and .def_259 ( and .def_260 ( and ( and .def_259 .def_260 ) ( and ( <= ( + hp_1 ( + ( * ( - 1 ) lp_1 ) lp_0 ) ) 0 ) ( <= 0 ( + hp_1 ( + ( * ( - 1 ) lp_1 ) lp_0 ) ) ) ) ) ) ) ) ) 
[' ( and ( = countp_0 0 ) ( and ( not ( = countp_0 2 ) ) ( and ( <= countp_1 1 ) ( and ( <= 1 countp_1 ) ( and ( and ( <= countp_1 1 ) ( <= 1 countp_1 ) ) ( and ( <= ( + hp_1 ( + ( * ( - 1 ) lp_1 ) lp_0 ) ) 0 ) ( <= 0 ( + hp_1 ( + ( * ( - 1 ) lp_1 ) lp_0 ) ) ) ) ) ) ) ) ) ']
new_pred_smt_format ['(declare-rel pred_0_synth_msat_1 (Int Int Int))\n (rule (=>  ( =  ( + (rel h 1)  ( +  ( *  ( - 1  ) (rel l 1)  ) (rel l 0)  )  ) 0  ) (pred_0_synth_msat_1 l h count)))']
['(declare-rel pred_0_synth_msat_1 (Int Int Int))\n (rule (=>  ( =  ( + (rel h 1)  ( +  ( *  ( - 1  ) (rel l 1)  ) (rel l 0)  )  ) 0  ) (pred_0_synth_msat_1 l h count)))']
Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.04556 
Solver time:	2.251407
Total time:	2.296967
Iteration count:	17
Predicate count:	7
Successfully added new predicate to input file. !
PDSC: Verifying ./Benchmarks_msat/inc_dec.smt2
Namespace(file='./Benchmarks_msat/inc_dec.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[2]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
count0_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
count0_eq_2, 
pred_0_synth_msat_1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
count0_eq_2, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_1, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
count1_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]


16 SMT queries performed.
before complete_trace: [count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]


after complete_trace [count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_1, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[-1]


-----------------------------------check_spur-------------------------------
final init cond And(And(count_0 == 0, h_0 > 0),
    And(count_1 == 0, h_1 > 0),
    l_0 == l_1)
Initial concrete state  {'h_1': 1, 'h_0': 1, 'h_gt_0_1': True, 'count_eq_0_1': True, 'h_gt_0_0': True, 'count_eq_0_0': True, 'pred_0_synth_msat_1': False, 'count1_eq_2': False, 'count0_eq_2': False, 'l0_eq_l1': True, 'l_1': 0, 'l_0': 0, 'count_1': 0, 'count_0': 0}
Next concrete state {'count_1': 1, 'l_1': 1, 'count_0': 0, 'h_0': 1, 'l_0': 0, 'h_1': 1}
Next concrete state {'count_1': 2, 'l_1': 0, 'count_0': 0, 'h_0': 1, 'l_0': 0, 'h_1': 1}
Next concrete state {'count_0': 1, 'l_0': 1, 'count_1': 2, 'h_1': 1, 'l_1': 0, 'h_0': 1}
Next concrete state {'count_0': 2, 'l_0': 0, 'count_1': 2, 'h_1': 1, 'l_1': 0, 'h_0': 1}
Writing an smt file to be run using mathsat
Checking output from mathsat 5
hi
paren_dict {19: 33, 9: 35, 7: 37, 59: 73, 101: 115, 95: 117, 139: 152, 154: 167, 133: 169, 119: 171, 89: 173, 75: 175, 53: 177, 39: 179, 1: 181}
aux_vars_first_occ_dict {'.def_17 ': 11}
aux_vars_dict {'.def_17 ': '( = count_1 0 ) '}
subs1 ( = count_1 0 ) 
remove lets from formula
subs2 ( = count_1 0 ) 
subs1 ( = count_1 0 ) 
remove lets from formula
subs2 ( = count_1 0 ) 
subs1 ( = count_1 0 ) 
remove lets from formula
subs2 ( = count_1 0 ) 
subs1 ( = count_1 0 ) 
remove lets from formula
subs2 ( = count_1 0 ) 
aux_vars_subs_dict  {'.def_17 ': '( = count_1 0 ) '}
{19: 33, 9: 35, 7: 37, 59: 73, 101: 115, 95: 117, 139: 152, 154: 167, 133: 169, 119: 171, 89: 173, 75: 175, 53: 177, 39: 179, 1: 181}
remove lets from formula
final_formula  ( and .def_17 ( and ( = count_0 0 ) ( and .def_17 ( and ( not ( = count_0 2 ) ) ( and .def_17 ( and ( <= l_0 l_1 ) ( <= l_1 l_0 ) ) ) ) ) ) ) 
[' ( and ( = count_1 0 ) ( and ( = count_0 0 ) ( and ( = count_1 0 ) ( and ( not ( = count_0 2 ) ) ( and ( = count_1 0 ) ( and ( <= l_0 l_1 ) ( <= l_1 l_0 ) ) ) ) ) ) ) ']
hi
paren_dict {20: 36, 9: 38, 7: 40, 61: 77, 50: 79, 48: 81, 89: 104, 118: 133, 112: 135, 173: 197, 227: 233, 223: 240, 219: 247, 210: 249, 205: 253, 279: 285, 275: 292, 271: 299, 262: 301, 255: 303, 199: 305, 167: 307, 152: 309, 137: 311, 106: 313, 83: 315, 42: 317, 1: 319}
aux_vars_first_occ_dict {'.def_269 ': 11, '.def_270 ': 52}
aux_vars_dict {'.def_269 ': '( <= countp_1 1 ) ', '.def_270 ': '( <= 1 countp_1 ) '}
subs1 ( <= countp_1 1 ) 
remove lets from formula
subs2 ( <= countp_1 1 ) 
subs1 ( <= 1 countp_1 ) 
remove lets from formula
subs2 ( <= 1 countp_1 ) 
subs1 ( <= countp_1 1 ) 
remove lets from formula
subs2 ( <= countp_1 1 ) 
subs1 ( <= 1 countp_1 ) 
remove lets from formula
subs2 ( <= 1 countp_1 ) 
subs1 ( <= countp_1 1 ) 
remove lets from formula
subs2 ( <= countp_1 1 ) 
subs1 ( <= 1 countp_1 ) 
remove lets from formula
subs2 ( <= 1 countp_1 ) 
aux_vars_subs_dict  {'.def_269 ': '( <= countp_1 1 ) ', '.def_270 ': '( <= 1 countp_1 ) '}
{20: 36, 9: 38, 7: 40, 61: 77, 50: 79, 48: 81, 89: 104, 118: 133, 112: 135, 173: 197, 227: 233, 223: 240, 219: 247, 210: 249, 205: 253, 279: 285, 275: 292, 271: 299, 262: 301, 255: 303, 199: 305, 167: 307, 152: 309, 137: 311, 106: 313, 83: 315, 42: 317, 1: 319}
{21: 37, 10: 39, 8: 41, 49: 64, 78: 93, 72: 95, 133: 157, 187: 193, 183: 200, 179: 207, 170: 209, 165: 213, 239: 245, 235: 252, 231: 259, 222: 261, 215: 263, 159: 265, 127: 267, 112: 269, 97: 271, 66: 273, 43: 275, 2: 277}
remove lets from formula
final_formula  ( and ( = countp_0 0 ) ( and ( not ( = countp_0 2 ) ) ( and .def_269 ( and .def_270 ( and ( and .def_269 .def_270 ) ( and ( <= ( + hp_1 ( + ( * ( - 1 ) lp_1 ) lp_0 ) ) 0 ) ( <= 0 ( + hp_1 ( + ( * ( - 1 ) lp_1 ) lp_0 ) ) ) ) ) ) ) ) ) 
[' ( and ( = countp_0 0 ) ( and ( not ( = countp_0 2 ) ) ( and ( <= countp_1 1 ) ( and ( <= 1 countp_1 ) ( and ( and ( <= countp_1 1 ) ( <= 1 countp_1 ) ) ( and ( <= ( + hp_1 ( + ( * ( - 1 ) lp_1 ) lp_0 ) ) 0 ) ( <= 0 ( + hp_1 ( + ( * ( - 1 ) lp_1 ) lp_0 ) ) ) ) ) ) ) ) ) ']
new_pred_smt_format ['(declare-rel pred_0_synth_msat_2 (Int Int Int))\n (rule (=>  ( <= (rel l 0) (rel l 1)  ) (pred_0_synth_msat_2 l h count)))']
['(declare-rel pred_0_synth_msat_2 (Int Int Int))\n (rule (=>  ( <= (rel l 0) (rel l 1)  ) (pred_0_synth_msat_2 l h count)))']
Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.053938 
Solver time:	2.696184
Total time:	2.750122
Iteration count:	16
Predicate count:	8
Successfully added new predicate to input file. !
Start next refinement loop: True



PDSC: Verifying ./Benchmarks_msat/inc_dec.smt2
Namespace(file='./Benchmarks_msat/inc_dec.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[2]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
count0_eq_2, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
pred_0_synth_msat_2, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
count0_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
count0_eq_2, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_1, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_1, 
pred_0_synth_msat_2, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
count1_eq_2, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_1, 
pred_0_synth_msat_2, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
count1_eq_2, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]


18 SMT queries performed.
before complete_trace: [count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_1, 
pred_0_synth_msat_2, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
count1_eq_2, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]


after complete_trace [count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_1, 
pred_0_synth_msat_2, ]
--->[1]

[count_eq_0_0, 
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
count1_eq_2, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[-1]


-----------------------------------check_spur-------------------------------
final init cond And(And(count_0 == 0, h_0 > 0),
    And(count_1 == 0, h_1 > 0),
    l_0 == l_1)
Initial concrete state  {'h_1': 1, 'h_0': 1, 'h_gt_0_1': True, 'count_eq_0_1': True, 'h_gt_0_0': True, 'count_eq_0_0': True, 'pred_0_synth_msat_2': True, 'pred_0_synth_msat_1': False, 'count1_eq_2': False, 'count0_eq_2': False, 'l0_eq_l1': True, 'l_1': 0, 'l_0': 0, 'count_1': 0, 'count_0': 0}
Next concrete state {'count_1': 1, 'l_1': 1, 'count_0': 0, 'h_0': 1, 'l_0': 0, 'h_1': 1}
Next concrete state {'count_1': 2, 'l_1': 0, 'count_0': 0, 'h_0': 1, 'l_0': 0, 'h_1': 1}
Next concrete state {'count_0': 1, 'l_0': 1, 'count_1': 2, 'h_1': 1, 'l_1': 0, 'h_0': 1}
Next concrete state {'count_0': 2, 'l_0': 0, 'count_1': 2, 'h_1': 1, 'l_1': 0, 'h_0': 1}
Writing an smt file to be run using mathsat
Checking output from mathsat 5
hi
paren_dict {19: 33, 9: 35, 7: 37, 59: 73, 101: 115, 95: 117, 133: 146, 119: 148, 89: 150, 75: 152, 53: 154, 39: 156, 1: 158}
aux_vars_first_occ_dict {'.def_17 ': 11}
aux_vars_dict {'.def_17 ': '( = count_1 0 ) '}
subs1 ( = count_1 0 ) 
remove lets from formula
subs2 ( = count_1 0 ) 
subs1 ( = count_1 0 ) 
remove lets from formula
subs2 ( = count_1 0 ) 
subs1 ( = count_1 0 ) 
remove lets from formula
subs2 ( = count_1 0 ) 
subs1 ( = count_1 0 ) 
remove lets from formula
subs2 ( = count_1 0 ) 
aux_vars_subs_dict  {'.def_17 ': '( = count_1 0 ) '}
{19: 33, 9: 35, 7: 37, 59: 73, 101: 115, 95: 117, 133: 146, 119: 148, 89: 150, 75: 152, 53: 154, 39: 156, 1: 158}
remove lets from formula
final_formula  ( and .def_17 ( and ( = count_0 0 ) ( and .def_17 ( and ( not ( = count_0 2 ) ) ( and .def_17 ( <= l_0 l_1 ) ) ) ) ) ) 
[' ( and ( = count_1 0 ) ( and ( = count_0 0 ) ( and ( = count_1 0 ) ( and ( not ( = count_0 2 ) ) ( and ( = count_1 0 ) ( <= l_0 l_1 ) ) ) ) ) ) ']
hi
paren_dict {20: 36, 9: 38, 7: 40, 61: 77, 50: 79, 48: 81, 89: 104, 118: 133, 112: 135, 173: 197, 221: 227, 217: 234, 213: 241, 204: 243, 199: 247, 167: 249, 152: 251, 137: 253, 106: 255, 83: 257, 42: 259, 1: 261}
aux_vars_first_occ_dict {'.def_271 ': 11, '.def_272 ': 52}
aux_vars_dict {'.def_271 ': '( <= countp_1 1 ) ', '.def_272 ': '( <= 1 countp_1 ) '}
subs1 ( <= countp_1 1 ) 
remove lets from formula
subs2 ( <= countp_1 1 ) 
subs1 ( <= 1 countp_1 ) 
remove lets from formula
subs2 ( <= 1 countp_1 ) 
subs1 ( <= countp_1 1 ) 
remove lets from formula
subs2 ( <= countp_1 1 ) 
subs1 ( <= 1 countp_1 ) 
remove lets from formula
subs2 ( <= 1 countp_1 ) 
subs1 ( <= countp_1 1 ) 
remove lets from formula
subs2 ( <= countp_1 1 ) 
subs1 ( <= 1 countp_1 ) 
remove lets from formula
subs2 ( <= 1 countp_1 ) 
aux_vars_subs_dict  {'.def_271 ': '( <= countp_1 1 ) ', '.def_272 ': '( <= 1 countp_1 ) '}
{20: 36, 9: 38, 7: 40, 61: 77, 50: 79, 48: 81, 89: 104, 118: 133, 112: 135, 173: 197, 221: 227, 217: 234, 213: 241, 204: 243, 199: 247, 167: 249, 152: 251, 137: 253, 106: 255, 83: 257, 42: 259, 1: 261}
{21: 37, 10: 39, 8: 41, 49: 64, 78: 93, 72: 95, 133: 157, 181: 187, 177: 194, 173: 201, 164: 203, 159: 207, 127: 209, 112: 211, 97: 213, 66: 215, 43: 217, 2: 219}
remove lets from formula
final_formula  ( and ( = countp_0 0 ) ( and ( not ( = countp_0 2 ) ) ( and .def_271 ( and .def_272 ( and ( and .def_271 .def_272 ) ( <= ( + hp_1 ( + ( * ( - 1 ) lp_1 ) lp_0 ) ) 0 ) ) ) ) ) ) 
[' ( and ( = countp_0 0 ) ( and ( not ( = countp_0 2 ) ) ( and ( <= countp_1 1 ) ( and ( <= 1 countp_1 ) ( and ( and ( <= countp_1 1 ) ( <= 1 countp_1 ) ) ( <= ( + hp_1 ( + ( * ( - 1 ) lp_1 ) lp_0 ) ) 0 ) ) ) ) ) ) ']
new_pred_smt_format ['(declare-rel pred_0_synth_msat_3 (Int Int Int))\n (rule (=>  ( = 0  ( + (rel h 0)  ( +  ( *  ( - 1  ) (rel l 0)  ) (rel l 1)  )  )  ) (pred_0_synth_msat_3 l h count)))']
['(declare-rel pred_0_synth_msat_3 (Int Int Int))\n (rule (=>  ( = 0  ( + (rel h 0)  ( +  ( *  ( - 1  ) (rel l 0)  ) (rel l 1)  )  )  ) (pred_0_synth_msat_3 l h count)))']
Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.057385 
Solver time:	3.561853
Total time:	3.619238
Iteration count:	18
Predicate count:	9
Successfully added new predicate to input file. !
Start next refinement loop: True



PDSC: Verifying ./Benchmarks_msat/inc_dec.smt2
Namespace(file='./Benchmarks_msat/inc_dec.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[2]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
pred_0_synth_msat_2, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[1]

[
h_gt_0_0, 
h_gt_0_1, 
count1_eq_2, ]
--->[0]

[
h_gt_0_0, 
h_gt_0_1, 
count0_eq_2, 
count1_eq_2, ]
--->[0]


Counter-example trace:
[count_eq_0_0, 
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
l0_eq_l1, 
pred_0_synth_msat_2, ]
--->[0]

[
h_gt_0_0, 
count_eq_0_1, 
h_gt_0_1, 
pred_0_synth_msat_3, ]
--->[2]

[
h_gt_0_0, 
h_gt_0_1, ]
--->[0]


11 SMT queries performed.
Proved by invariant:
And(Or(Not(count_eq_0_0), pred_0_synth_msat_2),
    h_gt_0_0,
    h_gt_0_1,
    Or(Not(count0_eq_2), pred_0_synth_msat_2),
    Or(pred_0_synth_msat_3, count0_eq_2, count_eq_0_0),
    Or(Not(count_eq_0_0), count_eq_0_1),
    Or(Not(count_eq_0_0), l0_eq_l1),
    Or(count_eq_0_1, pred_0_synth_msat_2),
    Or(Not(count_eq_0_1), pred_0_synth_msat_3, l0_eq_l1),
    Or(pred_0_synth_msat_1, count1_eq_2, count_eq_0_1),
    Or(Not(count1_eq_2), l0_eq_l1))
Pre-processing time:	0.066807 
Solver time:	1.77425
Total time:	1.8410570000000002
Iteration count:	11
Predicate count:	10
Start next refinement loop: False



Total time taken : 10.507932
Number of predicates guessed: 3.0
