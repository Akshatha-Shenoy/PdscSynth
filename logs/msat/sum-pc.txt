PDSC: Verifying ./Benchmarks_msat/sum-pc.smt2
Namespace(file='./Benchmarks_msat/sum-pc.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[pc_eq_0_0, 
pc_eq_1_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_1_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_1_1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
y0_eq_y1, 
max0_eq_max1, ]
--->[1]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
i_eq_max_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
i_eq_max_1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
i_eq_max_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[1]

[
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i_eq_max_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i_eq_max_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]


39 SMT queries performed.
before complete_trace: [pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i_eq_max_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]


after complete_trace [pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i_eq_max_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[-1]


-----------------------------------check_spur-------------------------------
final init cond And(And(h_0 > 0,
        max_0 > h_0,
        i_0 == 0,
        pc_0 == If(h_0 <= i_0, 1, 0),
        y_0 == 0,
        v_0 == 0),
    And(h_1 > 0,
        max_1 > h_1,
        i_1 == 0,
        pc_1 == If(h_1 <= i_1, 1, 0),
        y_1 == 0,
        v_1 == 0),
    max_0 == max_1)
Initial concrete state  {'h_0': 1, 'max_1': 2, 'h_1': 1, 'pc_1': 0, 'pc_0': 0, 'i_eq_max_1': False, 'pc_eq_1_1': False, 'pc_eq_0_1': True, 'i_eq_max_0': False, 'pc_eq_1_0': False, 'pc_eq_0_0': True, 'max0_eq_max1': True, 'i0_eq_i1': True, 'y0_eq_y1': True, 'max_0': 2, 'v_1': 0, 'y_1': 0, 'i_1': 0, 'v_0': 0, 'y_0': 0, 'i_0': 0}
Next concrete state {'y_1': 0, 'i_1': 1, 'h_1': 1, 'v_1': 0, 'max_1': 2, 'pc_0': 0, 'v_0': 0, 'y_0': 0, 'i_0': 0, 'h_0': 1, 'max_0': 2, 'pc_1': 1}
Writing an smt file to be run using mathsat
Checking output from mathsat 5
hi
paren_dict {39: 45, 35: 51, 27: 53, 20: 55, 9: 57, 7: 59, 81: 94, 114: 129, 108: 131, 102: 142, 150: 161, 144: 163, 96: 165, 76: 167, 61: 169, 1: 171}
aux_vars_first_occ_dict {'.def_589 ': 11}
aux_vars_dict {'.def_589 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) '}
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
aux_vars_subs_dict  {'.def_589 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) '}
{39: 45, 35: 51, 27: 53, 20: 55, 9: 57, 7: 59, 81: 94, 114: 129, 108: 131, 102: 142, 150: 161, 144: 163, 96: 165, 76: 167, 61: 169, 1: 171}
remove lets from formula
final_formula  ( and .def_589 ( or ( <= h_1 i_1 ) ( and ( and ( not ( <= max_1 h_1 ) ) .def_589 ) ( not ( = pc_1 1 ) ) ) ) ) 
[' ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( or ( <= h_1 i_1 ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( not ( = pc_1 1 ) ) ) ) ) ']
new_pred_smt_format ['(declare-rel pred_0_synth_msat_1 (Int Int Int Int Int Int))\n (rule (=>  ( = 1  ( + (rel h 1)  ( *  ( - 1  ) (rel i 1)  )  )  ) (pred_0_synth_msat_1 max h i y v pc)))']
['(declare-rel pred_0_synth_msat_1 (Int Int Int Int Int Int))\n (rule (=>  ( = 1  ( + (rel h 1)  ( *  ( - 1  ) (rel i 1)  )  )  ) (pred_0_synth_msat_1 max h i y v pc)))']
Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.089839 
Solver time:	8.027455
Total time:	8.117294
Iteration count:	39
Predicate count:	9
Successfully added new predicate to input file. !
PDSC: Verifying ./Benchmarks_msat/sum-pc.smt2
Namespace(file='./Benchmarks_msat/sum-pc.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_1_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_1_1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
max0_eq_max1, ]
--->[1]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
i_eq_max_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
i_eq_max_1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
i_eq_max_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_1, 
i_eq_max_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_1_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_1_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
max0_eq_max1, ]
--->[2]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i_eq_max_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
max0_eq_max1, ]
--->[0]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


36 SMT queries performed.
before complete_trace: [pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]


after complete_trace [pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i_eq_max_1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pc_eq_1_1, 
i_eq_max_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[-1]


-----------------------------------check_spur-------------------------------
final init cond And(And(h_0 > 0,
        max_0 > h_0,
        i_0 == 0,
        pc_0 == If(h_0 <= i_0, 1, 0),
        y_0 == 0,
        v_0 == 0),
    And(h_1 > 0,
        max_1 > h_1,
        i_1 == 0,
        pc_1 == If(h_1 <= i_1, 1, 0),
        y_1 == 0,
        v_1 == 0),
    max_0 == max_1)
Initial concrete state  {'h_0': 1, 'max_1': 3, 'h_1': 2, 'pc_1': 0, 'pc_0': 0, 'i_eq_max_1': False, 'pc_eq_1_1': False, 'pc_eq_0_1': True, 'i_eq_max_0': False, 'pc_eq_1_0': False, 'pc_eq_0_0': True, 'pred_0_synth_msat_1': False, 'max0_eq_max1': True, 'i0_eq_i1': True, 'y0_eq_y1': True, 'max_0': 3, 'v_1': 0, 'y_1': 0, 'i_1': 0, 'v_0': 0, 'y_0': 0, 'i_0': 0}
Next concrete state {'y_1': 0, 'i_1': 1, 'h_1': 2, 'v_1': 0, 'max_1': 3, 'pc_0': 0, 'v_0': 0, 'y_0': 0, 'i_0': 0, 'h_0': 1, 'max_0': 3, 'pc_1': 0}
Writing an smt file to be run using mathsat
Checking output from mathsat 5
hi
paren_dict {39: 45, 35: 51, 27: 53, 20: 55, 9: 57, 7: 59, 81: 94, 114: 129, 108: 131, 102: 142, 150: 161, 144: 163, 96: 165, 76: 167, 61: 169, 1: 171}
aux_vars_first_occ_dict {'.def_355 ': 11}
aux_vars_dict {'.def_355 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) '}
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
aux_vars_subs_dict  {'.def_355 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) '}
{39: 45, 35: 51, 27: 53, 20: 55, 9: 57, 7: 59, 81: 94, 114: 129, 108: 131, 102: 142, 150: 161, 144: 163, 96: 165, 76: 167, 61: 169, 1: 171}
remove lets from formula
final_formula  ( and .def_355 ( or ( <= h_1 i_1 ) ( and ( and ( not ( <= max_1 h_1 ) ) .def_355 ) ( not ( = pc_1 1 ) ) ) ) ) 
[' ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( or ( <= h_1 i_1 ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( not ( = pc_1 1 ) ) ) ) ) ']
new_pred_smt_format ['(declare-rel pred_0_synth_msat_2 (Int Int Int Int Int Int))\n (rule (=>  ( <= (rel h 1) (rel i 1)  ) (pred_0_synth_msat_2 max h i y v pc)))', '(declare-rel pred_1_synth_msat_2 (Int Int Int Int Int Int))\n (rule (=>  ( < h i  ) (pred_1_synth_msat_2 max h i y v pc)))']
['(declare-rel pred_0_synth_msat_2 (Int Int Int Int Int Int))\n (rule (=>  ( <= (rel h 1) (rel i 1)  ) (pred_0_synth_msat_2 max h i y v pc)))', '(declare-rel pred_1_synth_msat_2 (Int Int Int Int Int Int))\n (rule (=>  ( < h i  ) (pred_1_synth_msat_2 max h i y v pc)))']
Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.103707 
Solver time:	8.710648
Total time:	8.814355
Iteration count:	36
Predicate count:	10
Successfully added new predicate to input file. !
Start next refinement loop: True



PDSC: Verifying ./Benchmarks_msat/sum-pc.smt2
Namespace(file='./Benchmarks_msat/sum-pc.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
i_eq_max_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pc_eq_1_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[1]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[1]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_0_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]

[
pc_eq_1_0, 
i_eq_max_0, 
pred_1_synth_msat_2_0, 
pc_eq_0_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[2]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


Counter-example trace:
[pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


134 SMT queries performed.
before complete_trace: [pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]


after complete_trace [pc_eq_0_0, 
pc_eq_0_1, 
y0_eq_y1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_1, ]
--->[1]

[pc_eq_0_0, 
pc_eq_1_1, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
y0_eq_y1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[1]

[pc_eq_0_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pc_eq_1_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[0]

[
i_eq_max_0, 
pred_1_synth_msat_2_0, 
i_eq_max_1, 
pred_1_synth_msat_2_1, 
i0_eq_i1, 
max0_eq_max1, 
pred_0_synth_msat_2, ]
--->[-1]


-----------------------------------check_spur-------------------------------
final init cond And(And(h_0 > 0,
        max_0 > h_0,
        i_0 == 0,
        pc_0 == If(h_0 <= i_0, 1, 0),
        y_0 == 0,
        v_0 == 0),
    And(h_1 > 0,
        max_1 > h_1,
        i_1 == 0,
        pc_1 == If(h_1 <= i_1, 1, 0),
        y_1 == 0,
        v_1 == 0),
    max_0 == max_1)
Initial concrete state  {'h_0': 1, 'max_1': 2, 'h_1': 1, 'pc_1': 0, 'pc_0': 0, 'pred_1_synth_msat_2_1': False, 'i_eq_max_1': False, 'pc_eq_1_1': False, 'pc_eq_0_1': True, 'pred_1_synth_msat_2_0': False, 'i_eq_max_0': False, 'pc_eq_1_0': False, 'pc_eq_0_0': True, 'pred_0_synth_msat_2': False, 'pred_0_synth_msat_1': True, 'max0_eq_max1': True, 'i0_eq_i1': True, 'y0_eq_y1': True, 'max_0': 2, 'v_1': 0, 'y_1': 0, 'i_1': 0, 'v_0': 0, 'y_0': 0, 'i_0': 0}
Next concrete state {'y_1': 0, 'i_1': 1, 'h_1': 1, 'v_1': 0, 'max_1': 2, 'pc_0': 0, 'v_0': 0, 'y_0': 0, 'i_0': 0, 'h_0': 1, 'max_0': 2, 'pc_1': 1}
Next concrete state {'y_1': 0, 'i_1': 1, 'h_1': 1, 'v_1': 1, 'max_1': 2, 'pc_0': 0, 'v_0': 0, 'y_0': 0, 'i_0': 0, 'h_0': 1, 'max_0': 2, 'pc_1': 2}
Next concrete state {'y_1': 0, 'i_1': 2, 'h_1': 1, 'v_1': 1, 'max_1': 2, 'pc_0': 0, 'v_0': 0, 'y_0': 0, 'i_0': 0, 'h_0': 1, 'max_0': 2, 'pc_1': 3}
Writing an smt file to be run using mathsat
Checking output from mathsat 5
hi
paren_dict {25: 40, 19: 42, 9: 44, 7: 46, 66: 79, 56: 81, 54: 83, 103: 113, 93: 115, 91: 117, 137: 153, 127: 155, 125: 157, 197: 203, 193: 209, 185: 211, 178: 213, 167: 215, 165: 217, 238: 261, 227: 263, 225: 265, 292: 303, 286: 305, 275: 307, 273: 309, 349: 355, 345: 361, 337: 363, 330: 365, 319: 367, 317: 369, 396: 406, 390: 408, 379: 410, 377: 412, 433: 446, 422: 448, 420: 450, 471: 484, 460: 486, 458: 488, 515: 539, 564: 570, 560: 576, 552: 578, 547: 582, 603: 609, 599: 615, 591: 617, 584: 619, 541: 621, 509: 623, 498: 625, 496: 627, 675: 686, 688: 702, 669: 704, 663: 706, 648: 708, 637: 710, 635: 712, 792: 814, 777: 816, 762: 818, 747: 820, 733: 822, 722: 824, 720: 826, 905: 917, 891: 919, 948: 959, 942: 961, 984: 1008, 1052: 1063, 1046: 1065, 1094: 1100, 1090: 1106, 1080: 1108, 1073: 1110, 1133: 1157, 1227: 1237, 1243: 1249, 1239: 1255, 1223: 1257, 1216: 1259, 1201: 1261, 1186: 1263, 1289: 1299, 1305: 1311, 1301: 1317, 1285: 1319, 1280: 1323, 1265: 1325, 1180: 1327, 1165: 1329, 1346: 1369, 1331: 1371, 1159: 1373, 1127: 1375, 1112: 1377, 1067: 1379, 1040: 1381, 1025: 1383, 1010: 1385, 978: 1387, 963: 1389, 936: 1391, 921: 1393, 885: 1395, 870: 1397, 857: 1399, 842: 1401, 828: 1403, 714: 1405, 629: 1407, 490: 1409, 452: 1411, 414: 1413, 371: 1415, 311: 1417, 267: 1419, 219: 1421, 159: 1423, 119: 1425, 85: 1427, 48: 1429, 1: 1431}
aux_vars_first_occ_dict {'.def_33 ': 11, '.def_37 ': 58, '.def_43 ': 95, '.def_44 ': 129, '.def_845 ': 169, '.def_846 ': 229, '.def_850 ': 277, '.def_857 ': 321, '.def_871 ': 381, '.def_882 ': 424, '.def_885 ': 462, '.def_897 ': 500, '.def_938 ': 639, '.def_942 ': 724}
aux_vars_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and .def_33 .def_845 ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and .def_882 .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and .def_845 ( not ( and ( = pc_1 2 ) ( not .def_37 ) ) ) ) ', '.def_942 ': '( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and .def_33 .def_43 ) ) ) ) ) '}
subs1 ( not ( <= max_1 h_1 ) ) 
remove lets from formula
subs2 ( not ( <= max_1 h_1 ) ) 
subs1 ( <= h_1 i_1 ) 
remove lets from formula
subs2 ( <= h_1 i_1 ) 
subs1 ( = v_1 0 ) 
remove lets from formula
subs2 ( = v_1 0 ) 
subs1 ( = max_0 max_1 ) 
remove lets from formula
subs2 ( = max_0 max_1 ) 
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( and .def_33 .def_845 ) 
remove lets from formula
subs2 ( and .def_33 .def_845 ) 
.def_33 
6
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) '}
.def_845 
31
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) .def_845 ) '}
subs1 ( not ( <= max_1 h_1 ) ) 
remove lets from formula
subs2 ( not ( <= max_1 h_1 ) ) 
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( not ( = pc_0 3 ) ) 
remove lets from formula
subs2 ( not ( = pc_0 3 ) ) 
subs1 ( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) 
subs1 ( not ( = v_0 1 ) ) 
remove lets from formula
subs2 ( not ( = v_0 1 ) ) 
subs1 ( <= y_1 y_0 ) 
remove lets from formula
subs2 ( <= y_1 y_0 ) 
subs1 ( <= y_0 y_1 ) 
remove lets from formula
subs2 ( <= y_0 y_1 ) 
subs1 ( and ( and .def_882 .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) 
remove lets from formula
subs2 ( and ( and .def_882 .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) 
.def_882 
12
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and .def_882 .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) '}
.def_885 
27
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) '}
subs1 ( <= y_1 y_0 ) 
remove lets from formula
subs2 ( <= y_1 y_0 ) 
subs1 ( <= y_0 y_1 ) 
remove lets from formula
subs2 ( <= y_0 y_1 ) 
subs1 ( and .def_845 ( not ( and ( = pc_1 2 ) ( not .def_37 ) ) ) ) 
remove lets from formula
subs2 ( and .def_845 ( not ( and ( = pc_1 2 ) ( not .def_37 ) ) ) ) 
.def_37 
46
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and .def_845 ( not ( and ( = pc_1 2 ) ( not .def_37 ) ) ) ) '}
.def_845 
6
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and .def_845 ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) '}
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( <= h_1 i_1 ) 
remove lets from formula
subs2 ( <= h_1 i_1 ) 
subs1 ( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and .def_33 .def_43 ) ) ) ) ) 
remove lets from formula
subs2 ( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and .def_33 .def_43 ) ) ) ) ) 
.def_33 
65
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) '}
.def_43 
90
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and ( not ( <= max_1 h_1 ) ) .def_43 ) ) ) ) ) '}
6
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and ( not ( <= max_1 h_1 ) ) .def_43 ) ) ) ) ) '}
.def_845 
54
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and .def_845 ( and .def_846 ( and .def_845 ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
24
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and .def_845 ( and .def_846 ( and .def_845 ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
.def_846 
67
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and .def_846 ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
subs1 ( = v_1 0 ) 
remove lets from formula
subs2 ( = v_1 0 ) 
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( and .def_33 .def_845 ) 
remove lets from formula
subs2 ( and .def_33 .def_845 ) 
.def_33 
6
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
.def_845 
31
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) .def_845 ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( not ( <= max_1 h_1 ) ) 
remove lets from formula
subs2 ( not ( <= max_1 h_1 ) ) 
subs1 ( = v_1 0 ) 
remove lets from formula
subs2 ( = v_1 0 ) 
subs1 ( not ( <= max_1 h_1 ) ) 
remove lets from formula
subs2 ( not ( <= max_1 h_1 ) ) 
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( <= h_1 i_1 ) 
remove lets from formula
subs2 ( <= h_1 i_1 ) 
subs1 ( and .def_33 .def_845 ) 
remove lets from formula
subs2 ( and .def_33 .def_845 ) 
.def_33 
6
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
.def_845 
31
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) .def_845 ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
subs1 ( = max_0 max_1 ) 
remove lets from formula
subs2 ( = max_0 max_1 ) 
subs1 ( not ( = pc_0 3 ) ) 
remove lets from formula
subs2 ( not ( = pc_0 3 ) ) 
subs1 ( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) 
subs1 ( not ( = pc_0 3 ) ) 
remove lets from formula
subs2 ( not ( = pc_0 3 ) ) 
subs1 ( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) 
subs1 ( and .def_845 ( not ( and ( = pc_1 2 ) ( not .def_37 ) ) ) ) 
remove lets from formula
subs2 ( and .def_845 ( not ( and ( = pc_1 2 ) ( not .def_37 ) ) ) ) 
.def_37 
46
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and .def_845 ( not ( and ( = pc_1 2 ) ( not .def_37 ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
.def_845 
6
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and .def_845 ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
subs1 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) 
subs1 ( not ( = v_0 1 ) ) 
remove lets from formula
subs2 ( not ( = v_0 1 ) ) 
subs1 ( and .def_845 ( not ( and ( = pc_1 2 ) ( not .def_37 ) ) ) ) 
remove lets from formula
subs2 ( and .def_845 ( not ( and ( = pc_1 2 ) ( not .def_37 ) ) ) ) 
.def_37 
46
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and .def_845 ( not ( and ( = pc_1 2 ) ( not .def_37 ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
.def_845 
6
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and .def_845 ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
subs1 ( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and .def_33 .def_43 ) ) ) ) ) 
remove lets from formula
subs2 ( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and .def_33 .def_43 ) ) ) ) ) 
.def_33 
65
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
.def_43 
90
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and ( not ( <= max_1 h_1 ) ) .def_43 ) ) ) ) ) '}
6
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and ( not ( <= max_1 h_1 ) ) .def_43 ) ) ) ) ) '}
.def_845 
54
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and .def_845 ( and .def_846 ( and .def_845 ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
24
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and .def_845 ( and .def_846 ( and .def_845 ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
.def_846 
67
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and .def_846 ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
subs1 ( and ( and .def_882 .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) 
remove lets from formula
subs2 ( and ( and .def_882 .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) 
.def_882 
12
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and .def_882 .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
.def_885 
27
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
subs1 ( and ( and .def_882 .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) 
remove lets from formula
subs2 ( and ( and .def_882 .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) 
.def_882 
12
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and .def_882 .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
.def_885 
27
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) .def_885 ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
subs1 ( <= y_1 y_0 ) 
remove lets from formula
subs2 ( <= y_1 y_0 ) 
subs1 ( <= y_0 y_1 ) 
remove lets from formula
subs2 ( <= y_0 y_1 ) 
subs1 ( not ( = v_0 1 ) ) 
remove lets from formula
subs2 ( not ( = v_0 1 ) ) 
subs1 ( = max_0 max_1 ) 
remove lets from formula
subs2 ( = max_0 max_1 ) 
subs1 ( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and .def_33 .def_43 ) ) ) ) ) 
remove lets from formula
subs2 ( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and .def_33 .def_43 ) ) ) ) ) 
.def_33 
65
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
.def_43 
90
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and ( not ( <= max_1 h_1 ) ) .def_43 ) ) ) ) ) '}
6
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and .def_43 ( and .def_845 ( and .def_846 ( and .def_845 ( and ( not ( <= max_1 h_1 ) ) .def_43 ) ) ) ) ) '}
.def_845 
54
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and .def_845 ( and .def_846 ( and .def_845 ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
24
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and .def_845 ( and .def_846 ( and .def_845 ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
.def_846 
67
aux_vars_subs_dict {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and .def_846 ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
aux_vars_subs_dict  {'.def_33 ': '( not ( <= max_1 h_1 ) ) ', '.def_37 ': '( <= h_1 i_1 ) ', '.def_43 ': '( = v_1 0 ) ', '.def_44 ': '( = max_0 max_1 ) ', '.def_845 ': '( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ', '.def_846 ': '( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ', '.def_850 ': '( not ( = pc_0 3 ) ) ', '.def_857 ': '( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ', '.def_871 ': '( not ( = v_0 1 ) ) ', '.def_882 ': '( <= y_1 y_0 ) ', '.def_885 ': '( <= y_0 y_1 ) ', '.def_897 ': '( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ', '.def_938 ': '( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ', '.def_942 ': '( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) '}
{25: 40, 19: 42, 9: 44, 7: 46, 66: 79, 56: 81, 54: 83, 103: 113, 93: 115, 91: 117, 137: 153, 127: 155, 125: 157, 197: 203, 193: 209, 185: 211, 178: 213, 167: 215, 165: 217, 238: 261, 227: 263, 225: 265, 292: 303, 286: 305, 275: 307, 273: 309, 349: 355, 345: 361, 337: 363, 330: 365, 319: 367, 317: 369, 396: 406, 390: 408, 379: 410, 377: 412, 433: 446, 422: 448, 420: 450, 471: 484, 460: 486, 458: 488, 515: 539, 564: 570, 560: 576, 552: 578, 547: 582, 603: 609, 599: 615, 591: 617, 584: 619, 541: 621, 509: 623, 498: 625, 496: 627, 675: 686, 688: 702, 669: 704, 663: 706, 648: 708, 637: 710, 635: 712, 792: 814, 777: 816, 762: 818, 747: 820, 733: 822, 722: 824, 720: 826, 905: 917, 891: 919, 948: 959, 942: 961, 984: 1008, 1052: 1063, 1046: 1065, 1094: 1100, 1090: 1106, 1080: 1108, 1073: 1110, 1133: 1157, 1227: 1237, 1243: 1249, 1239: 1255, 1223: 1257, 1216: 1259, 1201: 1261, 1186: 1263, 1289: 1299, 1305: 1311, 1301: 1317, 1285: 1319, 1280: 1323, 1265: 1325, 1180: 1327, 1165: 1329, 1346: 1369, 1331: 1371, 1159: 1373, 1127: 1375, 1112: 1377, 1067: 1379, 1040: 1381, 1025: 1383, 1010: 1385, 978: 1387, 963: 1389, 936: 1391, 921: 1393, 885: 1395, 870: 1397, 857: 1399, 842: 1401, 828: 1403, 714: 1405, 629: 1407, 490: 1409, 452: 1411, 414: 1413, 371: 1415, 311: 1417, 267: 1419, 219: 1421, 159: 1423, 119: 1425, 85: 1427, 48: 1429, 1: 1431}
{20: 33, 10: 35, 8: 37, 57: 67, 47: 69, 45: 71, 91: 107, 81: 109, 79: 111, 151: 157, 147: 163, 139: 165, 132: 167, 121: 169, 119: 171, 192: 215, 181: 217, 179: 219, 246: 257, 240: 259, 229: 261, 227: 263, 303: 309, 299: 315, 291: 317, 284: 319, 273: 321, 271: 323, 350: 360, 344: 362, 333: 364, 331: 366, 387: 400, 376: 402, 374: 404, 425: 438, 414: 440, 412: 442, 469: 493, 518: 524, 514: 530, 506: 532, 501: 536, 557: 563, 553: 569, 545: 571, 538: 573, 495: 575, 463: 577, 452: 579, 450: 581, 629: 640, 642: 656, 623: 658, 617: 660, 602: 662, 591: 664, 589: 666, 746: 768, 731: 770, 716: 772, 701: 774, 687: 776, 676: 778, 674: 780, 859: 871, 845: 873, 902: 913, 896: 915, 938: 962, 1006: 1017, 1000: 1019, 1048: 1054, 1044: 1060, 1034: 1062, 1027: 1064, 1087: 1111, 1181: 1191, 1197: 1203, 1193: 1209, 1177: 1211, 1170: 1213, 1155: 1215, 1140: 1217, 1243: 1253, 1259: 1265, 1255: 1271, 1239: 1273, 1234: 1277, 1219: 1279, 1134: 1281, 1119: 1283, 1300: 1323, 1285: 1325, 1113: 1327, 1081: 1329, 1066: 1331, 1021: 1333, 994: 1335, 979: 1337, 964: 1339, 932: 1341, 917: 1343, 890: 1345, 875: 1347, 839: 1349, 824: 1351, 811: 1353, 796: 1355, 782: 1357, 668: 1359, 583: 1361, 444: 1363, 406: 1365, 368: 1367, 325: 1369, 265: 1371, 221: 1373, 173: 1375, 113: 1377, 73: 1379, 39: 1381, 2: 1383}
{21: 31, 11: 33, 9: 35, 55: 71, 45: 73, 43: 75, 115: 121, 111: 127, 103: 129, 96: 131, 85: 133, 83: 135, 156: 179, 145: 181, 143: 183, 210: 221, 204: 223, 193: 225, 191: 227, 267: 273, 263: 279, 255: 281, 248: 283, 237: 285, 235: 287, 314: 324, 308: 326, 297: 328, 295: 330, 351: 364, 340: 366, 338: 368, 389: 402, 378: 404, 376: 406, 433: 457, 482: 488, 478: 494, 470: 496, 465: 500, 521: 527, 517: 533, 509: 535, 502: 537, 459: 539, 427: 541, 416: 543, 414: 545, 593: 604, 606: 620, 587: 622, 581: 624, 566: 626, 555: 628, 553: 630, 710: 732, 695: 734, 680: 736, 665: 738, 651: 740, 640: 742, 638: 744, 823: 835, 809: 837, 866: 877, 860: 879, 902: 926, 970: 981, 964: 983, 1012: 1018, 1008: 1024, 998: 1026, 991: 1028, 1051: 1075, 1145: 1155, 1161: 1167, 1157: 1173, 1141: 1175, 1134: 1177, 1119: 1179, 1104: 1181, 1207: 1217, 1223: 1229, 1219: 1235, 1203: 1237, 1198: 1241, 1183: 1243, 1098: 1245, 1083: 1247, 1264: 1287, 1249: 1289, 1077: 1291, 1045: 1293, 1030: 1295, 985: 1297, 958: 1299, 943: 1301, 928: 1303, 896: 1305, 881: 1307, 854: 1309, 839: 1311, 803: 1313, 788: 1315, 775: 1317, 760: 1319, 746: 1321, 632: 1323, 547: 1325, 408: 1327, 370: 1329, 332: 1331, 289: 1333, 229: 1335, 185: 1337, 137: 1339, 77: 1341, 37: 1343, 3: 1345}
{22: 38, 12: 40, 10: 42, 82: 88, 78: 94, 70: 96, 63: 98, 52: 100, 50: 102, 123: 146, 112: 148, 110: 150, 177: 188, 171: 190, 160: 192, 158: 194, 234: 240, 230: 246, 222: 248, 215: 250, 204: 252, 202: 254, 281: 291, 275: 293, 264: 295, 262: 297, 318: 331, 307: 333, 305: 335, 356: 369, 345: 371, 343: 373, 400: 424, 449: 455, 445: 461, 437: 463, 432: 467, 488: 494, 484: 500, 476: 502, 469: 504, 426: 506, 394: 508, 383: 510, 381: 512, 560: 571, 573: 587, 554: 589, 548: 591, 533: 593, 522: 595, 520: 597, 677: 699, 662: 701, 647: 703, 632: 705, 618: 707, 607: 709, 605: 711, 790: 802, 776: 804, 833: 844, 827: 846, 869: 893, 937: 948, 931: 950, 979: 985, 975: 991, 965: 993, 958: 995, 1018: 1042, 1112: 1122, 1128: 1134, 1124: 1140, 1108: 1142, 1101: 1144, 1086: 1146, 1071: 1148, 1174: 1184, 1190: 1196, 1186: 1202, 1170: 1204, 1165: 1208, 1150: 1210, 1065: 1212, 1050: 1214, 1231: 1254, 1216: 1256, 1044: 1258, 1012: 1260, 997: 1262, 952: 1264, 925: 1266, 910: 1268, 895: 1270, 863: 1272, 848: 1274, 821: 1276, 806: 1278, 770: 1280, 755: 1282, 742: 1284, 727: 1286, 713: 1288, 599: 1290, 514: 1292, 375: 1294, 337: 1296, 299: 1298, 256: 1300, 196: 1302, 152: 1304, 104: 1306, 44: 1308, 4: 1310}
{43: 49, 39: 55, 31: 57, 24: 59, 13: 61, 11: 63, 84: 107, 73: 109, 71: 111, 138: 149, 132: 151, 121: 153, 119: 155, 195: 201, 191: 207, 183: 209, 176: 211, 165: 213, 163: 215, 242: 252, 236: 254, 225: 256, 223: 258, 279: 292, 268: 294, 266: 296, 317: 330, 306: 332, 304: 334, 361: 385, 410: 416, 406: 422, 398: 424, 393: 428, 449: 455, 445: 461, 437: 463, 430: 465, 387: 467, 355: 469, 344: 471, 342: 473, 521: 532, 534: 548, 515: 550, 509: 552, 494: 554, 483: 556, 481: 558, 638: 660, 623: 662, 608: 664, 593: 666, 579: 668, 568: 670, 566: 672, 751: 763, 737: 765, 794: 805, 788: 807, 830: 854, 898: 909, 892: 911, 940: 946, 936: 952, 926: 954, 919: 956, 979: 1003, 1073: 1083, 1089: 1095, 1085: 1101, 1069: 1103, 1062: 1105, 1047: 1107, 1032: 1109, 1135: 1145, 1151: 1157, 1147: 1163, 1131: 1165, 1126: 1169, 1111: 1171, 1026: 1173, 1011: 1175, 1192: 1215, 1177: 1217, 1005: 1219, 973: 1221, 958: 1223, 913: 1225, 886: 1227, 871: 1229, 856: 1231, 824: 1233, 809: 1235, 782: 1237, 767: 1239, 731: 1241, 716: 1243, 703: 1245, 688: 1247, 674: 1249, 560: 1251, 475: 1253, 336: 1255, 298: 1257, 260: 1259, 217: 1261, 157: 1263, 113: 1265, 65: 1267, 5: 1269}
{25: 48, 14: 50, 12: 52, 79: 90, 73: 92, 62: 94, 60: 96, 136: 142, 132: 148, 124: 150, 117: 152, 106: 154, 104: 156, 183: 193, 177: 195, 166: 197, 164: 199, 220: 233, 209: 235, 207: 237, 258: 271, 247: 273, 245: 275, 302: 326, 351: 357, 347: 363, 339: 365, 334: 369, 390: 396, 386: 402, 378: 404, 371: 406, 328: 408, 296: 410, 285: 412, 283: 414, 462: 473, 475: 489, 456: 491, 450: 493, 435: 495, 424: 497, 422: 499, 579: 601, 564: 603, 549: 605, 534: 607, 520: 609, 509: 611, 507: 613, 692: 704, 678: 706, 735: 746, 729: 748, 771: 795, 839: 850, 833: 852, 881: 887, 877: 893, 867: 895, 860: 897, 920: 944, 1014: 1024, 1030: 1036, 1026: 1042, 1010: 1044, 1003: 1046, 988: 1048, 973: 1050, 1076: 1086, 1092: 1098, 1088: 1104, 1072: 1106, 1067: 1110, 1052: 1112, 967: 1114, 952: 1116, 1133: 1156, 1118: 1158, 946: 1160, 914: 1162, 899: 1164, 854: 1166, 827: 1168, 812: 1170, 797: 1172, 765: 1174, 750: 1176, 723: 1178, 708: 1180, 672: 1182, 657: 1184, 644: 1186, 629: 1188, 615: 1190, 501: 1192, 416: 1194, 277: 1196, 239: 1198, 201: 1200, 158: 1202, 98: 1204, 54: 1206, 6: 1208}
{32: 43, 26: 45, 15: 47, 13: 49, 89: 95, 85: 101, 77: 103, 70: 105, 59: 107, 57: 109, 136: 146, 130: 148, 119: 150, 117: 152, 173: 186, 162: 188, 160: 190, 211: 224, 200: 226, 198: 228, 255: 279, 304: 310, 300: 316, 292: 318, 287: 322, 343: 349, 339: 355, 331: 357, 324: 359, 281: 361, 249: 363, 238: 365, 236: 367, 415: 426, 428: 442, 409: 444, 403: 446, 388: 448, 377: 450, 375: 452, 532: 554, 517: 556, 502: 558, 487: 560, 473: 562, 462: 564, 460: 566, 645: 657, 631: 659, 688: 699, 682: 701, 724: 748, 792: 803, 786: 805, 834: 840, 830: 846, 820: 848, 813: 850, 873: 897, 967: 977, 983: 989, 979: 995, 963: 997, 956: 999, 941: 1001, 926: 1003, 1029: 1039, 1045: 1051, 1041: 1057, 1025: 1059, 1020: 1063, 1005: 1065, 920: 1067, 905: 1069, 1086: 1109, 1071: 1111, 899: 1113, 867: 1115, 852: 1117, 807: 1119, 780: 1121, 765: 1123, 750: 1125, 718: 1127, 703: 1129, 676: 1131, 661: 1133, 625: 1135, 610: 1137, 597: 1139, 582: 1141, 568: 1143, 454: 1145, 369: 1147, 230: 1149, 192: 1151, 154: 1153, 111: 1155, 51: 1157, 7: 1159}
{46: 52, 42: 58, 34: 60, 27: 62, 16: 64, 14: 66, 93: 103, 87: 105, 76: 107, 74: 109, 130: 143, 119: 145, 117: 147, 168: 181, 157: 183, 155: 185, 212: 236, 261: 267, 257: 273, 249: 275, 244: 279, 300: 306, 296: 312, 288: 314, 281: 316, 238: 318, 206: 320, 195: 322, 193: 324, 372: 383, 385: 399, 366: 401, 360: 403, 345: 405, 334: 407, 332: 409, 489: 511, 474: 513, 459: 515, 444: 517, 430: 519, 419: 521, 417: 523, 602: 614, 588: 616, 645: 656, 639: 658, 681: 705, 749: 760, 743: 762, 791: 797, 787: 803, 777: 805, 770: 807, 830: 854, 924: 934, 940: 946, 936: 952, 920: 954, 913: 956, 898: 958, 883: 960, 986: 996, 1002: 1008, 998: 1014, 982: 1016, 977: 1020, 962: 1022, 877: 1024, 862: 1026, 1043: 1066, 1028: 1068, 856: 1070, 824: 1072, 809: 1074, 764: 1076, 737: 1078, 722: 1080, 707: 1082, 675: 1084, 660: 1086, 633: 1088, 618: 1090, 582: 1092, 567: 1094, 554: 1096, 539: 1098, 525: 1100, 411: 1102, 326: 1104, 187: 1106, 149: 1108, 111: 1110, 68: 1112, 8: 1114}
{34: 44, 28: 46, 17: 48, 15: 50, 71: 84, 60: 86, 58: 88, 109: 122, 98: 124, 96: 126, 153: 177, 202: 208, 198: 214, 190: 216, 185: 220, 241: 247, 237: 253, 229: 255, 222: 257, 179: 259, 147: 261, 136: 263, 134: 265, 313: 324, 326: 340, 307: 342, 301: 344, 286: 346, 275: 348, 273: 350, 430: 452, 415: 454, 400: 456, 385: 458, 371: 460, 360: 462, 358: 464, 543: 555, 529: 557, 586: 597, 580: 599, 622: 646, 690: 701, 684: 703, 732: 738, 728: 744, 718: 746, 711: 748, 771: 795, 865: 875, 881: 887, 877: 893, 861: 895, 854: 897, 839: 899, 824: 901, 927: 937, 943: 949, 939: 955, 923: 957, 918: 961, 903: 963, 818: 965, 803: 967, 984: 1007, 969: 1009, 797: 1011, 765: 1013, 750: 1015, 705: 1017, 678: 1019, 663: 1021, 648: 1023, 616: 1025, 601: 1027, 574: 1029, 559: 1031, 523: 1033, 508: 1035, 495: 1037, 480: 1039, 466: 1041, 352: 1043, 267: 1045, 128: 1047, 90: 1049, 52: 1051, 9: 1053}
{29: 42, 18: 44, 16: 46, 67: 80, 56: 82, 54: 84, 111: 135, 160: 166, 156: 172, 148: 174, 143: 178, 199: 205, 195: 211, 187: 213, 180: 215, 137: 217, 105: 219, 94: 221, 92: 223, 271: 282, 284: 298, 265: 300, 259: 302, 244: 304, 233: 306, 231: 308, 388: 410, 373: 412, 358: 414, 343: 416, 329: 418, 318: 420, 316: 422, 501: 513, 487: 515, 544: 555, 538: 557, 580: 604, 648: 659, 642: 661, 690: 696, 686: 702, 676: 704, 669: 706, 729: 753, 823: 833, 839: 845, 835: 851, 819: 853, 812: 855, 797: 857, 782: 859, 885: 895, 901: 907, 897: 913, 881: 915, 876: 919, 861: 921, 776: 923, 761: 925, 942: 965, 927: 967, 755: 969, 723: 971, 708: 973, 663: 975, 636: 977, 621: 979, 606: 981, 574: 983, 559: 985, 532: 987, 517: 989, 481: 991, 466: 993, 453: 995, 438: 997, 424: 999, 310: 1001, 225: 1003, 86: 1005, 48: 1007, 10: 1009}
{30: 43, 19: 45, 17: 47, 74: 98, 123: 129, 119: 135, 111: 137, 106: 141, 162: 168, 158: 174, 150: 176, 143: 178, 100: 180, 68: 182, 57: 184, 55: 186, 234: 245, 247: 261, 228: 263, 222: 265, 207: 267, 196: 269, 194: 271, 351: 373, 336: 375, 321: 377, 306: 379, 292: 381, 281: 383, 279: 385, 464: 476, 450: 478, 507: 518, 501: 520, 543: 567, 611: 622, 605: 624, 653: 659, 649: 665, 639: 667, 632: 669, 692: 716, 786: 796, 802: 808, 798: 814, 782: 816, 775: 818, 760: 820, 745: 822, 848: 858, 864: 870, 860: 876, 844: 878, 839: 882, 824: 884, 739: 886, 724: 888, 905: 928, 890: 930, 718: 932, 686: 934, 671: 936, 626: 938, 599: 940, 584: 942, 569: 944, 537: 946, 522: 948, 495: 950, 480: 952, 444: 954, 429: 956, 416: 958, 401: 960, 387: 962, 273: 964, 188: 966, 49: 968, 11: 970}
{37: 61, 86: 92, 82: 98, 74: 100, 69: 104, 125: 131, 121: 137, 113: 139, 106: 141, 63: 143, 31: 145, 20: 147, 18: 149, 197: 208, 210: 224, 191: 226, 185: 228, 170: 230, 159: 232, 157: 234, 314: 336, 299: 338, 284: 340, 269: 342, 255: 344, 244: 346, 242: 348, 427: 439, 413: 441, 470: 481, 464: 483, 506: 530, 574: 585, 568: 587, 616: 622, 612: 628, 602: 630, 595: 632, 655: 679, 749: 759, 765: 771, 761: 777, 745: 779, 738: 781, 723: 783, 708: 785, 811: 821, 827: 833, 823: 839, 807: 841, 802: 845, 787: 847, 702: 849, 687: 851, 868: 891, 853: 893, 681: 895, 649: 897, 634: 899, 589: 901, 562: 903, 547: 905, 532: 907, 500: 909, 485: 911, 458: 913, 443: 915, 407: 917, 392: 919, 379: 921, 364: 923, 350: 925, 236: 927, 151: 929, 12: 931}
{59: 70, 72: 86, 53: 88, 47: 90, 32: 92, 21: 94, 19: 96, 176: 198, 161: 200, 146: 202, 131: 204, 117: 206, 106: 208, 104: 210, 289: 301, 275: 303, 332: 343, 326: 345, 368: 392, 436: 447, 430: 449, 478: 484, 474: 490, 464: 492, 457: 494, 517: 541, 611: 621, 627: 633, 623: 639, 607: 641, 600: 643, 585: 645, 570: 647, 673: 683, 689: 695, 685: 701, 669: 703, 664: 707, 649: 709, 564: 711, 549: 713, 730: 753, 715: 755, 543: 757, 511: 759, 496: 761, 451: 763, 424: 765, 409: 767, 394: 769, 362: 771, 347: 773, 320: 775, 305: 777, 269: 779, 254: 781, 241: 783, 226: 785, 212: 787, 98: 789, 13: 791}
{92: 114, 77: 116, 62: 118, 47: 120, 33: 122, 22: 124, 20: 126, 205: 217, 191: 219, 248: 259, 242: 261, 284: 308, 352: 363, 346: 365, 394: 400, 390: 406, 380: 408, 373: 410, 433: 457, 527: 537, 543: 549, 539: 555, 523: 557, 516: 559, 501: 561, 486: 563, 589: 599, 605: 611, 601: 617, 585: 619, 580: 623, 565: 625, 480: 627, 465: 629, 646: 669, 631: 671, 459: 673, 427: 675, 412: 677, 367: 679, 340: 681, 325: 683, 310: 685, 278: 687, 263: 689, 236: 691, 221: 693, 185: 695, 170: 697, 157: 699, 142: 701, 128: 703, 14: 705}
remove lets from formula
final_formula  ( and .def_33 ( and .def_845 ( or .def_37 ( and .def_846 ( and ( and .def_44 ( = i_0 i_1 ) ) ( and .def_850 ( and ( not ( = pc_1 3 ) ) ( and .def_857 ( and ( and .def_850 .def_857 ) ( and .def_938 ( and .def_845 ( and ( not ( = pc_0 2 ) ) ( and ( <= 2 ( + max_0 ( * ( - 1 ) i_0 ) ) ) ( and .def_871 ( and ( and .def_938 .def_942 ) ( and ( and .def_897 ( and ( and .def_897 ( and .def_882 ( <= 0 ( + ( * 2 y_0 ) ( * ( - 1 ) y_1 ) ) ) ) ) ( and .def_885 ( <= ( + ( * 2 y_0 ) ( * ( - 1 ) y_1 ) ) 0 ) ) ) ) ( and .def_871 ( and .def_44 .def_942 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
[' ( and ( not ( <= max_1 h_1 ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( or ( <= h_1 i_1 ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( and ( = max_0 max_1 ) ( = i_0 i_1 ) ) ( and ( not ( = pc_0 3 ) ) ( and ( not ( = pc_1 3 ) ) ( and ( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ( and ( and ( not ( = pc_0 3 ) ) ( <= 1 ( + h_0 ( * ( - 1 ) i_0 ) ) ) ) ( and ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( = pc_0 2 ) ) ( and ( <= 2 ( + max_0 ( * ( - 1 ) i_0 ) ) ) ( and ( not ( = v_0 1 ) ) ( and ( and ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( not ( and ( = pc_1 2 ) ( not ( <= h_1 i_1 ) ) ) ) ) ( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) ) ( and ( and ( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ( and ( and ( and ( and ( <= y_1 y_0 ) ( <= y_0 y_1 ) ) ( and ( <= ( + y_0 ( * ( - 2 ) y_1 ) ) 0 ) ( <= 0 ( + y_0 ( * ( - 2 ) y_1 ) ) ) ) ) ( and ( <= y_1 y_0 ) ( <= 0 ( + ( * 2 y_0 ) ( * ( - 1 ) y_1 ) ) ) ) ) ( and ( <= y_0 y_1 ) ( <= ( + ( * 2 y_0 ) ( * ( - 1 ) y_1 ) ) 0 ) ) ) ) ( and ( not ( = v_0 1 ) ) ( and ( = max_0 max_1 ) ( and ( = v_1 0 ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( and ( not ( <= max_1 h_1 ) ) ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ) ( and ( <= 1 ( + h_1 ( * ( - 1 ) i_1 ) ) ) ( and ( not ( <= max_1 h_1 ) ) ( = v_1 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ']
hi
paren_dict {26: 38, 20: 40, 9: 42, 7: 44, 85: 91, 81: 98, 72: 100, 65: 102, 54: 104, 52: 106, 133: 144, 127: 146, 116: 148, 114: 150, 177: 188, 171: 190, 160: 192, 158: 194, 234: 240, 230: 247, 221: 249, 216: 253, 204: 255, 202: 257, 299: 305, 295: 312, 286: 314, 279: 316, 267: 318, 265: 320, 348: 374, 382: 397, 399: 414, 376: 416, 342: 418, 330: 420, 328: 422, 498: 504, 494: 513, 485: 515, 517: 523, 480: 525, 465: 527, 541: 556, 558: 570, 535: 572, 529: 574, 459: 576, 444: 578, 432: 580, 430: 582, 596: 612, 590: 614, 652: 676, 702: 708, 698: 717, 689: 719, 721: 727, 684: 729, 743: 755, 737: 757, 787: 793, 783: 800, 772: 802, 765: 804, 915: 921, 911: 928, 902: 930, 897: 934, 881: 936, 865: 938, 976: 982, 972: 989, 963: 991, 956: 993, 940: 995, 859: 997, 843: 999, 1022: 1040, 1016: 1052, 1001: 1054, 837: 1056, 821: 1058, 806: 1060, 759: 1062, 731: 1064, 678: 1066, 646: 1068, 631: 1070, 616: 1072, 584: 1074, 424: 1076, 322: 1078, 259: 1080, 196: 1082, 152: 1084, 108: 1086, 46: 1088, 1: 1090}
aux_vars_first_occ_dict {'.def_967 ': 11, '.def_973 ': 56, '.def_989 ': 118, '.def_990 ': 162, '.def_1006 ': 206, '.def_1009 ': 269, '.def_1017 ': 332, '.def_1051 ': 434}
aux_vars_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and .def_1006 .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ', '.def_1051 ': '( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) '}
subs1 ( not ( = pcp_0 3 ) ) 
remove lets from formula
subs2 ( not ( = pcp_0 3 ) ) 
subs1 ( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) 
subs1 ( not ( = vp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = vp_0 1 ) ) 
subs1 ( not ( = vp_1 1 ) ) 
remove lets from formula
subs2 ( not ( = vp_1 1 ) ) 
subs1 ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) 
subs1 ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) 
subs1 ( and ( and .def_1006 .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) 
remove lets from formula
subs2 ( and ( and .def_1006 .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) 
.def_1006 
12
aux_vars_subs_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and .def_1006 .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) '}
.def_1009 
51
aux_vars_subs_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) '}
subs1 ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) 
subs1 ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) 
subs1 ( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) 
remove lets from formula
subs2 ( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) 
.def_990 
27
aux_vars_subs_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ', '.def_1051 ': '( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) '}
6
aux_vars_subs_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ', '.def_1051 ': '( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) '}
subs1 ( not ( = vp_1 1 ) ) 
remove lets from formula
subs2 ( not ( = vp_1 1 ) ) 
subs1 ( not ( = vp_1 1 ) ) 
remove lets from formula
subs2 ( not ( = vp_1 1 ) ) 
subs1 ( not ( = pcp_0 3 ) ) 
remove lets from formula
subs2 ( not ( = pcp_0 3 ) ) 
subs1 ( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) 
subs1 ( not ( = pcp_0 3 ) ) 
remove lets from formula
subs2 ( not ( = pcp_0 3 ) ) 
subs1 ( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) 
subs1 ( not ( = vp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = vp_0 1 ) ) 
subs1 ( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) 
remove lets from formula
subs2 ( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) 
.def_990 
27
aux_vars_subs_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ', '.def_1051 ': '( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) '}
6
aux_vars_subs_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ', '.def_1051 ': '( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) '}
subs1 ( and ( and .def_1006 .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) 
remove lets from formula
subs2 ( and ( and .def_1006 .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) 
.def_1006 
12
aux_vars_subs_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and .def_1006 .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ', '.def_1051 ': '( and ( not ( = vp_1 1 ) ) ( and ( and ( not ( = vp_1 1 ) ) ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) '}
.def_1009 
51
aux_vars_subs_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ', '.def_1051 ': '( and ( not ( = vp_1 1 ) ) ( and ( and ( not ( = vp_1 1 ) ) ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) '}
subs1 ( and ( and .def_1006 .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) 
remove lets from formula
subs2 ( and ( and .def_1006 .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) 
.def_1006 
12
aux_vars_subs_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and .def_1006 .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ', '.def_1051 ': '( and ( not ( = vp_1 1 ) ) ( and ( and ( not ( = vp_1 1 ) ) ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) '}
.def_1009 
51
aux_vars_subs_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) .def_1009 ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ', '.def_1051 ': '( and ( not ( = vp_1 1 ) ) ( and ( and ( not ( = vp_1 1 ) ) ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) '}
subs1 ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) 
subs1 ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) 
subs1 ( not ( = vp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = vp_0 1 ) ) 
subs1 ( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) 
remove lets from formula
subs2 ( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) 
.def_990 
27
aux_vars_subs_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ', '.def_1051 ': '( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) '}
6
aux_vars_subs_dict {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ', '.def_1051 ': '( and .def_990 ( and ( and .def_990 ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) '}
aux_vars_subs_dict  {'.def_967 ': '( not ( = pcp_0 3 ) ) ', '.def_973 ': '( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ', '.def_989 ': '( not ( = vp_0 1 ) ) ', '.def_990 ': '( not ( = vp_1 1 ) ) ', '.def_1006 ': '( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ', '.def_1009 ': '( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ', '.def_1017 ': '( and ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ', '.def_1051 ': '( and ( not ( = vp_1 1 ) ) ( and ( and ( not ( = vp_1 1 ) ) ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) '}
{26: 38, 20: 40, 9: 42, 7: 44, 85: 91, 81: 98, 72: 100, 65: 102, 54: 104, 52: 106, 133: 144, 127: 146, 116: 148, 114: 150, 177: 188, 171: 190, 160: 192, 158: 194, 234: 240, 230: 247, 221: 249, 216: 253, 204: 255, 202: 257, 299: 305, 295: 312, 286: 314, 279: 316, 267: 318, 265: 320, 348: 374, 382: 397, 399: 414, 376: 416, 342: 418, 330: 420, 328: 422, 498: 504, 494: 513, 485: 515, 517: 523, 480: 525, 465: 527, 541: 556, 558: 570, 535: 572, 529: 574, 459: 576, 444: 578, 432: 580, 430: 582, 596: 612, 590: 614, 652: 676, 702: 708, 698: 717, 689: 719, 721: 727, 684: 729, 743: 755, 737: 757, 787: 793, 783: 800, 772: 802, 765: 804, 915: 921, 911: 928, 902: 930, 897: 934, 881: 936, 865: 938, 976: 982, 972: 989, 963: 991, 956: 993, 940: 995, 859: 997, 843: 999, 1022: 1040, 1016: 1052, 1001: 1054, 837: 1056, 821: 1058, 806: 1060, 759: 1062, 731: 1064, 678: 1066, 646: 1068, 631: 1070, 616: 1072, 584: 1074, 424: 1076, 322: 1078, 259: 1080, 196: 1082, 152: 1084, 108: 1086, 46: 1088, 1: 1090}
{41: 47, 37: 54, 28: 56, 21: 58, 10: 60, 8: 62, 89: 100, 83: 102, 72: 104, 70: 106, 133: 144, 127: 146, 116: 148, 114: 150, 190: 196, 186: 203, 177: 205, 172: 209, 160: 211, 158: 213, 255: 261, 251: 268, 242: 270, 235: 272, 223: 274, 221: 276, 304: 330, 338: 353, 355: 370, 332: 372, 298: 374, 286: 376, 284: 378, 454: 460, 450: 469, 441: 471, 473: 479, 436: 481, 421: 483, 497: 512, 514: 526, 491: 528, 485: 530, 415: 532, 400: 534, 388: 536, 386: 538, 552: 568, 546: 570, 608: 632, 658: 664, 654: 673, 645: 675, 677: 683, 640: 685, 699: 711, 693: 713, 743: 749, 739: 756, 728: 758, 721: 760, 871: 877, 867: 884, 858: 886, 853: 890, 837: 892, 821: 894, 932: 938, 928: 945, 919: 947, 912: 949, 896: 951, 815: 953, 799: 955, 978: 996, 972: 1008, 957: 1010, 793: 1012, 777: 1014, 762: 1016, 715: 1018, 687: 1020, 634: 1022, 602: 1024, 587: 1026, 572: 1028, 540: 1030, 380: 1032, 278: 1034, 215: 1036, 152: 1038, 108: 1040, 64: 1042, 2: 1044}
{28: 39, 22: 41, 11: 43, 9: 45, 72: 83, 66: 85, 55: 87, 53: 89, 129: 135, 125: 142, 116: 144, 111: 148, 99: 150, 97: 152, 194: 200, 190: 207, 181: 209, 174: 211, 162: 213, 160: 215, 243: 269, 277: 292, 294: 309, 271: 311, 237: 313, 225: 315, 223: 317, 393: 399, 389: 408, 380: 410, 412: 418, 375: 420, 360: 422, 436: 451, 453: 465, 430: 467, 424: 469, 354: 471, 339: 473, 327: 475, 325: 477, 491: 507, 485: 509, 547: 571, 597: 603, 593: 612, 584: 614, 616: 622, 579: 624, 638: 650, 632: 652, 682: 688, 678: 695, 667: 697, 660: 699, 810: 816, 806: 823, 797: 825, 792: 829, 776: 831, 760: 833, 871: 877, 867: 884, 858: 886, 851: 888, 835: 890, 754: 892, 738: 894, 917: 935, 911: 947, 896: 949, 732: 951, 716: 953, 701: 955, 654: 957, 626: 959, 573: 961, 541: 963, 526: 965, 511: 967, 479: 969, 319: 971, 217: 973, 154: 975, 91: 977, 47: 979, 3: 981}
{29: 40, 23: 42, 12: 44, 10: 46, 86: 92, 82: 99, 73: 101, 68: 105, 56: 107, 54: 109, 151: 157, 147: 164, 138: 166, 131: 168, 119: 170, 117: 172, 200: 226, 234: 249, 251: 266, 228: 268, 194: 270, 182: 272, 180: 274, 350: 356, 346: 365, 337: 367, 369: 375, 332: 377, 317: 379, 393: 408, 410: 422, 387: 424, 381: 426, 311: 428, 296: 430, 284: 432, 282: 434, 448: 464, 442: 466, 504: 528, 554: 560, 550: 569, 541: 571, 573: 579, 536: 581, 595: 607, 589: 609, 639: 645, 635: 652, 624: 654, 617: 656, 767: 773, 763: 780, 754: 782, 749: 786, 733: 788, 717: 790, 828: 834, 824: 841, 815: 843, 808: 845, 792: 847, 711: 849, 695: 851, 874: 892, 868: 904, 853: 906, 689: 908, 673: 910, 658: 912, 611: 914, 583: 916, 530: 918, 498: 920, 483: 922, 468: 924, 436: 926, 276: 928, 174: 930, 111: 932, 48: 934, 4: 936}
{43: 49, 39: 56, 30: 58, 25: 62, 13: 64, 11: 66, 108: 114, 104: 121, 95: 123, 88: 125, 76: 127, 74: 129, 157: 183, 191: 206, 208: 223, 185: 225, 151: 227, 139: 229, 137: 231, 307: 313, 303: 322, 294: 324, 326: 332, 289: 334, 274: 336, 350: 365, 367: 379, 344: 381, 338: 383, 268: 385, 253: 387, 241: 389, 239: 391, 405: 421, 399: 423, 461: 485, 511: 517, 507: 526, 498: 528, 530: 536, 493: 538, 552: 564, 546: 566, 596: 602, 592: 609, 581: 611, 574: 613, 724: 730, 720: 737, 711: 739, 706: 743, 690: 745, 674: 747, 785: 791, 781: 798, 772: 800, 765: 802, 749: 804, 668: 806, 652: 808, 831: 849, 825: 861, 810: 863, 646: 865, 630: 867, 615: 869, 568: 871, 540: 873, 487: 875, 455: 877, 440: 879, 425: 881, 393: 883, 233: 885, 131: 887, 68: 889, 5: 891}
{46: 52, 42: 59, 33: 61, 26: 63, 14: 65, 12: 67, 95: 121, 129: 144, 146: 161, 123: 163, 89: 165, 77: 167, 75: 169, 245: 251, 241: 260, 232: 262, 264: 270, 227: 272, 212: 274, 288: 303, 305: 317, 282: 319, 276: 321, 206: 323, 191: 325, 179: 327, 177: 329, 343: 359, 337: 361, 399: 423, 449: 455, 445: 464, 436: 466, 468: 474, 431: 476, 490: 502, 484: 504, 534: 540, 530: 547, 519: 549, 512: 551, 662: 668, 658: 675, 649: 677, 644: 681, 628: 683, 612: 685, 723: 729, 719: 736, 710: 738, 703: 740, 687: 742, 606: 744, 590: 746, 769: 787, 763: 799, 748: 801, 584: 803, 568: 805, 553: 807, 506: 809, 478: 811, 425: 813, 393: 815, 378: 817, 363: 819, 331: 821, 171: 823, 69: 825, 6: 827}
{33: 59, 67: 82, 84: 99, 61: 101, 27: 103, 15: 105, 13: 107, 183: 189, 179: 198, 170: 200, 202: 208, 165: 210, 150: 212, 226: 241, 243: 255, 220: 257, 214: 259, 144: 261, 129: 263, 117: 265, 115: 267, 281: 297, 275: 299, 337: 361, 387: 393, 383: 402, 374: 404, 406: 412, 369: 414, 428: 440, 422: 442, 472: 478, 468: 485, 457: 487, 450: 489, 600: 606, 596: 613, 587: 615, 582: 619, 566: 621, 550: 623, 661: 667, 657: 674, 648: 676, 641: 678, 625: 680, 544: 682, 528: 684, 707: 725, 701: 737, 686: 739, 522: 741, 506: 743, 491: 745, 444: 747, 416: 749, 363: 751, 331: 753, 316: 755, 301: 757, 269: 759, 109: 761, 7: 763}
{82: 88, 78: 97, 69: 99, 101: 107, 64: 109, 49: 111, 125: 140, 142: 154, 119: 156, 113: 158, 43: 160, 28: 162, 16: 164, 14: 166, 180: 196, 174: 198, 236: 260, 286: 292, 282: 301, 273: 303, 305: 311, 268: 313, 327: 339, 321: 341, 371: 377, 367: 384, 356: 386, 349: 388, 499: 505, 495: 512, 486: 514, 481: 518, 465: 520, 449: 522, 560: 566, 556: 573, 547: 575, 540: 577, 524: 579, 443: 581, 427: 583, 606: 624, 600: 636, 585: 638, 421: 640, 405: 642, 390: 644, 343: 646, 315: 648, 262: 650, 230: 652, 215: 654, 200: 656, 168: 658, 8: 660}
remove lets from formula
final_formula  ( and ( not ( = maxp_0 ip_0 ) ) ( and .def_967 ( and .def_973 ( and ( and .def_967 .def_973 ) ( and ( <= ( + ip_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ( and ( not ( = pcp_0 2 ) ) ( and ( <= 2 ( + maxp_0 ( * ( - 1 ) ip_0 ) ) ) ( and .def_989 ( and .def_1051 ( and ( and .def_1017 ( and ( and .def_1017 ( and .def_1006 ( <= ( + yp_1 ( * ( - 4 ) yp_0 ) ) 0 ) ) ) ( and .def_1009 ( <= 0 ( + yp_1 ( * ( - 4 ) yp_0 ) ) ) ) ) ) ( and .def_989 ( and ( = maxp_1 maxp_0 ) .def_1051 ) ) ) ) ) ) ) ) ) ) ) ) 
[' ( and ( not ( = maxp_0 ip_0 ) ) ( and ( not ( = pcp_0 3 ) ) ( and ( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ( and ( and ( not ( = pcp_0 3 ) ) ( <= 1 ( + hp_0 ( * ( - 1 ) ip_0 ) ) ) ) ( and ( <= ( + ip_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ( and ( not ( = pcp_0 2 ) ) ( and ( <= 2 ( + maxp_0 ( * ( - 1 ) ip_0 ) ) ) ( and ( not ( = vp_0 1 ) ) ( and ( and ( not ( = vp_1 1 ) ) ( and ( and ( not ( = vp_1 1 ) ) ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) ( and ( and ( and ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ( and ( and ( and ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ) ( and ( <= yp_0 yp_1 ) ( <= yp_1 yp_0 ) ) ) ( and ( <= ( + yp_1 ( * ( - 2 ) yp_0 ) ) 0 ) ( <= ( + yp_1 ( * ( - 4 ) yp_0 ) ) 0 ) ) ) ( and ( <= 0 ( + yp_1 ( * ( - 2 ) yp_0 ) ) ) ( <= 0 ( + yp_1 ( * ( - 4 ) yp_0 ) ) ) ) ) ) ( and ( not ( = vp_0 1 ) ) ( and ( = maxp_1 maxp_0 ) ( and ( not ( = vp_1 1 ) ) ( and ( and ( not ( = vp_1 1 ) ) ( <= ( + hp_1 ( * ( - 1 ) maxp_1 ) ) ( - 1 ) ) ) ( not ( and ( <= hp_1 ip_1 ) ( = pcp_1 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ']
hi
paren_dict {20: 32, 9: 34, 7: 36, 64: 77, 58: 79, 46: 81, 44: 83, 126: 132, 122: 140, 112: 142, 105: 144, 93: 146, 91: 148, 176: 188, 170: 190, 158: 192, 156: 194, 222: 237, 258: 264, 254: 274, 244: 276, 278: 284, 239: 286, 216: 288, 204: 290, 202: 292, 333: 339, 329: 347, 319: 349, 314: 353, 302: 355, 300: 357, 400: 406, 396: 414, 386: 416, 379: 418, 367: 420, 365: 422, 450: 476, 484: 501, 503: 520, 478: 522, 444: 524, 432: 526, 430: 528, 550: 568, 538: 570, 536: 572, 586: 604, 580: 606, 646: 672, 686: 699, 680: 701, 732: 738, 728: 746, 716: 748, 709: 750, 862: 868, 858: 876, 848: 878, 843: 882, 827: 884, 811: 886, 925: 931, 921: 939, 911: 941, 904: 943, 888: 945, 805: 947, 789: 949, 1012: 1030, 1006: 1032, 1034: 1050, 1000: 1052, 985: 1054, 979: 1056, 1074: 1090, 1058: 1092, 973: 1094, 967: 1096, 951: 1098, 783: 1100, 768: 1102, 752: 1104, 703: 1106, 674: 1108, 640: 1110, 624: 1112, 608: 1114, 574: 1116, 530: 1118, 424: 1120, 359: 1122, 294: 1124, 196: 1126, 150: 1128, 85: 1130, 38: 1132, 1: 1134}
aux_vars_first_occ_dict {'.def_194 ': 11, '.def_1067 ': 48, '.def_1073 ': 95, '.def_1083 ': 160, '.def_1091 ': 206, '.def_1096 ': 304, '.def_1099 ': 369, '.def_1107 ': 434, '.def_1124 ': 540}
aux_vars_dict {'.def_194 ': '( = vpp_1 1 ) ', '.def_1067 ': '( not ( = pcpp_0 3 ) ) ', '.def_1073 ': '( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ', '.def_1083 ': '( not ( = vpp_0 1 ) ) ', '.def_1091 ': '( and ( not .def_194 ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) ', '.def_1096 ': '( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ', '.def_1099 ': '( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ', '.def_1107 ': '( and ( and .def_1096 .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) ', '.def_1124 ': '( = ipp_1 maxpp_0 ) '}
subs1 ( = vpp_1 1 ) 
remove lets from formula
subs2 ( = vpp_1 1 ) 
subs1 ( not ( = pcpp_0 3 ) ) 
remove lets from formula
subs2 ( not ( = pcpp_0 3 ) ) 
subs1 ( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) 
subs1 ( not ( = vpp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = vpp_0 1 ) ) 
subs1 ( and ( not .def_194 ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) 
remove lets from formula
subs2 ( and ( not .def_194 ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) 
.def_194 
12
aux_vars_subs_dict {'.def_194 ': '( = vpp_1 1 ) ', '.def_1067 ': '( not ( = pcpp_0 3 ) ) ', '.def_1073 ': '( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ', '.def_1083 ': '( not ( = vpp_0 1 ) ) '}
subs1 ( = vpp_1 1 ) 
remove lets from formula
subs2 ( = vpp_1 1 ) 
subs1 ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) 
subs1 ( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) 
subs1 ( and ( and .def_1096 .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) 
remove lets from formula
subs2 ( and ( and .def_1096 .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) 
.def_1096 
12
aux_vars_subs_dict {'.def_194 ': '( = vpp_1 1 ) ', '.def_1067 ': '( not ( = pcpp_0 3 ) ) ', '.def_1073 ': '( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ', '.def_1083 ': '( not ( = vpp_0 1 ) ) ', '.def_1091 ': '( and ( not ( = vpp_1 1 ) ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) ', '.def_1096 ': '( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ', '.def_1099 ': '( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ', '.def_1107 ': '( and ( and .def_1096 .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) '}
.def_1099 
53
aux_vars_subs_dict {'.def_194 ': '( = vpp_1 1 ) ', '.def_1067 ': '( not ( = pcpp_0 3 ) ) ', '.def_1073 ': '( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ', '.def_1083 ': '( not ( = vpp_0 1 ) ) ', '.def_1091 ': '( and ( not ( = vpp_1 1 ) ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) ', '.def_1096 ': '( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ', '.def_1099 ': '( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ', '.def_1107 ': '( and ( and ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) '}
subs1 ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) 
subs1 ( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) 
subs1 ( = ipp_1 maxpp_0 ) 
remove lets from formula
subs2 ( = ipp_1 maxpp_0 ) 
subs1 ( not ( = pcpp_0 3 ) ) 
remove lets from formula
subs2 ( not ( = pcpp_0 3 ) ) 
subs1 ( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) 
subs1 ( not ( = pcpp_0 3 ) ) 
remove lets from formula
subs2 ( not ( = pcpp_0 3 ) ) 
subs1 ( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) 
subs1 ( not ( = vpp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = vpp_0 1 ) ) 
subs1 ( and ( not .def_194 ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) 
remove lets from formula
subs2 ( and ( not .def_194 ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) 
.def_194 
12
aux_vars_subs_dict {'.def_194 ': '( = vpp_1 1 ) ', '.def_1067 ': '( not ( = pcpp_0 3 ) ) ', '.def_1073 ': '( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ', '.def_1083 ': '( not ( = vpp_0 1 ) ) ', '.def_1091 ': '( and ( not ( = vpp_1 1 ) ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) ', '.def_1096 ': '( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ', '.def_1099 ': '( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ', '.def_1107 ': '( and ( and ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) ', '.def_1124 ': '( = ipp_1 maxpp_0 ) '}
subs1 ( and ( and .def_1096 .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) 
remove lets from formula
subs2 ( and ( and .def_1096 .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) 
.def_1096 
12
aux_vars_subs_dict {'.def_194 ': '( = vpp_1 1 ) ', '.def_1067 ': '( not ( = pcpp_0 3 ) ) ', '.def_1073 ': '( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ', '.def_1083 ': '( not ( = vpp_0 1 ) ) ', '.def_1091 ': '( and ( not ( = vpp_1 1 ) ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) ', '.def_1096 ': '( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ', '.def_1099 ': '( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ', '.def_1107 ': '( and ( and .def_1096 .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) ', '.def_1124 ': '( = ipp_1 maxpp_0 ) '}
.def_1099 
53
aux_vars_subs_dict {'.def_194 ': '( = vpp_1 1 ) ', '.def_1067 ': '( not ( = pcpp_0 3 ) ) ', '.def_1073 ': '( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ', '.def_1083 ': '( not ( = vpp_0 1 ) ) ', '.def_1091 ': '( and ( not ( = vpp_1 1 ) ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) ', '.def_1096 ': '( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ', '.def_1099 ': '( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ', '.def_1107 ': '( and ( and ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) ', '.def_1124 ': '( = ipp_1 maxpp_0 ) '}
subs1 ( and ( and .def_1096 .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) 
remove lets from formula
subs2 ( and ( and .def_1096 .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) 
.def_1096 
12
aux_vars_subs_dict {'.def_194 ': '( = vpp_1 1 ) ', '.def_1067 ': '( not ( = pcpp_0 3 ) ) ', '.def_1073 ': '( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ', '.def_1083 ': '( not ( = vpp_0 1 ) ) ', '.def_1091 ': '( and ( not ( = vpp_1 1 ) ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) ', '.def_1096 ': '( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ', '.def_1099 ': '( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ', '.def_1107 ': '( and ( and .def_1096 .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) ', '.def_1124 ': '( = ipp_1 maxpp_0 ) '}
.def_1099 
53
aux_vars_subs_dict {'.def_194 ': '( = vpp_1 1 ) ', '.def_1067 ': '( not ( = pcpp_0 3 ) ) ', '.def_1073 ': '( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ', '.def_1083 ': '( not ( = vpp_0 1 ) ) ', '.def_1091 ': '( and ( not ( = vpp_1 1 ) ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) ', '.def_1096 ': '( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ', '.def_1099 ': '( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ', '.def_1107 ': '( and ( and ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) .def_1099 ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) ', '.def_1124 ': '( = ipp_1 maxpp_0 ) '}
subs1 ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) 
subs1 ( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) 
subs1 ( not ( = vpp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = vpp_0 1 ) ) 
subs1 ( = vpp_1 1 ) 
remove lets from formula
subs2 ( = vpp_1 1 ) 
subs1 ( = ipp_1 maxpp_0 ) 
remove lets from formula
subs2 ( = ipp_1 maxpp_0 ) 
subs1 ( = ipp_1 maxpp_0 ) 
remove lets from formula
subs2 ( = ipp_1 maxpp_0 ) 
subs1 ( and ( not .def_194 ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) 
remove lets from formula
subs2 ( and ( not .def_194 ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) 
.def_194 
12
aux_vars_subs_dict {'.def_194 ': '( = vpp_1 1 ) ', '.def_1067 ': '( not ( = pcpp_0 3 ) ) ', '.def_1073 ': '( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ', '.def_1083 ': '( not ( = vpp_0 1 ) ) ', '.def_1091 ': '( and ( not ( = vpp_1 1 ) ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) ', '.def_1096 ': '( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ', '.def_1099 ': '( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ', '.def_1107 ': '( and ( and ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) ', '.def_1124 ': '( = ipp_1 maxpp_0 ) '}
aux_vars_subs_dict  {'.def_194 ': '( = vpp_1 1 ) ', '.def_1067 ': '( not ( = pcpp_0 3 ) ) ', '.def_1073 ': '( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ', '.def_1083 ': '( not ( = vpp_0 1 ) ) ', '.def_1091 ': '( and ( not ( = vpp_1 1 ) ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) ', '.def_1096 ': '( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ', '.def_1099 ': '( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ', '.def_1107 ': '( and ( and ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) ', '.def_1124 ': '( = ipp_1 maxpp_0 ) '}
{20: 32, 9: 34, 7: 36, 64: 77, 58: 79, 46: 81, 44: 83, 126: 132, 122: 140, 112: 142, 105: 144, 93: 146, 91: 148, 176: 188, 170: 190, 158: 192, 156: 194, 222: 237, 258: 264, 254: 274, 244: 276, 278: 284, 239: 286, 216: 288, 204: 290, 202: 292, 333: 339, 329: 347, 319: 349, 314: 353, 302: 355, 300: 357, 400: 406, 396: 414, 386: 416, 379: 418, 367: 420, 365: 422, 450: 476, 484: 501, 503: 520, 478: 522, 444: 524, 432: 526, 430: 528, 550: 568, 538: 570, 536: 572, 586: 604, 580: 606, 646: 672, 686: 699, 680: 701, 732: 738, 728: 746, 716: 748, 709: 750, 862: 868, 858: 876, 848: 878, 843: 882, 827: 884, 811: 886, 925: 931, 921: 939, 911: 941, 904: 943, 888: 945, 805: 947, 789: 949, 1012: 1030, 1006: 1032, 1034: 1050, 1000: 1052, 985: 1054, 979: 1056, 1074: 1090, 1058: 1092, 973: 1094, 967: 1096, 951: 1098, 783: 1100, 768: 1102, 752: 1104, 703: 1106, 674: 1108, 640: 1110, 624: 1112, 608: 1114, 574: 1116, 530: 1118, 424: 1120, 359: 1122, 294: 1124, 196: 1126, 150: 1128, 85: 1130, 38: 1132, 1: 1134}
{28: 41, 22: 43, 10: 45, 8: 47, 90: 96, 86: 104, 76: 106, 69: 108, 57: 110, 55: 112, 140: 152, 134: 154, 122: 156, 120: 158, 186: 201, 222: 228, 218: 238, 208: 240, 242: 248, 203: 250, 180: 252, 168: 254, 166: 256, 297: 303, 293: 311, 283: 313, 278: 317, 266: 319, 264: 321, 364: 370, 360: 378, 350: 380, 343: 382, 331: 384, 329: 386, 414: 440, 448: 465, 467: 484, 442: 486, 408: 488, 396: 490, 394: 492, 514: 532, 502: 534, 500: 536, 550: 568, 544: 570, 610: 636, 650: 663, 644: 665, 696: 702, 692: 710, 680: 712, 673: 714, 826: 832, 822: 840, 812: 842, 807: 846, 791: 848, 775: 850, 889: 895, 885: 903, 875: 905, 868: 907, 852: 909, 769: 911, 753: 913, 976: 994, 970: 996, 998: 1014, 964: 1016, 949: 1018, 943: 1020, 1038: 1054, 1022: 1056, 937: 1058, 931: 1060, 915: 1062, 747: 1064, 732: 1066, 716: 1068, 667: 1070, 638: 1072, 604: 1074, 588: 1076, 572: 1078, 538: 1080, 494: 1082, 388: 1084, 323: 1086, 258: 1088, 160: 1090, 114: 1092, 49: 1094, 2: 1096}
{44: 50, 40: 58, 30: 60, 23: 62, 11: 64, 9: 66, 94: 106, 88: 108, 76: 110, 74: 112, 140: 155, 176: 182, 172: 192, 162: 194, 196: 202, 157: 204, 134: 206, 122: 208, 120: 210, 251: 257, 247: 265, 237: 267, 232: 271, 220: 273, 218: 275, 318: 324, 314: 332, 304: 334, 297: 336, 285: 338, 283: 340, 368: 394, 402: 419, 421: 438, 396: 440, 362: 442, 350: 444, 348: 446, 468: 486, 456: 488, 454: 490, 504: 522, 498: 524, 564: 590, 604: 617, 598: 619, 650: 656, 646: 664, 634: 666, 627: 668, 780: 786, 776: 794, 766: 796, 761: 800, 745: 802, 729: 804, 843: 849, 839: 857, 829: 859, 822: 861, 806: 863, 723: 865, 707: 867, 930: 948, 924: 950, 952: 968, 918: 970, 903: 972, 897: 974, 992: 1008, 976: 1010, 891: 1012, 885: 1014, 869: 1016, 701: 1018, 686: 1020, 670: 1022, 621: 1024, 592: 1026, 558: 1028, 542: 1030, 526: 1032, 492: 1034, 448: 1036, 342: 1038, 277: 1040, 212: 1042, 114: 1044, 68: 1046, 3: 1048}
{30: 42, 24: 44, 12: 46, 10: 48, 76: 91, 112: 118, 108: 128, 98: 130, 132: 138, 93: 140, 70: 142, 58: 144, 56: 146, 187: 193, 183: 201, 173: 203, 168: 207, 156: 209, 154: 211, 254: 260, 250: 268, 240: 270, 233: 272, 221: 274, 219: 276, 304: 330, 338: 355, 357: 374, 332: 376, 298: 378, 286: 380, 284: 382, 404: 422, 392: 424, 390: 426, 440: 458, 434: 460, 500: 526, 540: 553, 534: 555, 586: 592, 582: 600, 570: 602, 563: 604, 716: 722, 712: 730, 702: 732, 697: 736, 681: 738, 665: 740, 779: 785, 775: 793, 765: 795, 758: 797, 742: 799, 659: 801, 643: 803, 866: 884, 860: 886, 888: 904, 854: 906, 839: 908, 833: 910, 928: 944, 912: 946, 827: 948, 821: 950, 805: 952, 637: 954, 622: 956, 606: 958, 557: 960, 528: 962, 494: 964, 478: 966, 462: 968, 428: 970, 384: 972, 278: 974, 213: 976, 148: 978, 50: 980, 4: 982}
{31: 46, 67: 73, 63: 83, 53: 85, 87: 93, 48: 95, 25: 97, 13: 99, 11: 101, 142: 148, 138: 156, 128: 158, 123: 162, 111: 164, 109: 166, 209: 215, 205: 223, 195: 225, 188: 227, 176: 229, 174: 231, 259: 285, 293: 310, 312: 329, 287: 331, 253: 333, 241: 335, 239: 337, 359: 377, 347: 379, 345: 381, 395: 413, 389: 415, 455: 481, 495: 508, 489: 510, 541: 547, 537: 555, 525: 557, 518: 559, 671: 677, 667: 685, 657: 687, 652: 691, 636: 693, 620: 695, 734: 740, 730: 748, 720: 750, 713: 752, 697: 754, 614: 756, 598: 758, 821: 839, 815: 841, 843: 859, 809: 861, 794: 863, 788: 865, 883: 899, 867: 901, 782: 903, 776: 905, 760: 907, 592: 909, 577: 911, 561: 913, 512: 915, 483: 917, 449: 919, 433: 921, 417: 923, 383: 925, 339: 927, 233: 929, 168: 931, 103: 933, 5: 935}
{45: 51, 41: 59, 31: 61, 26: 65, 14: 67, 12: 69, 112: 118, 108: 126, 98: 128, 91: 130, 79: 132, 77: 134, 162: 188, 196: 213, 215: 232, 190: 234, 156: 236, 144: 238, 142: 240, 262: 280, 250: 282, 248: 284, 298: 316, 292: 318, 358: 384, 398: 411, 392: 413, 444: 450, 440: 458, 428: 460, 421: 462, 574: 580, 570: 588, 560: 590, 555: 594, 539: 596, 523: 598, 637: 643, 633: 651, 623: 653, 616: 655, 600: 657, 517: 659, 501: 661, 724: 742, 718: 744, 746: 762, 712: 764, 697: 766, 691: 768, 786: 802, 770: 804, 685: 806, 679: 808, 663: 810, 495: 812, 480: 814, 464: 816, 415: 818, 386: 820, 352: 822, 336: 824, 320: 826, 286: 828, 242: 830, 136: 832, 71: 834, 6: 836}
{48: 54, 44: 62, 34: 64, 27: 66, 15: 68, 13: 70, 98: 124, 132: 149, 151: 168, 126: 170, 92: 172, 80: 174, 78: 176, 198: 216, 186: 218, 184: 220, 234: 252, 228: 254, 294: 320, 334: 347, 328: 349, 380: 386, 376: 394, 364: 396, 357: 398, 510: 516, 506: 524, 496: 526, 491: 530, 475: 532, 459: 534, 573: 579, 569: 587, 559: 589, 552: 591, 536: 593, 453: 595, 437: 597, 660: 678, 654: 680, 682: 698, 648: 700, 633: 702, 627: 704, 722: 738, 706: 740, 621: 742, 615: 744, 599: 746, 431: 748, 416: 750, 400: 752, 351: 754, 322: 756, 288: 758, 272: 760, 256: 762, 222: 764, 178: 766, 72: 768, 7: 770}
{34: 60, 68: 85, 87: 104, 62: 106, 28: 108, 16: 110, 14: 112, 134: 152, 122: 154, 120: 156, 170: 188, 164: 190, 230: 256, 270: 283, 264: 285, 316: 322, 312: 330, 300: 332, 293: 334, 446: 452, 442: 460, 432: 462, 427: 466, 411: 468, 395: 470, 509: 515, 505: 523, 495: 525, 488: 527, 472: 529, 389: 531, 373: 533, 596: 614, 590: 616, 618: 634, 584: 636, 569: 638, 563: 640, 658: 674, 642: 676, 557: 678, 551: 680, 535: 682, 367: 684, 352: 686, 336: 688, 287: 690, 258: 692, 224: 694, 208: 696, 192: 698, 158: 700, 114: 702, 8: 704}
{29: 47, 17: 49, 15: 51, 65: 83, 59: 85, 125: 151, 165: 178, 159: 180, 211: 217, 207: 225, 195: 227, 188: 229, 341: 347, 337: 355, 327: 357, 322: 361, 306: 363, 290: 365, 404: 410, 400: 418, 390: 420, 383: 422, 367: 424, 284: 426, 268: 428, 491: 509, 485: 511, 513: 529, 479: 531, 464: 533, 458: 535, 553: 569, 537: 571, 452: 573, 446: 575, 430: 577, 262: 579, 247: 581, 231: 583, 182: 585, 153: 587, 119: 589, 103: 591, 87: 593, 53: 595, 9: 597}
remove lets from formula
final_formula  ( and ( not ( = maxpp_0 ipp_0 ) ) ( and .def_1067 ( and .def_1073 ( and ( and .def_1067 .def_1073 ) ( and ( not ( = pcpp_0 2 ) ) ( and ( <= 2 ( + maxpp_0 ( * ( - 1 ) ipp_0 ) ) ) ( and .def_1083 ( or .def_1091 ( and ( and .def_1107 ( and ( and .def_1107 ( and .def_1096 ( <= ( + ypp_1 ( * ( - 4 ) ypp_0 ) ) 0 ) ) ) ( and .def_1099 ( <= 0 ( + ypp_1 ( * ( - 4 ) ypp_0 ) ) ) ) ) ) ( and .def_1083 ( not ( and ( not ( and .def_194 ( and ( not ( = ipp_1 maxpp_1 ) ) ( not .def_1124 ) ) ) ) ( and .def_1124 ( not .def_1091 ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
[' ( and ( not ( = maxpp_0 ipp_0 ) ) ( and ( not ( = pcpp_0 3 ) ) ( and ( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ( and ( and ( not ( = pcpp_0 3 ) ) ( <= 1 ( + hpp_0 ( * ( - 1 ) ipp_0 ) ) ) ) ( and ( not ( = pcpp_0 2 ) ) ( and ( <= 2 ( + maxpp_0 ( * ( - 1 ) ipp_0 ) ) ) ( and ( not ( = vpp_0 1 ) ) ( or ( and ( not ( = vpp_1 1 ) ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) ( and ( and ( and ( and ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) ( and ( and ( and ( and ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ) ( and ( <= ypp_0 ypp_1 ) ( <= ypp_1 ypp_0 ) ) ) ( and ( <= ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) 0 ) ( <= ( + ypp_1 ( * ( - 4 ) ypp_0 ) ) 0 ) ) ) ( and ( <= 0 ( + ypp_1 ( * ( - 2 ) ypp_0 ) ) ) ( <= 0 ( + ypp_1 ( * ( - 4 ) ypp_0 ) ) ) ) ) ) ( and ( not ( = vpp_0 1 ) ) ( not ( and ( not ( and ( = vpp_1 1 ) ( and ( not ( = ipp_1 maxpp_1 ) ) ( not ( = ipp_1 maxpp_0 ) ) ) ) ) ( and ( = ipp_1 maxpp_0 ) ( not ( and ( not ( = vpp_1 1 ) ) ( <= ( + ipp_1 ( * ( - 1 ) maxpp_1 ) ) ( - 1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ']
hi
paren_dict {20: 40, 9: 42, 7: 44, 65: 78, 54: 80, 52: 82, 110: 124, 104: 126, 92: 128, 90: 130, 174: 180, 170: 189, 159: 191, 152: 193, 140: 195, 138: 197, 239: 245, 235: 254, 224: 256, 219: 260, 207: 262, 205: 264, 308: 314, 304: 323, 293: 325, 286: 327, 274: 329, 272: 331, 359: 385, 415: 421, 411: 430, 400: 432, 393: 434, 456: 462, 452: 471, 441: 473, 436: 477, 387: 479, 353: 481, 341: 483, 339: 485, 527: 533, 523: 542, 512: 544, 505: 546, 499: 548, 562: 576, 556: 578, 598: 618, 592: 620, 660: 686, 700: 714, 694: 716, 748: 754, 744: 763, 731: 765, 724: 767, 775: 790, 899: 905, 895: 914, 884: 916, 879: 920, 863: 922, 847: 924, 964: 970, 960: 979, 949: 981, 942: 983, 926: 985, 841: 987, 825: 989, 819: 991, 1022: 1042, 1007: 1044, 993: 1046, 813: 1048, 798: 1050, 792: 1052, 769: 1054, 718: 1056, 688: 1058, 654: 1060, 638: 1062, 622: 1064, 586: 1066, 580: 1068, 550: 1070, 493: 1072, 487: 1074, 333: 1076, 266: 1078, 199: 1080, 132: 1082, 84: 1084, 46: 1086, 1: 1088}
aux_vars_first_occ_dict {'.def_303 ': 11, '.def_400 ': 56, '.def_1164 ': 94, '.def_1170 ': 142, '.def_1184 ': 209, '.def_1189 ': 276, '.def_1198 ': 343}
aux_vars_dict {'.def_303 ': '( = ippp_1 maxppp_1 ) ', '.def_400 ': '( = vppp_0 1 ) ', '.def_1164 ': '( not ( = pcppp_0 3 ) ) ', '.def_1170 ': '( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) ', '.def_1184 ': '( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) ', '.def_1189 ': '( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) ', '.def_1198 ': '( and ( and .def_1184 .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) '}
subs1 ( = ippp_1 maxppp_1 ) 
remove lets from formula
subs2 ( = ippp_1 maxppp_1 ) 
subs1 ( = vppp_0 1 ) 
remove lets from formula
subs2 ( = vppp_0 1 ) 
subs1 ( not ( = pcppp_0 3 ) ) 
remove lets from formula
subs2 ( not ( = pcppp_0 3 ) ) 
subs1 ( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) 
subs1 ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) 
subs1 ( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) 
subs1 ( and ( and .def_1184 .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) 
remove lets from formula
subs2 ( and ( and .def_1184 .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) 
.def_1184 
12
aux_vars_subs_dict {'.def_303 ': '( = ippp_1 maxppp_1 ) ', '.def_400 ': '( = vppp_0 1 ) ', '.def_1164 ': '( not ( = pcppp_0 3 ) ) ', '.def_1170 ': '( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) ', '.def_1184 ': '( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) ', '.def_1189 ': '( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) ', '.def_1198 ': '( and ( and .def_1184 .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) '}
.def_1189 
55
aux_vars_subs_dict {'.def_303 ': '( = ippp_1 maxppp_1 ) ', '.def_400 ': '( = vppp_0 1 ) ', '.def_1164 ': '( not ( = pcppp_0 3 ) ) ', '.def_1170 ': '( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) ', '.def_1184 ': '( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) ', '.def_1189 ': '( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) ', '.def_1198 ': '( and ( and ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) '}
subs1 ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) 
subs1 ( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) 
subs1 ( not ( = pcppp_0 3 ) ) 
remove lets from formula
subs2 ( not ( = pcppp_0 3 ) ) 
subs1 ( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) 
subs1 ( not ( = pcppp_0 3 ) ) 
remove lets from formula
subs2 ( not ( = pcppp_0 3 ) ) 
subs1 ( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) 
remove lets from formula
subs2 ( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) 
subs1 ( = vppp_0 1 ) 
remove lets from formula
subs2 ( = vppp_0 1 ) 
subs1 ( = ippp_1 maxppp_1 ) 
remove lets from formula
subs2 ( = ippp_1 maxppp_1 ) 
subs1 ( and ( and .def_1184 .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) 
remove lets from formula
subs2 ( and ( and .def_1184 .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) 
.def_1184 
12
aux_vars_subs_dict {'.def_303 ': '( = ippp_1 maxppp_1 ) ', '.def_400 ': '( = vppp_0 1 ) ', '.def_1164 ': '( not ( = pcppp_0 3 ) ) ', '.def_1170 ': '( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) ', '.def_1184 ': '( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) ', '.def_1189 ': '( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) ', '.def_1198 ': '( and ( and .def_1184 .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) '}
.def_1189 
55
aux_vars_subs_dict {'.def_303 ': '( = ippp_1 maxppp_1 ) ', '.def_400 ': '( = vppp_0 1 ) ', '.def_1164 ': '( not ( = pcppp_0 3 ) ) ', '.def_1170 ': '( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) ', '.def_1184 ': '( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) ', '.def_1189 ': '( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) ', '.def_1198 ': '( and ( and ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) '}
subs1 ( and ( and .def_1184 .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) 
remove lets from formula
subs2 ( and ( and .def_1184 .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) 
.def_1184 
12
aux_vars_subs_dict {'.def_303 ': '( = ippp_1 maxppp_1 ) ', '.def_400 ': '( = vppp_0 1 ) ', '.def_1164 ': '( not ( = pcppp_0 3 ) ) ', '.def_1170 ': '( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) ', '.def_1184 ': '( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) ', '.def_1189 ': '( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) ', '.def_1198 ': '( and ( and .def_1184 .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) '}
.def_1189 
55
aux_vars_subs_dict {'.def_303 ': '( = ippp_1 maxppp_1 ) ', '.def_400 ': '( = vppp_0 1 ) ', '.def_1164 ': '( not ( = pcppp_0 3 ) ) ', '.def_1170 ': '( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) ', '.def_1184 ': '( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) ', '.def_1189 ': '( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) ', '.def_1198 ': '( and ( and ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) .def_1189 ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) '}
subs1 ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) 
subs1 ( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) 
subs1 ( = vppp_0 1 ) 
remove lets from formula
subs2 ( = vppp_0 1 ) 
subs1 ( = ippp_1 maxppp_1 ) 
remove lets from formula
subs2 ( = ippp_1 maxppp_1 ) 
aux_vars_subs_dict  {'.def_303 ': '( = ippp_1 maxppp_1 ) ', '.def_400 ': '( = vppp_0 1 ) ', '.def_1164 ': '( not ( = pcppp_0 3 ) ) ', '.def_1170 ': '( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) ', '.def_1184 ': '( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) ', '.def_1189 ': '( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) ', '.def_1198 ': '( and ( and ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) ( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) '}
{20: 40, 9: 42, 7: 44, 65: 78, 54: 80, 52: 82, 110: 124, 104: 126, 92: 128, 90: 130, 174: 180, 170: 189, 159: 191, 152: 193, 140: 195, 138: 197, 239: 245, 235: 254, 224: 256, 219: 260, 207: 262, 205: 264, 308: 314, 304: 323, 293: 325, 286: 327, 274: 329, 272: 331, 359: 385, 415: 421, 411: 430, 400: 432, 393: 434, 456: 462, 452: 471, 441: 473, 436: 477, 387: 479, 353: 481, 341: 483, 339: 485, 527: 533, 523: 542, 512: 544, 505: 546, 499: 548, 562: 576, 556: 578, 598: 618, 592: 620, 660: 686, 700: 714, 694: 716, 748: 754, 744: 763, 731: 765, 724: 767, 775: 790, 899: 905, 895: 914, 884: 916, 879: 920, 863: 922, 847: 924, 964: 970, 960: 979, 949: 981, 942: 983, 926: 985, 841: 987, 825: 989, 819: 991, 1022: 1042, 1007: 1044, 993: 1046, 813: 1048, 798: 1050, 792: 1052, 769: 1054, 718: 1056, 688: 1058, 654: 1060, 638: 1062, 622: 1064, 586: 1066, 580: 1068, 550: 1070, 493: 1072, 487: 1074, 333: 1076, 266: 1078, 199: 1080, 132: 1082, 84: 1084, 46: 1086, 1: 1088}
{21: 34, 10: 36, 8: 38, 66: 80, 60: 82, 48: 84, 46: 86, 130: 136, 126: 145, 115: 147, 108: 149, 96: 151, 94: 153, 195: 201, 191: 210, 180: 212, 175: 216, 163: 218, 161: 220, 264: 270, 260: 279, 249: 281, 242: 283, 230: 285, 228: 287, 315: 341, 371: 377, 367: 386, 356: 388, 349: 390, 412: 418, 408: 427, 397: 429, 392: 433, 343: 435, 309: 437, 297: 439, 295: 441, 483: 489, 479: 498, 468: 500, 461: 502, 455: 504, 518: 532, 512: 534, 554: 574, 548: 576, 616: 642, 656: 670, 650: 672, 704: 710, 700: 719, 687: 721, 680: 723, 731: 746, 855: 861, 851: 870, 840: 872, 835: 876, 819: 878, 803: 880, 920: 926, 916: 935, 905: 937, 898: 939, 882: 941, 797: 943, 781: 945, 775: 947, 978: 998, 963: 1000, 949: 1002, 769: 1004, 754: 1006, 748: 1008, 725: 1010, 674: 1012, 644: 1014, 610: 1016, 594: 1018, 578: 1020, 542: 1022, 536: 1024, 506: 1026, 449: 1028, 443: 1030, 289: 1032, 222: 1034, 155: 1036, 88: 1038, 40: 1040, 2: 1042}
{29: 43, 23: 45, 11: 47, 9: 49, 93: 99, 89: 108, 78: 110, 71: 112, 59: 114, 57: 116, 158: 164, 154: 173, 143: 175, 138: 179, 126: 181, 124: 183, 227: 233, 223: 242, 212: 244, 205: 246, 193: 248, 191: 250, 278: 304, 334: 340, 330: 349, 319: 351, 312: 353, 375: 381, 371: 390, 360: 392, 355: 396, 306: 398, 272: 400, 260: 402, 258: 404, 446: 452, 442: 461, 431: 463, 424: 465, 418: 467, 481: 495, 475: 497, 517: 537, 511: 539, 579: 605, 619: 633, 613: 635, 667: 673, 663: 682, 650: 684, 643: 686, 694: 709, 818: 824, 814: 833, 803: 835, 798: 839, 782: 841, 766: 843, 883: 889, 879: 898, 868: 900, 861: 902, 845: 904, 760: 906, 744: 908, 738: 910, 941: 961, 926: 963, 912: 965, 732: 967, 717: 969, 711: 971, 688: 973, 637: 975, 607: 977, 573: 979, 557: 981, 541: 983, 505: 985, 499: 987, 469: 989, 412: 991, 406: 993, 252: 995, 185: 997, 118: 999, 51: 1001, 3: 1003}
{46: 52, 42: 61, 31: 63, 24: 65, 12: 67, 10: 69, 111: 117, 107: 126, 96: 128, 91: 132, 79: 134, 77: 136, 180: 186, 176: 195, 165: 197, 158: 199, 146: 201, 144: 203, 231: 257, 287: 293, 283: 302, 272: 304, 265: 306, 328: 334, 324: 343, 313: 345, 308: 349, 259: 351, 225: 353, 213: 355, 211: 357, 399: 405, 395: 414, 384: 416, 377: 418, 371: 420, 434: 448, 428: 450, 470: 490, 464: 492, 532: 558, 572: 586, 566: 588, 620: 626, 616: 635, 603: 637, 596: 639, 647: 662, 771: 777, 767: 786, 756: 788, 751: 792, 735: 794, 719: 796, 836: 842, 832: 851, 821: 853, 814: 855, 798: 857, 713: 859, 697: 861, 691: 863, 894: 914, 879: 916, 865: 918, 685: 920, 670: 922, 664: 924, 641: 926, 590: 928, 560: 930, 526: 932, 510: 934, 494: 936, 458: 938, 452: 940, 422: 942, 365: 944, 359: 946, 205: 948, 138: 950, 71: 952, 4: 954}
{45: 51, 41: 60, 30: 62, 25: 66, 13: 68, 11: 70, 114: 120, 110: 129, 99: 131, 92: 133, 80: 135, 78: 137, 165: 191, 221: 227, 217: 236, 206: 238, 199: 240, 262: 268, 258: 277, 247: 279, 242: 283, 193: 285, 159: 287, 147: 289, 145: 291, 333: 339, 329: 348, 318: 350, 311: 352, 305: 354, 368: 382, 362: 384, 404: 424, 398: 426, 466: 492, 506: 520, 500: 522, 554: 560, 550: 569, 537: 571, 530: 573, 581: 596, 705: 711, 701: 720, 690: 722, 685: 726, 669: 728, 653: 730, 770: 776, 766: 785, 755: 787, 748: 789, 732: 791, 647: 793, 631: 795, 625: 797, 828: 848, 813: 850, 799: 852, 619: 854, 604: 856, 598: 858, 575: 860, 524: 862, 494: 864, 460: 866, 444: 868, 428: 870, 392: 872, 386: 874, 356: 876, 299: 878, 293: 880, 139: 882, 72: 884, 5: 886}
{48: 54, 44: 63, 33: 65, 26: 67, 14: 69, 12: 71, 99: 125, 155: 161, 151: 170, 140: 172, 133: 174, 196: 202, 192: 211, 181: 213, 176: 217, 127: 219, 93: 221, 81: 223, 79: 225, 267: 273, 263: 282, 252: 284, 245: 286, 239: 288, 302: 316, 296: 318, 338: 358, 332: 360, 400: 426, 440: 454, 434: 456, 488: 494, 484: 503, 471: 505, 464: 507, 515: 530, 639: 645, 635: 654, 624: 656, 619: 660, 603: 662, 587: 664, 704: 710, 700: 719, 689: 721, 682: 723, 666: 725, 581: 727, 565: 729, 559: 731, 762: 782, 747: 784, 733: 786, 553: 788, 538: 790, 532: 792, 509: 794, 458: 796, 428: 798, 394: 800, 378: 802, 362: 804, 326: 806, 320: 808, 290: 810, 233: 812, 227: 814, 73: 816, 6: 818}
{33: 59, 89: 95, 85: 104, 74: 106, 67: 108, 130: 136, 126: 145, 115: 147, 110: 151, 61: 153, 27: 155, 15: 157, 13: 159, 201: 207, 197: 216, 186: 218, 179: 220, 173: 222, 236: 250, 230: 252, 272: 292, 266: 294, 334: 360, 374: 388, 368: 390, 422: 428, 418: 437, 405: 439, 398: 441, 449: 464, 573: 579, 569: 588, 558: 590, 553: 594, 537: 596, 521: 598, 638: 644, 634: 653, 623: 655, 616: 657, 600: 659, 515: 661, 499: 663, 493: 665, 696: 716, 681: 718, 667: 720, 487: 722, 472: 724, 466: 726, 443: 728, 392: 730, 362: 732, 328: 734, 312: 736, 296: 738, 260: 740, 254: 742, 224: 744, 167: 746, 161: 748, 7: 750}
remove lets from formula
final_formula  ( not ( and ( not ( <= 1 ( + hppp_1 ( * ( - 1 ) ippp_1 ) ) ) ) ( and ( not ( = pcppp_1 1 ) ) ( not ( and ( not ( = maxppp_0 ippp_0 ) ) ( and .def_1164 ( and .def_1170 ( and ( and .def_1164 .def_1170 ) ( and ( not ( = pcppp_0 2 ) ) ( and ( <= 2 ( + maxppp_0 ( * ( - 1 ) ippp_0 ) ) ) ( and ( not .def_400 ) ( not ( and .def_303 ( and ( not ( and .def_1198 ( and ( and .def_1198 ( and .def_1184 ( <= ( + yppp_1 ( * ( - 8 ) yppp_0 ) ) 0 ) ) ) ( and .def_1189 ( <= 0 ( + yppp_1 ( * ( - 8 ) yppp_0 ) ) ) ) ) ) ) ( or .def_400 ( and .def_303 ( = ippp_1 maxppp_0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
[' ( not ( and ( not ( <= 1 ( + hppp_1 ( * ( - 1 ) ippp_1 ) ) ) ) ( and ( not ( = pcppp_1 1 ) ) ( not ( and ( not ( = maxppp_0 ippp_0 ) ) ( and ( not ( = pcppp_0 3 ) ) ( and ( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) ( and ( and ( not ( = pcppp_0 3 ) ) ( <= 1 ( + hppp_0 ( * ( - 1 ) ippp_0 ) ) ) ) ( and ( not ( = pcppp_0 2 ) ) ( and ( <= 2 ( + maxppp_0 ( * ( - 1 ) ippp_0 ) ) ) ( and ( not ( = vppp_0 1 ) ) ( not ( and ( = ippp_1 maxppp_1 ) ( and ( not ( and ( and ( and ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) ( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) ( and ( and ( and ( and ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) ( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) ) ( and ( <= 0 ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) ) ( <= ( + yppp_1 ( * ( - 2 ) yppp_0 ) ) 0 ) ) ) ( and ( <= ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) 0 ) ( <= ( + yppp_1 ( * ( - 8 ) yppp_0 ) ) 0 ) ) ) ( and ( <= 0 ( + yppp_1 ( * ( - 4 ) yppp_0 ) ) ) ( <= 0 ( + yppp_1 ( * ( - 8 ) yppp_0 ) ) ) ) ) ) ) ( or ( = vppp_0 1 ) ( and ( = ippp_1 maxppp_1 ) ( = ippp_1 maxppp_0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ']
hi
paren_dict {27: 41, 21: 43, 9: 45, 7: 47, 69: 91, 57: 93, 55: 95, 128: 142, 148: 154, 144: 164, 124: 166, 117: 168, 105: 170, 103: 172, 203: 217, 223: 229, 219: 239, 199: 241, 194: 245, 182: 247, 180: 249, 277: 303, 311: 332, 334: 355, 305: 357, 271: 359, 259: 361, 257: 363, 406: 412, 402: 422, 390: 424, 383: 426, 377: 428, 442: 457, 436: 459, 494: 500, 490: 512, 478: 514, 516: 522, 473: 524, 641: 655, 661: 667, 657: 677, 637: 679, 630: 681, 614: 683, 598: 685, 712: 726, 732: 738, 728: 748, 708: 750, 703: 754, 687: 756, 592: 758, 576: 760, 570: 762, 788: 809, 811: 826, 782: 828, 776: 830, 870: 892, 854: 894, 848: 896, 832: 898, 770: 900, 764: 902, 564: 904, 548: 906, 542: 908, 526: 910, 467: 912, 461: 914, 430: 916, 371: 918, 365: 920, 251: 922, 174: 924, 97: 926, 49: 928, 1: 930}
aux_vars_first_occ_dict {'.def_1264 ': 11, '.def_1265 ': 59, '.def_1272 ': 107, '.def_1275 ': 184, '.def_1283 ': 261}
aux_vars_dict {'.def_1264 ': '( not ( = vpppp_0 1 ) ) ', '.def_1265 ': '( = maxpppp_1 ipppp_1 ) ', '.def_1272 ': '( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ', '.def_1275 ': '( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ', '.def_1283 ': '( and ( and .def_1272 .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) '}
subs1 ( not ( = vpppp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = vpppp_0 1 ) ) 
subs1 ( = maxpppp_1 ipppp_1 ) 
remove lets from formula
subs2 ( = maxpppp_1 ipppp_1 ) 
subs1 ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) 
subs1 ( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) 
subs1 ( and ( and .def_1272 .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) 
remove lets from formula
subs2 ( and ( and .def_1272 .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) 
.def_1272 
12
aux_vars_subs_dict {'.def_1264 ': '( not ( = vpppp_0 1 ) ) ', '.def_1265 ': '( = maxpppp_1 ipppp_1 ) ', '.def_1272 ': '( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ', '.def_1275 ': '( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ', '.def_1283 ': '( and ( and .def_1272 .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) '}
.def_1275 
65
aux_vars_subs_dict {'.def_1264 ': '( not ( = vpppp_0 1 ) ) ', '.def_1265 ': '( = maxpppp_1 ipppp_1 ) ', '.def_1272 ': '( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ', '.def_1275 ': '( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ', '.def_1283 ': '( and ( and ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) '}
subs1 ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) 
subs1 ( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) 
subs1 ( not ( = vpppp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = vpppp_0 1 ) ) 
subs1 ( = maxpppp_1 ipppp_1 ) 
remove lets from formula
subs2 ( = maxpppp_1 ipppp_1 ) 
subs1 ( and ( and .def_1272 .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) 
remove lets from formula
subs2 ( and ( and .def_1272 .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) 
.def_1272 
12
aux_vars_subs_dict {'.def_1264 ': '( not ( = vpppp_0 1 ) ) ', '.def_1265 ': '( = maxpppp_1 ipppp_1 ) ', '.def_1272 ': '( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ', '.def_1275 ': '( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ', '.def_1283 ': '( and ( and .def_1272 .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) '}
.def_1275 
65
aux_vars_subs_dict {'.def_1264 ': '( not ( = vpppp_0 1 ) ) ', '.def_1265 ': '( = maxpppp_1 ipppp_1 ) ', '.def_1272 ': '( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ', '.def_1275 ': '( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ', '.def_1283 ': '( and ( and ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) '}
subs1 ( and ( and .def_1272 .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) 
remove lets from formula
subs2 ( and ( and .def_1272 .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) 
.def_1272 
12
aux_vars_subs_dict {'.def_1264 ': '( not ( = vpppp_0 1 ) ) ', '.def_1265 ': '( = maxpppp_1 ipppp_1 ) ', '.def_1272 ': '( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ', '.def_1275 ': '( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ', '.def_1283 ': '( and ( and .def_1272 .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) '}
.def_1275 
65
aux_vars_subs_dict {'.def_1264 ': '( not ( = vpppp_0 1 ) ) ', '.def_1265 ': '( = maxpppp_1 ipppp_1 ) ', '.def_1272 ': '( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ', '.def_1275 ': '( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ', '.def_1283 ': '( and ( and ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) .def_1275 ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) '}
subs1 ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) 
subs1 ( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) 
subs1 ( not ( = vpppp_0 1 ) ) 
remove lets from formula
subs2 ( not ( = vpppp_0 1 ) ) 
subs1 ( = maxpppp_1 ipppp_1 ) 
remove lets from formula
subs2 ( = maxpppp_1 ipppp_1 ) 
aux_vars_subs_dict  {'.def_1264 ': '( not ( = vpppp_0 1 ) ) ', '.def_1265 ': '( = maxpppp_1 ipppp_1 ) ', '.def_1272 ': '( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ', '.def_1275 ': '( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ', '.def_1283 ': '( and ( and ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) '}
{27: 41, 21: 43, 9: 45, 7: 47, 69: 91, 57: 93, 55: 95, 128: 142, 148: 154, 144: 164, 124: 166, 117: 168, 105: 170, 103: 172, 203: 217, 223: 229, 219: 239, 199: 241, 194: 245, 182: 247, 180: 249, 277: 303, 311: 332, 334: 355, 305: 357, 271: 359, 259: 361, 257: 363, 406: 412, 402: 422, 390: 424, 383: 426, 377: 428, 442: 457, 436: 459, 494: 500, 490: 512, 478: 514, 516: 522, 473: 524, 641: 655, 661: 667, 657: 677, 637: 679, 630: 681, 614: 683, 598: 685, 712: 726, 732: 738, 728: 748, 708: 750, 703: 754, 687: 756, 592: 758, 576: 760, 570: 762, 788: 809, 811: 826, 782: 828, 776: 830, 870: 892, 854: 894, 848: 896, 832: 898, 770: 900, 764: 902, 564: 904, 548: 906, 542: 908, 526: 910, 467: 912, 461: 914, 430: 916, 371: 918, 365: 920, 251: 922, 174: 924, 97: 926, 49: 928, 1: 930}
{22: 44, 10: 46, 8: 48, 81: 95, 101: 107, 97: 117, 77: 119, 70: 121, 58: 123, 56: 125, 156: 170, 176: 182, 172: 192, 152: 194, 147: 198, 135: 200, 133: 202, 230: 256, 264: 285, 287: 308, 258: 310, 224: 312, 212: 314, 210: 316, 359: 365, 355: 375, 343: 377, 336: 379, 330: 381, 395: 410, 389: 412, 447: 453, 443: 465, 431: 467, 469: 475, 426: 477, 594: 608, 614: 620, 610: 630, 590: 632, 583: 634, 567: 636, 551: 638, 665: 679, 685: 691, 681: 701, 661: 703, 656: 707, 640: 709, 545: 711, 529: 713, 523: 715, 741: 762, 764: 779, 735: 781, 729: 783, 823: 845, 807: 847, 801: 849, 785: 851, 723: 853, 717: 855, 517: 857, 501: 859, 495: 861, 479: 863, 420: 865, 414: 867, 383: 869, 324: 871, 318: 873, 204: 875, 127: 877, 50: 879, 2: 881}
{34: 48, 54: 60, 50: 70, 30: 72, 23: 74, 11: 76, 9: 78, 109: 123, 129: 135, 125: 145, 105: 147, 100: 151, 88: 153, 86: 155, 183: 209, 217: 238, 240: 261, 211: 263, 177: 265, 165: 267, 163: 269, 312: 318, 308: 328, 296: 330, 289: 332, 283: 334, 348: 363, 342: 365, 400: 406, 396: 418, 384: 420, 422: 428, 379: 430, 547: 561, 567: 573, 563: 583, 543: 585, 536: 587, 520: 589, 504: 591, 618: 632, 638: 644, 634: 654, 614: 656, 609: 660, 593: 662, 498: 664, 482: 666, 476: 668, 694: 715, 717: 732, 688: 734, 682: 736, 776: 798, 760: 800, 754: 802, 738: 804, 676: 806, 670: 808, 470: 810, 454: 812, 448: 814, 432: 816, 373: 818, 367: 820, 336: 822, 277: 824, 271: 826, 157: 828, 80: 830, 3: 832}
{33: 47, 53: 59, 49: 69, 29: 71, 24: 75, 12: 77, 10: 79, 107: 133, 141: 162, 164: 185, 135: 187, 101: 189, 89: 191, 87: 193, 236: 242, 232: 252, 220: 254, 213: 256, 207: 258, 272: 287, 266: 289, 324: 330, 320: 342, 308: 344, 346: 352, 303: 354, 471: 485, 491: 497, 487: 507, 467: 509, 460: 511, 444: 513, 428: 515, 542: 556, 562: 568, 558: 578, 538: 580, 533: 584, 517: 586, 422: 588, 406: 590, 400: 592, 618: 639, 641: 656, 612: 658, 606: 660, 700: 722, 684: 724, 678: 726, 662: 728, 600: 730, 594: 732, 394: 734, 378: 736, 372: 738, 356: 740, 297: 742, 291: 744, 260: 746, 201: 748, 195: 750, 81: 752, 4: 754}
{31: 57, 65: 86, 88: 109, 59: 111, 25: 113, 13: 115, 11: 117, 160: 166, 156: 176, 144: 178, 137: 180, 131: 182, 196: 211, 190: 213, 248: 254, 244: 266, 232: 268, 270: 276, 227: 278, 395: 409, 415: 421, 411: 431, 391: 433, 384: 435, 368: 437, 352: 439, 466: 480, 486: 492, 482: 502, 462: 504, 457: 508, 441: 510, 346: 512, 330: 514, 324: 516, 542: 563, 565: 580, 536: 582, 530: 584, 624: 646, 608: 648, 602: 650, 586: 652, 524: 654, 518: 656, 318: 658, 302: 660, 296: 662, 280: 664, 221: 666, 215: 668, 184: 670, 125: 672, 119: 674, 5: 676}
remove lets from formula
final_formula  ( not ( and ( not ( <= 1 ( + hpppp_1 ( * ( - 1 ) ipppp_1 ) ) ) ) ( and ( not ( = pcpppp_1 1 ) ) ( not ( and ( <= ( + ipppp_0 ( * ( - 1 ) maxpppp_0 ) ) ( - 1 ) ) ( and .def_1264 ( not ( and .def_1265 ( and ( not ( and .def_1283 ( and ( and .def_1283 ( and .def_1272 ( <= 0 ( + ( * 4 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ) ) ( and .def_1275 ( <= ( + ( * 4 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ) ) ) ) ( not ( and ( not ( and ( <= hpppp_0 ipppp_0 ) ( = pcpppp_0 0 ) ) ) ( and .def_1264 ( not ( and .def_1265 ( = maxpppp_0 ipppp_1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 
[' ( not ( and ( not ( <= 1 ( + hpppp_1 ( * ( - 1 ) ipppp_1 ) ) ) ) ( and ( not ( = pcpppp_1 1 ) ) ( not ( and ( <= ( + ipppp_0 ( * ( - 1 ) maxpppp_0 ) ) ( - 1 ) ) ( and ( not ( = vpppp_0 1 ) ) ( not ( and ( = maxpppp_1 ipppp_1 ) ( and ( not ( and ( and ( and ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) ( and ( and ( and ( and ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ) ( and ( <= ypppp_0 ypppp_1 ) ( <= ypppp_1 ypppp_0 ) ) ) ( and ( <= 0 ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ( <= 0 ( + ( * 4 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) ) ) ) ( and ( <= ( + ( * 2 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ( <= ( + ( * 4 ypppp_0 ) ( * ( - 1 ) ypppp_1 ) ) 0 ) ) ) ) ) ( not ( and ( not ( and ( <= hpppp_0 ipppp_0 ) ( = pcpppp_0 0 ) ) ) ( and ( not ( = vpppp_0 1 ) ) ( not ( and ( = maxpppp_1 ipppp_1 ) ( = maxpppp_0 ipppp_1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ']
hi
paren_dict {21: 45, 9: 47, 7: 49, 82: 97, 103: 109, 99: 120, 78: 122, 71: 124, 59: 126, 57: 128, 159: 174, 180: 186, 176: 197, 155: 199, 150: 203, 138: 205, 136: 207, 229: 252, 217: 254, 215: 256, 278: 301, 266: 303, 264: 305, 333: 359, 361: 387, 327: 389, 315: 391, 313: 393, 437: 443, 433: 454, 420: 456, 413: 458, 407: 460, 474: 490, 468: 492, 522: 538, 567: 593, 552: 595, 597: 623, 546: 625, 540: 627, 516: 629, 642: 666, 696: 702, 692: 715, 679: 717, 719: 725, 674: 727, 668: 729, 636: 731, 739: 754, 772: 796, 756: 798, 733: 800, 631: 802, 510: 804, 494: 806, 462: 808, 401: 810, 395: 812, 307: 814, 258: 816, 209: 818, 130: 820, 51: 822, 1: 824}
aux_vars_first_occ_dict {'.def_1337 ': 11, '.def_1344 ': 61, '.def_1347 ': 140, '.def_1351 ': 219, '.def_1353 ': 268, '.def_1355 ': 317}
aux_vars_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and .def_1344 .def_1347 ) ( and .def_1351 .def_1353 ) ) '}
subs1 ( = maxppppp_1 ippppp_1 ) 
remove lets from formula
subs2 ( = maxppppp_1 ippppp_1 ) 
subs1 ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) 
subs1 ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) 
subs1 ( <= yppppp_0 yppppp_1 ) 
remove lets from formula
subs2 ( <= yppppp_0 yppppp_1 ) 
subs1 ( <= yppppp_1 yppppp_0 ) 
remove lets from formula
subs2 ( <= yppppp_1 yppppp_0 ) 
subs1 ( and ( and .def_1344 .def_1347 ) ( and .def_1351 .def_1353 ) ) 
remove lets from formula
subs2 ( and ( and .def_1344 .def_1347 ) ( and .def_1351 .def_1353 ) ) 
.def_1344 
12
aux_vars_subs_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and .def_1344 .def_1347 ) ( and .def_1351 .def_1353 ) ) '}
.def_1347 
67
aux_vars_subs_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) .def_1347 ) ( and .def_1351 .def_1353 ) ) '}
.def_1351 
130
aux_vars_subs_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ) ( and .def_1351 .def_1353 ) ) '}
.def_1353 
155
aux_vars_subs_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ) ( and ( <= yppppp_0 yppppp_1 ) .def_1353 ) ) '}
subs1 ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) 
subs1 ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) 
subs1 ( <= yppppp_0 yppppp_1 ) 
remove lets from formula
subs2 ( <= yppppp_0 yppppp_1 ) 
subs1 ( <= yppppp_1 yppppp_0 ) 
remove lets from formula
subs2 ( <= yppppp_1 yppppp_0 ) 
subs1 ( = maxppppp_1 ippppp_1 ) 
remove lets from formula
subs2 ( = maxppppp_1 ippppp_1 ) 
subs1 ( and ( and .def_1344 .def_1347 ) ( and .def_1351 .def_1353 ) ) 
remove lets from formula
subs2 ( and ( and .def_1344 .def_1347 ) ( and .def_1351 .def_1353 ) ) 
.def_1344 
12
aux_vars_subs_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and .def_1344 .def_1347 ) ( and .def_1351 .def_1353 ) ) '}
.def_1347 
67
aux_vars_subs_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) .def_1347 ) ( and .def_1351 .def_1353 ) ) '}
.def_1351 
130
aux_vars_subs_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ) ( and .def_1351 .def_1353 ) ) '}
.def_1353 
155
aux_vars_subs_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ) ( and ( <= yppppp_0 yppppp_1 ) .def_1353 ) ) '}
subs1 ( and ( and .def_1344 .def_1347 ) ( and .def_1351 .def_1353 ) ) 
remove lets from formula
subs2 ( and ( and .def_1344 .def_1347 ) ( and .def_1351 .def_1353 ) ) 
.def_1344 
12
aux_vars_subs_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and .def_1344 .def_1347 ) ( and .def_1351 .def_1353 ) ) '}
.def_1347 
67
aux_vars_subs_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) .def_1347 ) ( and .def_1351 .def_1353 ) ) '}
.def_1351 
130
aux_vars_subs_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ) ( and .def_1351 .def_1353 ) ) '}
.def_1353 
155
aux_vars_subs_dict {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ) ( and ( <= yppppp_0 yppppp_1 ) .def_1353 ) ) '}
subs1 ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) 
remove lets from formula
subs2 ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) 
subs1 ( <= yppppp_1 yppppp_0 ) 
remove lets from formula
subs2 ( <= yppppp_1 yppppp_0 ) 
subs1 ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) 
remove lets from formula
subs2 ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) 
subs1 ( <= yppppp_0 yppppp_1 ) 
remove lets from formula
subs2 ( <= yppppp_0 yppppp_1 ) 
subs1 ( = maxppppp_1 ippppp_1 ) 
remove lets from formula
subs2 ( = maxppppp_1 ippppp_1 ) 
aux_vars_subs_dict  {'.def_1337 ': '( = maxppppp_1 ippppp_1 ) ', '.def_1344 ': '( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ', '.def_1347 ': '( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ', '.def_1351 ': '( <= yppppp_0 yppppp_1 ) ', '.def_1353 ': '( <= yppppp_1 yppppp_0 ) ', '.def_1355 ': '( and ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ) ( and ( <= yppppp_0 yppppp_1 ) ( <= yppppp_1 yppppp_0 ) ) ) '}
{21: 45, 9: 47, 7: 49, 82: 97, 103: 109, 99: 120, 78: 122, 71: 124, 59: 126, 57: 128, 159: 174, 180: 186, 176: 197, 155: 199, 150: 203, 138: 205, 136: 207, 229: 252, 217: 254, 215: 256, 278: 301, 266: 303, 264: 305, 333: 359, 361: 387, 327: 389, 315: 391, 313: 393, 437: 443, 433: 454, 420: 456, 413: 458, 407: 460, 474: 490, 468: 492, 522: 538, 567: 593, 552: 595, 597: 623, 546: 625, 540: 627, 516: 629, 642: 666, 696: 702, 692: 715, 679: 717, 719: 725, 674: 727, 668: 729, 636: 731, 739: 754, 772: 796, 756: 798, 733: 800, 631: 802, 510: 804, 494: 806, 462: 808, 401: 810, 395: 812, 307: 814, 258: 816, 209: 818, 130: 820, 51: 822, 1: 824}
{33: 48, 54: 60, 50: 71, 29: 73, 22: 75, 10: 77, 8: 79, 110: 125, 131: 137, 127: 148, 106: 150, 101: 154, 89: 156, 87: 158, 180: 203, 168: 205, 166: 207, 229: 252, 217: 254, 215: 256, 284: 310, 312: 338, 278: 340, 266: 342, 264: 344, 388: 394, 384: 405, 371: 407, 364: 409, 358: 411, 425: 441, 419: 443, 473: 489, 518: 544, 503: 546, 548: 574, 497: 576, 491: 578, 467: 580, 593: 617, 647: 653, 643: 666, 630: 668, 670: 676, 625: 678, 619: 680, 587: 682, 690: 705, 723: 747, 707: 749, 684: 751, 582: 753, 461: 755, 445: 757, 413: 759, 352: 761, 346: 763, 258: 765, 209: 767, 160: 769, 81: 771, 2: 773}
{32: 47, 53: 59, 49: 70, 28: 72, 23: 76, 11: 78, 9: 80, 102: 125, 90: 127, 88: 129, 151: 174, 139: 176, 137: 178, 206: 232, 234: 260, 200: 262, 188: 264, 186: 266, 310: 316, 306: 327, 293: 329, 286: 331, 280: 333, 347: 363, 341: 365, 395: 411, 440: 466, 425: 468, 470: 496, 419: 498, 413: 500, 389: 502, 515: 539, 569: 575, 565: 588, 552: 590, 592: 598, 547: 600, 541: 602, 509: 604, 612: 627, 645: 669, 629: 671, 606: 673, 504: 675, 383: 677, 367: 679, 335: 681, 274: 683, 268: 685, 180: 687, 131: 689, 82: 691, 3: 693}
{24: 47, 12: 49, 10: 51, 73: 96, 61: 98, 59: 100, 128: 154, 156: 182, 122: 184, 110: 186, 108: 188, 232: 238, 228: 249, 215: 251, 208: 253, 202: 255, 269: 285, 263: 287, 317: 333, 362: 388, 347: 390, 392: 418, 341: 420, 335: 422, 311: 424, 437: 461, 491: 497, 487: 510, 474: 512, 514: 520, 469: 522, 463: 524, 431: 526, 534: 549, 567: 591, 551: 593, 528: 595, 426: 597, 305: 599, 289: 601, 257: 603, 196: 605, 190: 607, 102: 609, 53: 611, 4: 613}
{25: 48, 13: 50, 11: 52, 80: 106, 108: 134, 74: 136, 62: 138, 60: 140, 184: 190, 180: 201, 167: 203, 160: 205, 154: 207, 221: 237, 215: 239, 269: 285, 314: 340, 299: 342, 344: 370, 293: 372, 287: 374, 263: 376, 389: 413, 443: 449, 439: 462, 426: 464, 466: 472, 421: 474, 415: 476, 383: 478, 486: 501, 519: 543, 503: 545, 480: 547, 378: 549, 257: 551, 241: 553, 209: 555, 148: 557, 142: 559, 54: 561, 5: 563}
{32: 58, 60: 86, 26: 88, 14: 90, 12: 92, 136: 142, 132: 153, 119: 155, 112: 157, 106: 159, 173: 189, 167: 191, 221: 237, 266: 292, 251: 294, 296: 322, 245: 324, 239: 326, 215: 328, 341: 365, 395: 401, 391: 414, 378: 416, 418: 424, 373: 426, 367: 428, 335: 430, 438: 453, 471: 495, 455: 497, 432: 499, 330: 501, 209: 503, 193: 505, 161: 507, 100: 509, 94: 511, 6: 513}
remove lets from formula
final_formula  ( not ( and ( not ( <= 1 ( + hppppp_1 ( * ( - 1 ) ippppp_1 ) ) ) ) ( and ( not ( = pcppppp_1 1 ) ) ( and .def_1337 ( and ( and ( not .def_1355 ) ( not ( and ( or .def_1355 ( and .def_1344 .def_1353 ) ) ( and .def_1347 .def_1351 ) ) ) ) ( or ( and ( = ippppp_0 maxppppp_0 ) ( not ( <= ( + ippppp_0 ( * ( - 1 ) maxppppp_0 ) ) ( - 1 ) ) ) ) ( and ( = vppppp_0 1 ) ( and .def_1337 ( = maxppppp_0 ippppp_1 ) ) ) ) ) ) ) ) ) 
[' ( not ( and ( not ( <= 1 ( + hppppp_1 ( * ( - 1 ) ippppp_1 ) ) ) ) ( and ( not ( = pcppppp_1 1 ) ) ( and ( = maxppppp_1 ippppp_1 ) ( and ( and ( not ( and ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ) ( and ( <= yppppp_0 yppppp_1 ) ( <= yppppp_1 yppppp_0 ) ) ) ) ( not ( and ( or ( and ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ) ( and ( <= yppppp_0 yppppp_1 ) ( <= yppppp_1 yppppp_0 ) ) ) ( and ( <= 0 ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) ) ( <= yppppp_1 yppppp_0 ) ) ) ( and ( <= ( + ( * 2 yppppp_0 ) ( * ( - 1 ) yppppp_1 ) ) 0 ) ( <= yppppp_0 yppppp_1 ) ) ) ) ) ( or ( and ( = ippppp_0 maxppppp_0 ) ( not ( <= ( + ippppp_0 ( * ( - 1 ) maxppppp_0 ) ) ( - 1 ) ) ) ) ( and ( = vppppp_0 1 ) ( and ( = maxppppp_1 ippppp_1 ) ( = maxppppp_0 ippppp_1 ) ) ) ) ) ) ) ) ) ']
hi
paren_dict {20: 46, 9: 48, 7: 50, 71: 96, 60: 98, 58: 100, 121: 146, 110: 148, 108: 150, 172: 196, 160: 198, 158: 200, 245: 251, 241: 263, 227: 265, 220: 267, 214: 269, 308: 314, 304: 326, 290: 328, 283: 330, 277: 332, 346: 363, 340: 365, 379: 396, 373: 398, 427: 443, 466: 490, 451: 492, 445: 494, 421: 496, 504: 530, 547: 573, 532: 575, 498: 577, 415: 579, 400: 581, 367: 583, 334: 585, 271: 587, 208: 589, 202: 591, 152: 593, 102: 595, 52: 597, 1: 599}
aux_vars_first_occ_dict {'.def_665 ': 11, '.def_830 ': 62, '.def_831 ': 112, '.def_1416 ': 162}
aux_vars_dict {'.def_665 ': '( = maxpppppp_1 ipppppp_1 ) ', '.def_830 ': '( <= ypppppp_0 ypppppp_1 ) ', '.def_831 ': '( <= ypppppp_1 ypppppp_0 ) ', '.def_1416 ': '( and .def_830 .def_831 ) '}
subs1 ( = maxpppppp_1 ipppppp_1 ) 
remove lets from formula
subs2 ( = maxpppppp_1 ipppppp_1 ) 
subs1 ( <= ypppppp_0 ypppppp_1 ) 
remove lets from formula
subs2 ( <= ypppppp_0 ypppppp_1 ) 
subs1 ( <= ypppppp_1 ypppppp_0 ) 
remove lets from formula
subs2 ( <= ypppppp_1 ypppppp_0 ) 
subs1 ( and .def_830 .def_831 ) 
remove lets from formula
subs2 ( and .def_830 .def_831 ) 
.def_830 
6
aux_vars_subs_dict {'.def_665 ': '( = maxpppppp_1 ipppppp_1 ) ', '.def_830 ': '( <= ypppppp_0 ypppppp_1 ) ', '.def_831 ': '( <= ypppppp_1 ypppppp_0 ) ', '.def_1416 ': '( and .def_830 .def_831 ) '}
.def_831 
33
aux_vars_subs_dict {'.def_665 ': '( = maxpppppp_1 ipppppp_1 ) ', '.def_830 ': '( <= ypppppp_0 ypppppp_1 ) ', '.def_831 ': '( <= ypppppp_1 ypppppp_0 ) ', '.def_1416 ': '( and ( <= ypppppp_0 ypppppp_1 ) .def_831 ) '}
subs1 ( <= ypppppp_0 ypppppp_1 ) 
remove lets from formula
subs2 ( <= ypppppp_0 ypppppp_1 ) 
subs1 ( <= ypppppp_1 ypppppp_0 ) 
remove lets from formula
subs2 ( <= ypppppp_1 ypppppp_0 ) 
subs1 ( = maxpppppp_1 ipppppp_1 ) 
remove lets from formula
subs2 ( = maxpppppp_1 ipppppp_1 ) 
subs1 ( and .def_830 .def_831 ) 
remove lets from formula
subs2 ( and .def_830 .def_831 ) 
.def_830 
6
aux_vars_subs_dict {'.def_665 ': '( = maxpppppp_1 ipppppp_1 ) ', '.def_830 ': '( <= ypppppp_0 ypppppp_1 ) ', '.def_831 ': '( <= ypppppp_1 ypppppp_0 ) ', '.def_1416 ': '( and .def_830 .def_831 ) '}
.def_831 
33
aux_vars_subs_dict {'.def_665 ': '( = maxpppppp_1 ipppppp_1 ) ', '.def_830 ': '( <= ypppppp_0 ypppppp_1 ) ', '.def_831 ': '( <= ypppppp_1 ypppppp_0 ) ', '.def_1416 ': '( and ( <= ypppppp_0 ypppppp_1 ) .def_831 ) '}
subs1 ( <= ypppppp_0 ypppppp_1 ) 
remove lets from formula
subs2 ( <= ypppppp_0 ypppppp_1 ) 
subs1 ( <= ypppppp_1 ypppppp_0 ) 
remove lets from formula
subs2 ( <= ypppppp_1 ypppppp_0 ) 
subs1 ( and .def_830 .def_831 ) 
remove lets from formula
subs2 ( and .def_830 .def_831 ) 
.def_830 
6
aux_vars_subs_dict {'.def_665 ': '( = maxpppppp_1 ipppppp_1 ) ', '.def_830 ': '( <= ypppppp_0 ypppppp_1 ) ', '.def_831 ': '( <= ypppppp_1 ypppppp_0 ) ', '.def_1416 ': '( and .def_830 .def_831 ) '}
.def_831 
33
aux_vars_subs_dict {'.def_665 ': '( = maxpppppp_1 ipppppp_1 ) ', '.def_830 ': '( <= ypppppp_0 ypppppp_1 ) ', '.def_831 ': '( <= ypppppp_1 ypppppp_0 ) ', '.def_1416 ': '( and ( <= ypppppp_0 ypppppp_1 ) .def_831 ) '}
subs1 ( = maxpppppp_1 ipppppp_1 ) 
remove lets from formula
subs2 ( = maxpppppp_1 ipppppp_1 ) 
aux_vars_subs_dict  {'.def_665 ': '( = maxpppppp_1 ipppppp_1 ) ', '.def_830 ': '( <= ypppppp_0 ypppppp_1 ) ', '.def_831 ': '( <= ypppppp_1 ypppppp_0 ) ', '.def_1416 ': '( and ( <= ypppppp_0 ypppppp_1 ) ( <= ypppppp_1 ypppppp_0 ) ) '}
{20: 46, 9: 48, 7: 50, 71: 96, 60: 98, 58: 100, 121: 146, 110: 148, 108: 150, 172: 196, 160: 198, 158: 200, 245: 251, 241: 263, 227: 265, 220: 267, 214: 269, 308: 314, 304: 326, 290: 328, 283: 330, 277: 332, 346: 363, 340: 365, 379: 396, 373: 398, 427: 443, 466: 490, 451: 492, 445: 494, 421: 496, 504: 530, 547: 573, 532: 575, 498: 577, 415: 579, 400: 581, 367: 583, 334: 585, 271: 587, 208: 589, 202: 591, 152: 593, 102: 595, 52: 597, 1: 599}
{21: 46, 10: 48, 8: 50, 71: 96, 60: 98, 58: 100, 122: 146, 110: 148, 108: 150, 195: 201, 191: 213, 177: 215, 170: 217, 164: 219, 258: 264, 254: 276, 240: 278, 233: 280, 227: 282, 296: 313, 290: 315, 329: 346, 323: 348, 377: 393, 416: 440, 401: 442, 395: 444, 371: 446, 454: 480, 497: 523, 482: 525, 448: 527, 365: 529, 350: 531, 317: 533, 284: 535, 221: 537, 158: 539, 152: 541, 102: 543, 52: 545, 2: 547}
{22: 47, 11: 49, 9: 51, 73: 97, 61: 99, 59: 101, 146: 152, 142: 164, 128: 166, 121: 168, 115: 170, 209: 215, 205: 227, 191: 229, 184: 231, 178: 233, 247: 264, 241: 266, 280: 297, 274: 299, 328: 344, 367: 391, 352: 393, 346: 395, 322: 397, 405: 431, 448: 474, 433: 476, 399: 478, 316: 480, 301: 482, 268: 484, 235: 486, 172: 488, 109: 490, 103: 492, 53: 494, 3: 496}
{24: 48, 12: 50, 10: 52, 97: 103, 93: 115, 79: 117, 72: 119, 66: 121, 160: 166, 156: 178, 142: 180, 135: 182, 129: 184, 198: 215, 192: 217, 231: 248, 225: 250, 279: 295, 318: 342, 303: 344, 297: 346, 273: 348, 356: 382, 399: 425, 384: 427, 350: 429, 267: 431, 252: 433, 219: 435, 186: 437, 123: 439, 60: 441, 54: 443, 4: 445}
remove lets from formula
final_formula  ( not ( and ( not ( <= 1 ( + hpppppp_0 ( * ( - 1 ) ipppppp_0 ) ) ) ) ( and ( not ( <= 1 ( + hpppppp_1 ( * ( - 1 ) ipppppp_1 ) ) ) ) ( and ( not ( = pcpppppp_0 1 ) ) ( and ( not ( = pcpppppp_1 1 ) ) ( and .def_665 ( and ( and ( not .def_1416 ) ( not ( and .def_830 ( or .def_831 .def_1416 ) ) ) ) ( and ( = ipppppp_0 maxpppppp_0 ) ( and .def_665 ( = maxpppppp_0 ipppppp_1 ) ) ) ) ) ) ) ) ) ) 
[' ( not ( and ( not ( <= 1 ( + hpppppp_0 ( * ( - 1 ) ipppppp_0 ) ) ) ) ( and ( not ( <= 1 ( + hpppppp_1 ( * ( - 1 ) ipppppp_1 ) ) ) ) ( and ( not ( = pcpppppp_0 1 ) ) ( and ( not ( = pcpppppp_1 1 ) ) ( and ( = maxpppppp_1 ipppppp_1 ) ( and ( and ( not ( and ( <= ypppppp_0 ypppppp_1 ) ( <= ypppppp_1 ypppppp_0 ) ) ) ( not ( and ( <= ypppppp_0 ypppppp_1 ) ( or ( <= ypppppp_1 ypppppp_0 ) ( and ( <= ypppppp_0 ypppppp_1 ) ( <= ypppppp_1 ypppppp_0 ) ) ) ) ) ) ( and ( = ipppppp_0 maxpppppp_0 ) ( and ( = maxpppppp_1 ipppppp_1 ) ( = maxpppppp_0 ipppppp_1 ) ) ) ) ) ) ) ) ) ) ']
new_pred_smt_format ['(declare-rel pred_0_synth_msat_3 (Int Int Int Int Int Int))\n (rule (=>  ( = 0  ( +  ( * 2 (rel y 0)  )  ( *  ( - 1  ) (rel y 1)  )  )  ) (pred_0_synth_msat_3 max h i y v pc)))']
['(declare-rel pred_0_synth_msat_3 (Int Int Int Int Int Int))\n (rule (=>  ( = 0  ( +  ( * 2 (rel y 0)  )  ( *  ( - 1  ) (rel y 1)  )  )  ) (pred_0_synth_msat_3 max h i y v pc)))']
Failed to find semantic self-composition. Either the property is violated or not enough predicates were supplied.
Pre-processing time:	0.115319 
Solver time:	52.964961
Total time:	53.08028
Iteration count:	134
Predicate count:	13
Successfully added new predicate to input file. !
Start next refinement loop: True



PDSC: Verifying ./Benchmarks_msat/sum-pc.smt2
Namespace(file='./Benchmarks_msat/sum-pc.smt2', log=False, msat=True, property=None, qe=False, sygus=False)
In if ladder True
1 SMT queries performed.
Proved by invariant:
And(y0_eq_y1,
    max0_eq_max1,
    pred_0_synth_msat_3,
    Or(pc_eq_0_1, pred_0_synth_msat_2))
Pre-processing time:	0.128455 
Solver time:	1.530612
Total time:	1.659067
Iteration count:	1
Predicate count:	14
Start next refinement loop: False



Total time taken : 71.671577
Number of predicates guessed: 4.0
