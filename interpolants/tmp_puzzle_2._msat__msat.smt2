(set-logic AUFLIA)
(set-option :produce-interpolants true) 

(set-option :produce-models true)

(declare-fun ct_1 ()  Int )
(declare-fun ctp_1 ()  Int )
(declare-fun ctpp_1 ()  Int )
(declare-fun ctppp_1 ()  Int )
(declare-fun ctpppp_1 ()  Int )
(declare-fun ctppppp_1 ()  Int )
(declare-fun n_0 ()  Int )
(declare-fun np_0 ()  Int )
(declare-fun npp_0 ()  Int )
(declare-fun nppp_0 ()  Int )
(declare-fun npppp_0 ()  Int )
(declare-fun nppppp_0 ()  Int )
(declare-fun h_1 ()  Int )
(declare-fun hp_1 ()  Int )
(declare-fun hpp_1 ()  Int )
(declare-fun hppp_1 ()  Int )
(declare-fun hpppp_1 ()  Int )
(declare-fun hppppp_1 ()  Int )
(declare-fun h_0 ()  Int )
(declare-fun hp_0 ()  Int )
(declare-fun hpp_0 ()  Int )
(declare-fun hppp_0 ()  Int )
(declare-fun hpppp_0 ()  Int )
(declare-fun hppppp_0 ()  Int )
(declare-fun ct_0 ()  Int )
(declare-fun ctp_0 ()  Int )
(declare-fun ctpp_0 ()  Int )
(declare-fun ctppp_0 ()  Int )
(declare-fun ctpppp_0 ()  Int )
(declare-fun ctppppp_0 ()  Int )
(declare-fun end_1 ()  Int )
(declare-fun endp_1 ()  Int )
(declare-fun endpp_1 ()  Int )
(declare-fun endppp_1 ()  Int )
(declare-fun endpppp_1 ()  Int )
(declare-fun endppppp_1 ()  Int )
(declare-fun n_1 ()  Int )
(declare-fun np_1 ()  Int )
(declare-fun npp_1 ()  Int )
(declare-fun nppp_1 ()  Int )
(declare-fun npppp_1 ()  Int )
(declare-fun nppppp_1 ()  Int )
(declare-fun end_0 ()  Int )
(declare-fun endp_0 ()  Int )
(declare-fun endpp_0 ()  Int )
(declare-fun endppp_0 ()  Int )
(declare-fun endpppp_0 ()  Int )
(declare-fun endppppp_0 ()  Int )
(define-fun A_0 () Bool  (and (= 0 ct_0)
     (= end_0 0)
     (= 0 ct_1)
     (= end_1 0)
     (= n_0 n_1)
     (= h_0 1)
     (= h_1 0)) )
(define-fun A_1 () Bool  (and (or (and true (= h_1 hp_1) (ite (= 1 h_1)                 (ite (not (= n_1 0)) (ite (> (mod n_1 10) 0)                 (and (= ctp_1 (+ ct_1 1)) (= np_1 (div n_1 10)) (= endp_1 0))                 (and (= ctp_1 ct_1) (= np_1 (div n_1 10)) (= endp_1 0))) (and (= ctp_1 ct_1) (= np_1 n_1) (= endp_1 1)))                 (ite (not (= n_1 0)) (and (= ctp_1 (+ ct_1 1)) (= np_1 (div n_1 10)) (= endp_1 0)) (and (= ctp_1 ct_1) (= np_1 n_1) (= endp_1 1)))))            (and (= end_1 endp_1)                 (= n_1 np_1)                 (= h_1 hp_1)                 (= ct_1 ctp_1)                 true                 (= 1 end_1)))        (= end_0 endp_0)        (= n_0 np_0)        (= h_0 hp_0)        (= ct_0 ctp_0))) 
(define-fun A_2 () Bool   ( and ( or ( and true ( = hp_1 hpp_1 ) ( ite ( = 1 hp_1 ) ( ite ( not ( = np_1 0 ) ) ( ite ( > ( mod np_1 10 ) 0 ) ( and ( = ctpp_1 ( + ctp_1 1 ) ) ( = npp_1 ( div np_1 10 ) ) ( = endpp_1 0 ) ) ( and ( = ctpp_1 ctp_1 ) ( = npp_1 ( div np_1 10 ) ) ( = endpp_1 0 ) ) ) ( and ( = ctpp_1 ctp_1 ) ( = npp_1 np_1 ) ( = endpp_1 1 ) ) ) ( ite ( not ( = np_1 0 ) ) ( and ( = ctpp_1 ( + ctp_1 1 ) ) ( = npp_1 ( div np_1 10 ) ) ( = endpp_1 0 ) ) ( and ( = ctpp_1 ctp_1 ) ( = npp_1 np_1 ) ( = endpp_1 1 ) ) ) ) ) ( and ( = endp_1 endpp_1 ) ( = np_1 npp_1 ) ( = hp_1 hpp_1 ) ( = ctp_1 ctpp_1 ) true ( = 1 endp_1 ) ) ) ( = endp_0 endpp_0 ) ( = np_0 npp_0 ) ( = hp_0 hpp_0 ) ( = ctp_0 ctpp_0 ) ) )
(define-fun A_3 () Bool   ( and ( or ( and true ( = hpp_1 hppp_1 ) ( ite ( = 1 hpp_1 ) ( ite ( not ( = npp_1 0 ) ) ( ite ( > ( mod npp_1 10 ) 0 ) ( and ( = ctppp_1 ( + ctpp_1 1 ) ) ( = nppp_1 ( div npp_1 10 ) ) ( = endppp_1 0 ) ) ( and ( = ctppp_1 ctpp_1 ) ( = nppp_1 ( div npp_1 10 ) ) ( = endppp_1 0 ) ) ) ( and ( = ctppp_1 ctpp_1 ) ( = nppp_1 npp_1 ) ( = endppp_1 1 ) ) ) ( ite ( not ( = npp_1 0 ) ) ( and ( = ctppp_1 ( + ctpp_1 1 ) ) ( = nppp_1 ( div npp_1 10 ) ) ( = endppp_1 0 ) ) ( and ( = ctppp_1 ctpp_1 ) ( = nppp_1 npp_1 ) ( = endppp_1 1 ) ) ) ) ) ( and ( = endpp_1 endppp_1 ) ( = npp_1 nppp_1 ) ( = hpp_1 hppp_1 ) ( = ctpp_1 ctppp_1 ) true ( = 1 endpp_1 ) ) ) ( = endpp_0 endppp_0 ) ( = npp_0 nppp_0 ) ( = hpp_0 hppp_0 ) ( = ctpp_0 ctppp_0 ) ) )
(define-fun A_4 () Bool   ( and ( or ( and true ( = hppp_0 hpppp_0 ) ( ite ( = 1 hppp_0 ) ( ite ( not ( = nppp_0 0 ) ) ( ite ( > ( mod nppp_0 10 ) 0 ) ( and ( = ctpppp_0 ( + ctppp_0 1 ) ) ( = npppp_0 ( div nppp_0 10 ) ) ( = endpppp_0 0 ) ) ( and ( = ctpppp_0 ctppp_0 ) ( = npppp_0 ( div nppp_0 10 ) ) ( = endpppp_0 0 ) ) ) ( and ( = ctpppp_0 ctppp_0 ) ( = npppp_0 nppp_0 ) ( = endpppp_0 1 ) ) ) ( ite ( not ( = nppp_0 0 ) ) ( and ( = ctpppp_0 ( + ctppp_0 1 ) ) ( = npppp_0 ( div nppp_0 10 ) ) ( = endpppp_0 0 ) ) ( and ( = ctpppp_0 ctppp_0 ) ( = npppp_0 nppp_0 ) ( = endpppp_0 1 ) ) ) ) ) ( and ( = endppp_0 endpppp_0 ) ( = nppp_0 npppp_0 ) ( = hppp_0 hpppp_0 ) ( = ctppp_0 ctpppp_0 ) true ( = 1 endppp_0 ) ) ) ( = endppp_1 endpppp_1 ) ( = nppp_1 npppp_1 ) ( = hppp_1 hpppp_1 ) ( = ctppp_1 ctpppp_1 ) ) )
(define-fun A_5 () Bool   ( and ( or ( and true ( = hpppp_0 hppppp_0 ) ( ite ( = 1 hpppp_0 ) ( ite ( not ( = npppp_0 0 ) ) ( ite ( > ( mod npppp_0 10 ) 0 ) ( and ( = ctppppp_0 ( + ctpppp_0 1 ) ) ( = nppppp_0 ( div npppp_0 10 ) ) ( = endppppp_0 0 ) ) ( and ( = ctppppp_0 ctpppp_0 ) ( = nppppp_0 ( div npppp_0 10 ) ) ( = endppppp_0 0 ) ) ) ( and ( = ctppppp_0 ctpppp_0 ) ( = nppppp_0 npppp_0 ) ( = endppppp_0 1 ) ) ) ( ite ( not ( = npppp_0 0 ) ) ( and ( = ctppppp_0 ( + ctpppp_0 1 ) ) ( = nppppp_0 ( div npppp_0 10 ) ) ( = endppppp_0 0 ) ) ( and ( = ctppppp_0 ctpppp_0 ) ( = nppppp_0 npppp_0 ) ( = endppppp_0 1 ) ) ) ) ) ( and ( = endpppp_0 endppppp_0 ) ( = npppp_0 nppppp_0 ) ( = hpppp_0 hppppp_0 ) ( = ctpppp_0 ctppppp_0 ) true ( = 1 endpppp_0 ) ) ) ( = endpppp_1 endppppp_1 ) ( = npppp_1 nppppp_1 ) ( = hpppp_1 hppppp_1 ) ( = ctpppp_1 ctppppp_1 ) ) )
(define-fun A_6() Bool      ( and ( = nppppp_0 nppppp_1 ) ( not ( = ctppppp_0 ctppppp_1 ) ) ( = nppppp_0 0 ) ( not ( <= ctppppp_1 0 ) ) ( not ( <= nppppp_0 ( - 1 ) ) ) ( not ( <= ctppppp_1 1 ) ) ( not ( and ( not ( <= nppppp_0 ( - 1 ) ) ) ( not ( = nppppp_0 0 ) ) ( not ( = nppppp_1 0 ) ) ( not ( = nppppp_0 nppppp_1 ) ) ( not ( = nppppp_0 ( div nppppp_1 10 ) ) ) ) ) ( not ( and ( = nppppp_0 nppppp_1 ) ( not ( <= nppppp_0 ( - 1 ) ) ) ( not ( = ( div nppppp_1 10 ) 0 ) ) ) ) ( not ( and ( = ( div nppppp_0 10 ) 0 ) ( = nppppp_1 0 ) ( <= ( + nppppp_1 ( * ( - 1 ) nppppp_0 ) ) ( - 1 ) ) ) ) ( = hppppp_0 1 ) ( = endppppp_0 1 ) ( not ( = ctppppp_0 0 ) ) ( = ctppppp_0 1 ) ( not ( = hppppp_1 1 ) ) ( = endppppp_1 1 ) ( not ( = ctppppp_1 0 ) ) ( not ( = ctppppp_1 1 ) ) ))

(assert ( ! A_0 :interpolation-group g0))
(assert ( ! A_1 :interpolation-group g1))
(assert ( ! A_2 :interpolation-group g2))
(assert ( ! A_3 :interpolation-group g3))
(assert ( ! A_4 :interpolation-group g4))
(assert ( ! A_5 :interpolation-group g5))
(assert ( ! A_6 :interpolation-group g6))
( check-sat )
( get-interpolant ( g0))
( get-interpolant ( g0 g1))
( get-interpolant ( g0 g1 g2))
( get-interpolant ( g0 g1 g2 g3))
( get-interpolant ( g0 g1 g2 g3 g4))
( get-interpolant ( g0 g1 g2 g3 g4 g5))
(exit)