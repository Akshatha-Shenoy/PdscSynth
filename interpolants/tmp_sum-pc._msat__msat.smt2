(set-logic AUFLIA)
(set-option :produce-interpolants true) 

(set-option :produce-models true)

(declare-fun pc_0 ()  Int )
(declare-fun pcp_0 ()  Int )
(declare-fun pcpp_0 ()  Int )
(declare-fun pcppp_0 ()  Int )
(declare-fun pcpppp_0 ()  Int )
(declare-fun pcppppp_0 ()  Int )
(declare-fun pcpppppp_0 ()  Int )
(declare-fun h_1 ()  Int )
(declare-fun hp_1 ()  Int )
(declare-fun hpp_1 ()  Int )
(declare-fun hppp_1 ()  Int )
(declare-fun hpppp_1 ()  Int )
(declare-fun hppppp_1 ()  Int )
(declare-fun hpppppp_1 ()  Int )
(declare-fun pc_1 ()  Int )
(declare-fun pcp_1 ()  Int )
(declare-fun pcpp_1 ()  Int )
(declare-fun pcppp_1 ()  Int )
(declare-fun pcpppp_1 ()  Int )
(declare-fun pcppppp_1 ()  Int )
(declare-fun pcpppppp_1 ()  Int )
(declare-fun h_0 ()  Int )
(declare-fun hp_0 ()  Int )
(declare-fun hpp_0 ()  Int )
(declare-fun hppp_0 ()  Int )
(declare-fun hpppp_0 ()  Int )
(declare-fun hppppp_0 ()  Int )
(declare-fun hpppppp_0 ()  Int )
(declare-fun i_0 ()  Int )
(declare-fun ip_0 ()  Int )
(declare-fun ipp_0 ()  Int )
(declare-fun ippp_0 ()  Int )
(declare-fun ipppp_0 ()  Int )
(declare-fun ippppp_0 ()  Int )
(declare-fun ipppppp_0 ()  Int )
(declare-fun max_0 ()  Int )
(declare-fun maxp_0 ()  Int )
(declare-fun maxpp_0 ()  Int )
(declare-fun maxppp_0 ()  Int )
(declare-fun maxpppp_0 ()  Int )
(declare-fun maxppppp_0 ()  Int )
(declare-fun maxpppppp_0 ()  Int )
(declare-fun y_0 ()  Int )
(declare-fun yp_0 ()  Int )
(declare-fun ypp_0 ()  Int )
(declare-fun yppp_0 ()  Int )
(declare-fun ypppp_0 ()  Int )
(declare-fun yppppp_0 ()  Int )
(declare-fun ypppppp_0 ()  Int )
(declare-fun i_1 ()  Int )
(declare-fun ip_1 ()  Int )
(declare-fun ipp_1 ()  Int )
(declare-fun ippp_1 ()  Int )
(declare-fun ipppp_1 ()  Int )
(declare-fun ippppp_1 ()  Int )
(declare-fun ipppppp_1 ()  Int )
(declare-fun y_1 ()  Int )
(declare-fun yp_1 ()  Int )
(declare-fun ypp_1 ()  Int )
(declare-fun yppp_1 ()  Int )
(declare-fun ypppp_1 ()  Int )
(declare-fun yppppp_1 ()  Int )
(declare-fun ypppppp_1 ()  Int )
(declare-fun v_0 ()  Int )
(declare-fun vp_0 ()  Int )
(declare-fun vpp_0 ()  Int )
(declare-fun vppp_0 ()  Int )
(declare-fun vpppp_0 ()  Int )
(declare-fun vppppp_0 ()  Int )
(declare-fun vpppppp_0 ()  Int )
(declare-fun v_1 ()  Int )
(declare-fun vp_1 ()  Int )
(declare-fun vpp_1 ()  Int )
(declare-fun vppp_1 ()  Int )
(declare-fun vpppp_1 ()  Int )
(declare-fun vppppp_1 ()  Int )
(declare-fun vpppppp_1 ()  Int )
(declare-fun max_1 ()  Int )
(declare-fun maxp_1 ()  Int )
(declare-fun maxpp_1 ()  Int )
(declare-fun maxppp_1 ()  Int )
(declare-fun maxpppp_1 ()  Int )
(declare-fun maxppppp_1 ()  Int )
(declare-fun maxpppppp_1 ()  Int )
(define-fun A_0 () Bool  (and (> h_0 0)
     (> max_0 h_0)
     (= i_0 0)
     (= pc_0 (ite (<= h_0 i_0) 1 0))
     (= y_0 0)
     (= v_0 0)
     (> h_1 0)
     (> max_1 h_1)
     (= i_1 0)
     (= pc_1 (ite (<= h_1 i_1) 1 0))
     (= y_1 0)
     (= v_1 0)
     (= max_0 max_1)) )
(define-fun A_1 () Bool  (and (or (and true                 (or (and (= v_1 0)                 (= pc_1 0)                 (= pcp_1 (ite (<= hp_1 ip_1) 1 0))                 (< h_1 max_1)                 (= max_1 maxp_1)                 (= v_1 vp_1)                 (= h_1 hp_1)                 (= ip_1 (+ i_1 1))                 (= yp_1 (+ y_1 y_1)))                     (and (= v_1 0)                 (= pc_1 1)                 (= pcp_1 (ite (<= max_1 i_1) 3 2))                 (>= i_1 h_1)                 (= max_1 maxp_1)                 (= vp_1 1)                 (= h_1 hp_1)                 (= ip_1 i_1)                 (= yp_1 y_1))                     (and (= v_1 1)                 (= pc_1 2)                 (= pcp_1 (ite (= maxp_1 ip_1) 3 2))                 (< i_1 max_1)                 (= max_1 maxp_1)                 (= v_1 vp_1)                 (= h_1 hp_1)                 (= ip_1 (+ i_1 1))                 (= yp_1 (+ y_1 y_1)))                     (and (= pc_1 3)                          (= pcp_1 3)                          (= v_1 vp_1)                          (= max_1 maxp_1)                          (= h_1 hp_1)                          (= ip_1 i_1)                          (= yp_1 y_1))))            (and (= max_1 maxp_1)                 (= h_1 hp_1)                 (= i_1 ip_1)                 (= y_1 yp_1)                 (= v_1 vp_1)                 (= pc_1 pcp_1)                 true                 (= i_1 max_1)))        (= max_0 maxp_0)        (= h_0 hp_0)        (= i_0 ip_0)        (= y_0 yp_0)        (= v_0 vp_0)        (= pc_0 pcp_0))) 
(define-fun A_2 () Bool   ( and ( or ( and true ( or ( and ( = vp_1 0 ) ( = pcp_1 0 ) ( = pcpp_1 ( ite ( <= hpp_1 ipp_1 ) 1 0 ) ) ( < hp_1 maxp_1 ) ( = maxp_1 maxpp_1 ) ( = vp_1 vpp_1 ) ( = hp_1 hpp_1 ) ( = ipp_1 ( + ip_1 1 ) ) ( = ypp_1 ( + yp_1 yp_1 ) ) ) ( and ( = vp_1 0 ) ( = pcp_1 1 ) ( = pcpp_1 ( ite ( <= maxp_1 ip_1 ) 3 2 ) ) ( >= ip_1 hp_1 ) ( = maxp_1 maxpp_1 ) ( = vpp_1 1 ) ( = hp_1 hpp_1 ) ( = ipp_1 ip_1 ) ( = ypp_1 yp_1 ) ) ( and ( = vp_1 1 ) ( = pcp_1 2 ) ( = pcpp_1 ( ite ( = maxpp_1 ipp_1 ) 3 2 ) ) ( < ip_1 maxp_1 ) ( = maxp_1 maxpp_1 ) ( = vp_1 vpp_1 ) ( = hp_1 hpp_1 ) ( = ipp_1 ( + ip_1 1 ) ) ( = ypp_1 ( + yp_1 yp_1 ) ) ) ( and ( = pcp_1 3 ) ( = pcpp_1 3 ) ( = vp_1 vpp_1 ) ( = maxp_1 maxpp_1 ) ( = hp_1 hpp_1 ) ( = ipp_1 ip_1 ) ( = ypp_1 yp_1 ) ) ) ) ( and ( = maxp_1 maxpp_1 ) ( = hp_1 hpp_1 ) ( = ip_1 ipp_1 ) ( = yp_1 ypp_1 ) ( = vp_1 vpp_1 ) ( = pcp_1 pcpp_1 ) true ( = ip_1 maxp_1 ) ) ) ( = maxp_0 maxpp_0 ) ( = hp_0 hpp_0 ) ( = ip_0 ipp_0 ) ( = yp_0 ypp_0 ) ( = vp_0 vpp_0 ) ( = pcp_0 pcpp_0 ) ) )
(define-fun A_3 () Bool   ( and ( or ( and true ( or ( and ( = vpp_1 0 ) ( = pcpp_1 0 ) ( = pcppp_1 ( ite ( <= hppp_1 ippp_1 ) 1 0 ) ) ( < hpp_1 maxpp_1 ) ( = maxpp_1 maxppp_1 ) ( = vpp_1 vppp_1 ) ( = hpp_1 hppp_1 ) ( = ippp_1 ( + ipp_1 1 ) ) ( = yppp_1 ( + ypp_1 ypp_1 ) ) ) ( and ( = vpp_1 0 ) ( = pcpp_1 1 ) ( = pcppp_1 ( ite ( <= maxpp_1 ipp_1 ) 3 2 ) ) ( >= ipp_1 hpp_1 ) ( = maxpp_1 maxppp_1 ) ( = vppp_1 1 ) ( = hpp_1 hppp_1 ) ( = ippp_1 ipp_1 ) ( = yppp_1 ypp_1 ) ) ( and ( = vpp_1 1 ) ( = pcpp_1 2 ) ( = pcppp_1 ( ite ( = maxppp_1 ippp_1 ) 3 2 ) ) ( < ipp_1 maxpp_1 ) ( = maxpp_1 maxppp_1 ) ( = vpp_1 vppp_1 ) ( = hpp_1 hppp_1 ) ( = ippp_1 ( + ipp_1 1 ) ) ( = yppp_1 ( + ypp_1 ypp_1 ) ) ) ( and ( = pcpp_1 3 ) ( = pcppp_1 3 ) ( = vpp_1 vppp_1 ) ( = maxpp_1 maxppp_1 ) ( = hpp_1 hppp_1 ) ( = ippp_1 ipp_1 ) ( = yppp_1 ypp_1 ) ) ) ) ( and ( = maxpp_1 maxppp_1 ) ( = hpp_1 hppp_1 ) ( = ipp_1 ippp_1 ) ( = ypp_1 yppp_1 ) ( = vpp_1 vppp_1 ) ( = pcpp_1 pcppp_1 ) true ( = ipp_1 maxpp_1 ) ) ) ( = maxpp_0 maxppp_0 ) ( = hpp_0 hppp_0 ) ( = ipp_0 ippp_0 ) ( = ypp_0 yppp_0 ) ( = vpp_0 vppp_0 ) ( = pcpp_0 pcppp_0 ) ) )
(define-fun A_4 () Bool   ( and ( or ( and true ( or ( and ( = vppp_0 0 ) ( = pcppp_0 0 ) ( = pcpppp_0 ( ite ( <= hpppp_0 ipppp_0 ) 1 0 ) ) ( < hppp_0 maxppp_0 ) ( = maxppp_0 maxpppp_0 ) ( = vppp_0 vpppp_0 ) ( = hppp_0 hpppp_0 ) ( = ipppp_0 ( + ippp_0 1 ) ) ( = ypppp_0 ( + yppp_0 yppp_0 ) ) ) ( and ( = vppp_0 0 ) ( = pcppp_0 1 ) ( = pcpppp_0 ( ite ( <= maxppp_0 ippp_0 ) 3 2 ) ) ( >= ippp_0 hppp_0 ) ( = maxppp_0 maxpppp_0 ) ( = vpppp_0 1 ) ( = hppp_0 hpppp_0 ) ( = ipppp_0 ippp_0 ) ( = ypppp_0 yppp_0 ) ) ( and ( = vppp_0 1 ) ( = pcppp_0 2 ) ( = pcpppp_0 ( ite ( = maxpppp_0 ipppp_0 ) 3 2 ) ) ( < ippp_0 maxppp_0 ) ( = maxppp_0 maxpppp_0 ) ( = vppp_0 vpppp_0 ) ( = hppp_0 hpppp_0 ) ( = ipppp_0 ( + ippp_0 1 ) ) ( = ypppp_0 ( + yppp_0 yppp_0 ) ) ) ( and ( = pcppp_0 3 ) ( = pcpppp_0 3 ) ( = vppp_0 vpppp_0 ) ( = maxppp_0 maxpppp_0 ) ( = hppp_0 hpppp_0 ) ( = ipppp_0 ippp_0 ) ( = ypppp_0 yppp_0 ) ) ) ) ( and ( = maxppp_0 maxpppp_0 ) ( = hppp_0 hpppp_0 ) ( = ippp_0 ipppp_0 ) ( = yppp_0 ypppp_0 ) ( = vppp_0 vpppp_0 ) ( = pcppp_0 pcpppp_0 ) true ( = ippp_0 maxppp_0 ) ) ) ( = maxppp_1 maxpppp_1 ) ( = hppp_1 hpppp_1 ) ( = ippp_1 ipppp_1 ) ( = yppp_1 ypppp_1 ) ( = vppp_1 vpppp_1 ) ( = pcppp_1 pcpppp_1 ) ) )
(define-fun A_5 () Bool   ( and ( or ( and true ( or ( and ( = vpppp_0 0 ) ( = pcpppp_0 0 ) ( = pcppppp_0 ( ite ( <= hppppp_0 ippppp_0 ) 1 0 ) ) ( < hpppp_0 maxpppp_0 ) ( = maxpppp_0 maxppppp_0 ) ( = vpppp_0 vppppp_0 ) ( = hpppp_0 hppppp_0 ) ( = ippppp_0 ( + ipppp_0 1 ) ) ( = yppppp_0 ( + ypppp_0 ypppp_0 ) ) ) ( and ( = vpppp_0 0 ) ( = pcpppp_0 1 ) ( = pcppppp_0 ( ite ( <= maxpppp_0 ipppp_0 ) 3 2 ) ) ( >= ipppp_0 hpppp_0 ) ( = maxpppp_0 maxppppp_0 ) ( = vppppp_0 1 ) ( = hpppp_0 hppppp_0 ) ( = ippppp_0 ipppp_0 ) ( = yppppp_0 ypppp_0 ) ) ( and ( = vpppp_0 1 ) ( = pcpppp_0 2 ) ( = pcppppp_0 ( ite ( = maxppppp_0 ippppp_0 ) 3 2 ) ) ( < ipppp_0 maxpppp_0 ) ( = maxpppp_0 maxppppp_0 ) ( = vpppp_0 vppppp_0 ) ( = hpppp_0 hppppp_0 ) ( = ippppp_0 ( + ipppp_0 1 ) ) ( = yppppp_0 ( + ypppp_0 ypppp_0 ) ) ) ( and ( = pcpppp_0 3 ) ( = pcppppp_0 3 ) ( = vpppp_0 vppppp_0 ) ( = maxpppp_0 maxppppp_0 ) ( = hpppp_0 hppppp_0 ) ( = ippppp_0 ipppp_0 ) ( = yppppp_0 ypppp_0 ) ) ) ) ( and ( = maxpppp_0 maxppppp_0 ) ( = hpppp_0 hppppp_0 ) ( = ipppp_0 ippppp_0 ) ( = ypppp_0 yppppp_0 ) ( = vpppp_0 vppppp_0 ) ( = pcpppp_0 pcppppp_0 ) true ( = ipppp_0 maxpppp_0 ) ) ) ( = maxpppp_1 maxppppp_1 ) ( = hpppp_1 hppppp_1 ) ( = ipppp_1 ippppp_1 ) ( = ypppp_1 yppppp_1 ) ( = vpppp_1 vppppp_1 ) ( = pcpppp_1 pcppppp_1 ) ) )
(define-fun A_6 () Bool   ( and ( or ( and true ( or ( and ( = vppppp_0 0 ) ( = pcppppp_0 0 ) ( = pcpppppp_0 ( ite ( <= hpppppp_0 ipppppp_0 ) 1 0 ) ) ( < hppppp_0 maxppppp_0 ) ( = maxppppp_0 maxpppppp_0 ) ( = vppppp_0 vpppppp_0 ) ( = hppppp_0 hpppppp_0 ) ( = ipppppp_0 ( + ippppp_0 1 ) ) ( = ypppppp_0 ( + yppppp_0 yppppp_0 ) ) ) ( and ( = vppppp_0 0 ) ( = pcppppp_0 1 ) ( = pcpppppp_0 ( ite ( <= maxppppp_0 ippppp_0 ) 3 2 ) ) ( >= ippppp_0 hppppp_0 ) ( = maxppppp_0 maxpppppp_0 ) ( = vpppppp_0 1 ) ( = hppppp_0 hpppppp_0 ) ( = ipppppp_0 ippppp_0 ) ( = ypppppp_0 yppppp_0 ) ) ( and ( = vppppp_0 1 ) ( = pcppppp_0 2 ) ( = pcpppppp_0 ( ite ( = maxpppppp_0 ipppppp_0 ) 3 2 ) ) ( < ippppp_0 maxppppp_0 ) ( = maxppppp_0 maxpppppp_0 ) ( = vppppp_0 vpppppp_0 ) ( = hppppp_0 hpppppp_0 ) ( = ipppppp_0 ( + ippppp_0 1 ) ) ( = ypppppp_0 ( + yppppp_0 yppppp_0 ) ) ) ( and ( = pcppppp_0 3 ) ( = pcpppppp_0 3 ) ( = vppppp_0 vpppppp_0 ) ( = maxppppp_0 maxpppppp_0 ) ( = hppppp_0 hpppppp_0 ) ( = ipppppp_0 ippppp_0 ) ( = ypppppp_0 yppppp_0 ) ) ) ) ( and ( = maxppppp_0 maxpppppp_0 ) ( = hppppp_0 hpppppp_0 ) ( = ippppp_0 ipppppp_0 ) ( = yppppp_0 ypppppp_0 ) ( = vppppp_0 vpppppp_0 ) ( = pcppppp_0 pcpppppp_0 ) true ( = ippppp_0 maxppppp_0 ) ) ) ( = maxppppp_1 maxpppppp_1 ) ( = hppppp_1 hpppppp_1 ) ( = ippppp_1 ipppppp_1 ) ( = yppppp_1 ypppppp_1 ) ( = vppppp_1 vpppppp_1 ) ( = pcppppp_1 pcpppppp_1 ) ) )
(define-fun A_7() Bool      ( and ( not ( = ypppppp_0 ypppppp_1 ) ) ( = ipppppp_0 ipppppp_1 ) ( = maxpppppp_0 maxpppppp_1 ) ( not ( = ( + hpppppp_1 ( * ( - 1 ) ipppppp_1 ) ) 1 ) ) ( <= hpppppp_1 ipppppp_1 ) ( not ( = pcpppppp_0 0 ) ) ( not ( = pcpppppp_0 1 ) ) ( = ipppppp_0 maxpppppp_0 ) ( not ( <= ipppppp_0 hpppppp_0 ) ) ( not ( = pcpppppp_1 0 ) ) ( not ( = pcpppppp_1 1 ) ) ( = ipppppp_1 maxpppppp_1 ) ( not ( <= ipppppp_1 hpppppp_1 ) ) ))

(assert ( ! A_0 :interpolation-group g0))
(assert ( ! A_1 :interpolation-group g1))
(assert ( ! A_2 :interpolation-group g2))
(assert ( ! A_3 :interpolation-group g3))
(assert ( ! A_4 :interpolation-group g4))
(assert ( ! A_5 :interpolation-group g5))
(assert ( ! A_6 :interpolation-group g6))
(assert ( ! A_7 :interpolation-group g7))
( check-sat )
( get-interpolant ( g0))
( get-interpolant ( g0 g1))
( get-interpolant ( g0 g1 g2))
( get-interpolant ( g0 g1 g2 g3))
( get-interpolant ( g0 g1 g2 g3 g4))
( get-interpolant ( g0 g1 g2 g3 g4 g5))
( get-interpolant ( g0 g1 g2 g3 g4 g5 g6))
(exit)