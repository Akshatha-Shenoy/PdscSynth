(set-logic AUFLIA)
(set-option :produce-interpolants true) 

(set-option :produce-models true)

(declare-fun x_1 ()  Int )
(declare-fun xp_1 ()  Int )
(declare-fun xpp_1 ()  Int )
(declare-fun h_1 ()  Int )
(declare-fun hp_1 ()  Int )
(declare-fun hpp_1 ()  Int )
(declare-fun count_0 ()  Int )
(declare-fun countp_0 ()  Int )
(declare-fun countpp_0 ()  Int )
(declare-fun h_0 ()  Int )
(declare-fun hp_0 ()  Int )
(declare-fun hpp_0 ()  Int )
(declare-fun x_0 ()  Int )
(declare-fun xp_0 ()  Int )
(declare-fun xpp_0 ()  Int )
(declare-fun count_1 ()  Int )
(declare-fun countp_1 ()  Int )
(declare-fun countpp_1 ()  Int )
(define-fun A_0 () Bool  (and (= 0 count_0) (= 0 count_1) (= x_0 x_1) (= h_0 1) (= h_1 0)) )
(define-fun A_1 () Bool  (and (or (and true (ite (= 1 h_1)                 (ite (= 0 count_1)                 (and (= xp_1 (- 42 x_1)) (= h_1 hp_1) (= countp_1 1))                 (and (= x_1 xp_1) (= h_1 hp_1) (= count_1 countp_1)))                 (ite (= count_1 0)                      (and (= 42 xp_1) (= h_1 hp_1) (= 1 countp_1))                      (and (= x_1 xp_1) (= h_1 hp_1) (= count_1 countp_1))))) (and (and (= x_1 xp_1) (= h_1 hp_1) (= count_1 countp_1)) true (= 1 count_1)))        (= x_0 xp_0)        (= h_0 hp_0)        (= count_0 countp_0))) 
(define-fun A_2 () Bool   ( and ( or ( and true ( ite ( = 1 hp_0 ) ( ite ( = 0 countp_0 ) ( and ( = xpp_0 ( - 42 xp_0 ) ) ( = hp_0 hpp_0 ) ( = countpp_0 1 ) ) ( and ( = xp_0 xpp_0 ) ( = hp_0 hpp_0 ) ( = countp_0 countpp_0 ) ) ) ( ite ( = countp_0 0 ) ( and ( = 42 xpp_0 ) ( = hp_0 hpp_0 ) ( = 1 countpp_0 ) ) ( and ( = xp_0 xpp_0 ) ( = hp_0 hpp_0 ) ( = countp_0 countpp_0 ) ) ) ) ) ( and ( and ( = xp_0 xpp_0 ) ( = hp_0 hpp_0 ) ( = countp_0 countpp_0 ) ) true ( = 1 countp_0 ) ) ) ( = xp_1 xpp_1 ) ( = hp_1 hpp_1 ) ( = countp_1 countpp_1 ) ) )
(define-fun A_3() Bool      ( and ( not ( = xpp_0 xpp_1 ) ) ( = hpp_0 1 ) ( not ( = countpp_0 0 ) ) ( = countpp_0 1 ) ( not ( = hpp_1 1 ) ) ( not ( = countpp_1 0 ) ) ( = countpp_1 1 ) ))

(assert ( ! A_0 :interpolation-group g0))
(assert ( ! A_1 :interpolation-group g1))
(assert ( ! A_2 :interpolation-group g2))
(assert ( ! A_3 :interpolation-group g3))
( check-sat )
( get-interpolant ( g0))
( get-interpolant ( g0 g1))
( get-interpolant ( g0 g1 g2))
(exit)