(set-logic AUFLIA)
(set-option :produce-interpolants true) 

(set-option :produce-models true)

(declare-fun x_1 ()  Int )
(declare-fun xp_1 ()  Int )
(declare-fun xpp_1 ()  Int )
(declare-fun xppp_1 ()  Int )
(declare-fun xpppp_1 ()  Int )
(declare-fun xppppp_1 ()  Int )
(declare-fun xpppppp_1 ()  Int )
(declare-fun xppppppp_1 ()  Int )
(declare-fun h_1 ()  Int )
(declare-fun hp_1 ()  Int )
(declare-fun hpp_1 ()  Int )
(declare-fun hppp_1 ()  Int )
(declare-fun hpppp_1 ()  Int )
(declare-fun hppppp_1 ()  Int )
(declare-fun hpppppp_1 ()  Int )
(declare-fun hppppppp_1 ()  Int )
(declare-fun h_0 ()  Int )
(declare-fun hp_0 ()  Int )
(declare-fun hpp_0 ()  Int )
(declare-fun hppp_0 ()  Int )
(declare-fun hpppp_0 ()  Int )
(declare-fun hppppp_0 ()  Int )
(declare-fun hpppppp_0 ()  Int )
(declare-fun hppppppp_0 ()  Int )
(declare-fun x_0 ()  Int )
(declare-fun xp_0 ()  Int )
(declare-fun xpp_0 ()  Int )
(declare-fun xppp_0 ()  Int )
(declare-fun xpppp_0 ()  Int )
(declare-fun xppppp_0 ()  Int )
(declare-fun xpppppp_0 ()  Int )
(declare-fun xppppppp_0 ()  Int )
(declare-fun end_0 ()  Int )
(declare-fun endp_0 ()  Int )
(declare-fun endpp_0 ()  Int )
(declare-fun endppp_0 ()  Int )
(declare-fun endpppp_0 ()  Int )
(declare-fun endppppp_0 ()  Int )
(declare-fun endpppppp_0 ()  Int )
(declare-fun endppppppp_0 ()  Int )
(declare-fun z_0 ()  Int )
(declare-fun zp_0 ()  Int )
(declare-fun zpp_0 ()  Int )
(declare-fun zppp_0 ()  Int )
(declare-fun zpppp_0 ()  Int )
(declare-fun zppppp_0 ()  Int )
(declare-fun zpppppp_0 ()  Int )
(declare-fun zppppppp_0 ()  Int )
(declare-fun y_0 ()  Int )
(declare-fun yp_0 ()  Int )
(declare-fun ypp_0 ()  Int )
(declare-fun yppp_0 ()  Int )
(declare-fun ypppp_0 ()  Int )
(declare-fun yppppp_0 ()  Int )
(declare-fun ypppppp_0 ()  Int )
(declare-fun yppppppp_0 ()  Int )
(declare-fun y_1 ()  Int )
(declare-fun yp_1 ()  Int )
(declare-fun ypp_1 ()  Int )
(declare-fun yppp_1 ()  Int )
(declare-fun ypppp_1 ()  Int )
(declare-fun yppppp_1 ()  Int )
(declare-fun ypppppp_1 ()  Int )
(declare-fun yppppppp_1 ()  Int )
(declare-fun z_1 ()  Int )
(declare-fun zp_1 ()  Int )
(declare-fun zpp_1 ()  Int )
(declare-fun zppp_1 ()  Int )
(declare-fun zpppp_1 ()  Int )
(declare-fun zppppp_1 ()  Int )
(declare-fun zpppppp_1 ()  Int )
(declare-fun zppppppp_1 ()  Int )
(declare-fun end_1 ()  Int )
(declare-fun endp_1 ()  Int )
(declare-fun endpp_1 ()  Int )
(declare-fun endppp_1 ()  Int )
(declare-fun endpppp_1 ()  Int )
(declare-fun endppppp_1 ()  Int )
(declare-fun endpppppp_1 ()  Int )
(declare-fun endppppppp_1 ()  Int )
(define-fun A_0 () Bool  (and (= z_0 (ite (= 1 h_0) (* 2 x_0) x_0))
     (> x_0 0)
     (= y_0 0)
     (= 0 end_0)
     (= z_1 (ite (= 1 h_1) (* 2 x_1) x_1))
     (> x_1 0)
     (= y_1 0)
     (= 0 end_1)
     (= h_1 1)
     (= h_0 0)
     (= x_0 x_1)) )
(define-fun A_1 () Bool  (and (or (and true (= h_1 hp_1) (= x_1 xp_1) (or (and (> z_1 0)                     (= 0 endp_1)                     (= 0 end_1)                     (= zp_1 (- z_1 1))                     (= yp_1 (+ x_1 y_1)))                (and (<= z_1 0)                 (= 0 end_1)                 (= 1 endp_1)                 (= zp_1 z_1)                 (= yp_1 (ite (= 1 h_1) y_1 (* 2 y_1))))                (and (= zp_1 z_1) (= 1 end_1) (= 1 endp_1) (= yp_1 y_1))))            (and (= z_1 zp_1)                 (= y_1 yp_1)                 (= x_1 xp_1)                 (= h_1 hp_1)                 (= end_1 endp_1)                 true                 (= 1 end_1)))        (= z_0 zp_0)        (= y_0 yp_0)        (= x_0 xp_0)        (= h_0 hp_0)        (= end_0 endp_0))) 
(define-fun A_2 () Bool   ( and ( or ( and true ( = hp_1 hpp_1 ) ( = xp_1 xpp_1 ) ( or ( and ( > zp_1 0 ) ( = 0 endpp_1 ) ( = 0 endp_1 ) ( = zpp_1 ( - zp_1 1 ) ) ( = ypp_1 ( + xp_1 yp_1 ) ) ) ( and ( <= zp_1 0 ) ( = 0 endp_1 ) ( = 1 endpp_1 ) ( = zpp_1 zp_1 ) ( = ypp_1 ( ite ( = 1 hp_1 ) yp_1 ( * 2 yp_1 ) ) ) ) ( and ( = zpp_1 zp_1 ) ( = 1 endp_1 ) ( = 1 endpp_1 ) ( = ypp_1 yp_1 ) ) ) ) ( and ( = zp_1 zpp_1 ) ( = yp_1 ypp_1 ) ( = xp_1 xpp_1 ) ( = hp_1 hpp_1 ) ( = endp_1 endpp_1 ) true ( = 1 endp_1 ) ) ) ( = zp_0 zpp_0 ) ( = yp_0 ypp_0 ) ( = xp_0 xpp_0 ) ( = hp_0 hpp_0 ) ( = endp_0 endpp_0 ) ) )
(define-fun A_3 () Bool   ( and ( or ( and true ( = hpp_1 hppp_1 ) ( = xpp_1 xppp_1 ) ( or ( and ( > zpp_1 0 ) ( = 0 endppp_1 ) ( = 0 endpp_1 ) ( = zppp_1 ( - zpp_1 1 ) ) ( = yppp_1 ( + xpp_1 ypp_1 ) ) ) ( and ( <= zpp_1 0 ) ( = 0 endpp_1 ) ( = 1 endppp_1 ) ( = zppp_1 zpp_1 ) ( = yppp_1 ( ite ( = 1 hpp_1 ) ypp_1 ( * 2 ypp_1 ) ) ) ) ( and ( = zppp_1 zpp_1 ) ( = 1 endpp_1 ) ( = 1 endppp_1 ) ( = yppp_1 ypp_1 ) ) ) ) ( and ( = zpp_1 zppp_1 ) ( = ypp_1 yppp_1 ) ( = xpp_1 xppp_1 ) ( = hpp_1 hppp_1 ) ( = endpp_1 endppp_1 ) true ( = 1 endpp_1 ) ) ) ( = zpp_0 zppp_0 ) ( = ypp_0 yppp_0 ) ( = xpp_0 xppp_0 ) ( = hpp_0 hppp_0 ) ( = endpp_0 endppp_0 ) ) )
(define-fun A_4 () Bool   ( and ( or ( and true ( = hppp_1 hpppp_1 ) ( = xppp_1 xpppp_1 ) ( or ( and ( > zppp_1 0 ) ( = 0 endpppp_1 ) ( = 0 endppp_1 ) ( = zpppp_1 ( - zppp_1 1 ) ) ( = ypppp_1 ( + xppp_1 yppp_1 ) ) ) ( and ( <= zppp_1 0 ) ( = 0 endppp_1 ) ( = 1 endpppp_1 ) ( = zpppp_1 zppp_1 ) ( = ypppp_1 ( ite ( = 1 hppp_1 ) yppp_1 ( * 2 yppp_1 ) ) ) ) ( and ( = zpppp_1 zppp_1 ) ( = 1 endppp_1 ) ( = 1 endpppp_1 ) ( = ypppp_1 yppp_1 ) ) ) ) ( and ( = zppp_1 zpppp_1 ) ( = yppp_1 ypppp_1 ) ( = xppp_1 xpppp_1 ) ( = hppp_1 hpppp_1 ) ( = endppp_1 endpppp_1 ) true ( = 1 endppp_1 ) ) ) ( = zppp_0 zpppp_0 ) ( = yppp_0 ypppp_0 ) ( = xppp_0 xpppp_0 ) ( = hppp_0 hpppp_0 ) ( = endppp_0 endpppp_0 ) ) )
(define-fun A_5 () Bool   ( and ( or ( and true ( = hpppp_1 hppppp_1 ) ( = xpppp_1 xppppp_1 ) ( or ( and ( > zpppp_1 0 ) ( = 0 endppppp_1 ) ( = 0 endpppp_1 ) ( = zppppp_1 ( - zpppp_1 1 ) ) ( = yppppp_1 ( + xpppp_1 ypppp_1 ) ) ) ( and ( <= zpppp_1 0 ) ( = 0 endpppp_1 ) ( = 1 endppppp_1 ) ( = zppppp_1 zpppp_1 ) ( = yppppp_1 ( ite ( = 1 hpppp_1 ) ypppp_1 ( * 2 ypppp_1 ) ) ) ) ( and ( = zppppp_1 zpppp_1 ) ( = 1 endpppp_1 ) ( = 1 endppppp_1 ) ( = yppppp_1 ypppp_1 ) ) ) ) ( and ( = zpppp_1 zppppp_1 ) ( = ypppp_1 yppppp_1 ) ( = xpppp_1 xppppp_1 ) ( = hpppp_1 hppppp_1 ) ( = endpppp_1 endppppp_1 ) true ( = 1 endpppp_1 ) ) ) ( = zpppp_0 zppppp_0 ) ( = ypppp_0 yppppp_0 ) ( = xpppp_0 xppppp_0 ) ( = hpppp_0 hppppp_0 ) ( = endpppp_0 endppppp_0 ) ) )
(define-fun A_6 () Bool   ( and ( or ( and true ( = hppppp_0 hpppppp_0 ) ( = xppppp_0 xpppppp_0 ) ( or ( and ( > zppppp_0 0 ) ( = 0 endpppppp_0 ) ( = 0 endppppp_0 ) ( = zpppppp_0 ( - zppppp_0 1 ) ) ( = ypppppp_0 ( + xppppp_0 yppppp_0 ) ) ) ( and ( <= zppppp_0 0 ) ( = 0 endppppp_0 ) ( = 1 endpppppp_0 ) ( = zpppppp_0 zppppp_0 ) ( = ypppppp_0 ( ite ( = 1 hppppp_0 ) yppppp_0 ( * 2 yppppp_0 ) ) ) ) ( and ( = zpppppp_0 zppppp_0 ) ( = 1 endppppp_0 ) ( = 1 endpppppp_0 ) ( = ypppppp_0 yppppp_0 ) ) ) ) ( and ( = zppppp_0 zpppppp_0 ) ( = yppppp_0 ypppppp_0 ) ( = xppppp_0 xpppppp_0 ) ( = hppppp_0 hpppppp_0 ) ( = endppppp_0 endpppppp_0 ) true ( = 1 endppppp_0 ) ) ) ( = zppppp_1 zpppppp_1 ) ( = yppppp_1 ypppppp_1 ) ( = xppppp_1 xpppppp_1 ) ( = hppppp_1 hpppppp_1 ) ( = endppppp_1 endpppppp_1 ) ) )
(define-fun A_7 () Bool   ( and ( or ( and true ( = hpppppp_0 hppppppp_0 ) ( = xpppppp_0 xppppppp_0 ) ( or ( and ( > zpppppp_0 0 ) ( = 0 endppppppp_0 ) ( = 0 endpppppp_0 ) ( = zppppppp_0 ( - zpppppp_0 1 ) ) ( = yppppppp_0 ( + xpppppp_0 ypppppp_0 ) ) ) ( and ( <= zpppppp_0 0 ) ( = 0 endpppppp_0 ) ( = 1 endppppppp_0 ) ( = zppppppp_0 zpppppp_0 ) ( = yppppppp_0 ( ite ( = 1 hpppppp_0 ) ypppppp_0 ( * 2 ypppppp_0 ) ) ) ) ( and ( = zppppppp_0 zpppppp_0 ) ( = 1 endpppppp_0 ) ( = 1 endppppppp_0 ) ( = yppppppp_0 ypppppp_0 ) ) ) ) ( and ( = zpppppp_0 zppppppp_0 ) ( = ypppppp_0 yppppppp_0 ) ( = xpppppp_0 xppppppp_0 ) ( = hpppppp_0 hppppppp_0 ) ( = endpppppp_0 endppppppp_0 ) true ( = 1 endpppppp_0 ) ) ) ( = zpppppp_1 zppppppp_1 ) ( = ypppppp_1 yppppppp_1 ) ( = xpppppp_1 xppppppp_1 ) ( = hpppppp_1 hppppppp_1 ) ( = endpppppp_1 endppppppp_1 ) ) )
(define-fun A_8() Bool      ( and ( = zppppppp_0 zppppppp_1 ) ( not ( = yppppppp_0 yppppppp_1 ) ) ( = xppppppp_0 xppppppp_1 ) ( not ( <= xppppppp_0 0 ) ) ( = zppppppp_1 ( * 2 zppppppp_0 ) ) ( not ( = yppppppp_1 ( * 2 yppppppp_0 ) ) ) ( not ( = ( + ( * 2 xppppppp_0 ) ( * 2 yppppppp_0 ) ( * ( - 2 ) xppppppp_1 ) ( * ( - 1 ) yppppppp_1 ) ) 0 ) ) ( not ( >= zppppppp_0 1 ) ) ( not ( = endppppppp_1 0 ) ) ( not ( = ( + xppppppp_1 yppppppp_1 ( * ( - 2 ) yppppppp_0 ) ( * ( - 2 ) xppppppp_0 ) ) 0 ) ) ( not ( >= zppppppp_1 2 ) ) ( not ( = ( + yppppppp_1 ( * ( - 2 ) yppppppp_0 ) ( * ( - 2 ) xppppppp_0 ) ) 0 ) ) ( >= yppppppp_0 0 ) ( >= zppppppp_0 0 ) ( = endppppppp_0 1 ) ( not ( = hppppppp_0 1 ) ) ( >= yppppppp_1 0 ) ( >= zppppppp_1 0 ) ( = endppppppp_1 1 ) ( = hppppppp_1 1 ) ))

(assert ( ! A_0 :interpolation-group g0))
(assert ( ! A_1 :interpolation-group g1))
(assert ( ! A_2 :interpolation-group g2))
(assert ( ! A_3 :interpolation-group g3))
(assert ( ! A_4 :interpolation-group g4))
(assert ( ! A_5 :interpolation-group g5))
(assert ( ! A_6 :interpolation-group g6))
(assert ( ! A_7 :interpolation-group g7))
(assert ( ! A_8 :interpolation-group g8))
( check-sat )
( get-interpolant ( g0))
( get-interpolant ( g0 g1))
( get-interpolant ( g0 g1 g2))
( get-interpolant ( g0 g1 g2 g3))
( get-interpolant ( g0 g1 g2 g3 g4))
( get-interpolant ( g0 g1 g2 g3 g4 g5))
( get-interpolant ( g0 g1 g2 g3 g4 g5 g6))
( get-interpolant ( g0 g1 g2 g3 g4 g5 g6 g7))
(exit)