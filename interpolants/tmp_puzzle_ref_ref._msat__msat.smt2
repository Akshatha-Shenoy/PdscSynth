(set-logic AUFLIA)
(set-option :produce-interpolants true) 

(set-option :produce-models true)

(declare-fun h_1 ()  Int )
(declare-fun hp_1 ()  Int )
(declare-fun hpp_1 ()  Int )
(declare-fun hppp_1 ()  Int )
(declare-fun h_0 ()  Int )
(declare-fun hp_0 ()  Int )
(declare-fun hpp_0 ()  Int )
(declare-fun hppp_0 ()  Int )
(declare-fun m_1 ()  Int )
(declare-fun mp_1 ()  Int )
(declare-fun mpp_1 ()  Int )
(declare-fun mppp_1 ()  Int )
(declare-fun m_0 ()  Int )
(declare-fun mp_0 ()  Int )
(declare-fun mpp_0 ()  Int )
(declare-fun mppp_0 ()  Int )
(declare-fun end_0 ()  Int )
(declare-fun endp_0 ()  Int )
(declare-fun endpp_0 ()  Int )
(declare-fun endppp_0 ()  Int )
(declare-fun n_0 ()  Int )
(declare-fun np_0 ()  Int )
(declare-fun npp_0 ()  Int )
(declare-fun nppp_0 ()  Int )
(declare-fun ct_0 ()  Int )
(declare-fun ctp_0 ()  Int )
(declare-fun ctpp_0 ()  Int )
(declare-fun ctppp_0 ()  Int )
(declare-fun end_1 ()  Int )
(declare-fun endp_1 ()  Int )
(declare-fun endpp_1 ()  Int )
(declare-fun endppp_1 ()  Int )
(declare-fun n_1 ()  Int )
(declare-fun np_1 ()  Int )
(declare-fun npp_1 ()  Int )
(declare-fun nppp_1 ()  Int )
(declare-fun ct_1 ()  Int )
(declare-fun ctp_1 ()  Int )
(declare-fun ctpp_1 ()  Int )
(declare-fun ctppp_1 ()  Int )
(define-fun A_0 () Bool  (and (= 0 ct_0)
     (= m_0 n_0)
     (= end_0 0)
     (= 0 ct_1)
     (= m_1 n_1)
     (= end_1 0)
     (= n_0 n_1)
     (= h_0 1)
     (= h_1 0)) )
(define-fun A_1 () Bool  (and (or (and true                 (= h_1 hp_1)                 (ite (not (= n_1 0))                      (ite (> (mod n_1 10) 0)                 (and (= ctp_1 (+ ct_1 1))                      (= np_1 (div n_1 10))                      (= mp_1 m_1)                      (= endp_1 0))                 (and (= ctp_1 ct_1)                      (= np_1 (div n_1 10))                      (= mp_1 m_1)                      (= endp_1 0)))                      (and (= ctp_1 ct_1) (= mp_1 m_1) (= np_1 n_1) (= endp_1 1))))            (and (= end_1 endp_1)                 (= n_1 np_1)                 (= m_1 mp_1)                 (= h_1 hp_1)                 (= ct_1 ctp_1)                 true                 (= 1 end_1)))        (= end_0 endp_0)        (= n_0 np_0)        (= m_0 mp_0)        (= h_0 hp_0)        (= ct_0 ctp_0))) 
(define-fun A_2 () Bool   ( and ( or ( and true ( = hp_0 hpp_0 ) ( ite ( not ( = np_0 0 ) ) ( ite ( > ( mod np_0 10 ) 0 ) ( and ( = ctpp_0 ( + ctp_0 1 ) ) ( = npp_0 ( div np_0 10 ) ) ( = mpp_0 mp_0 ) ( = endpp_0 0 ) ) ( and ( = ctpp_0 ctp_0 ) ( = npp_0 ( div np_0 10 ) ) ( = mpp_0 mp_0 ) ( = endpp_0 0 ) ) ) ( and ( = ctpp_0 ctp_0 ) ( = mpp_0 mp_0 ) ( = npp_0 np_0 ) ( = endpp_0 1 ) ) ) ) ( and ( = endp_0 endpp_0 ) ( = np_0 npp_0 ) ( = mp_0 mpp_0 ) ( = hp_0 hpp_0 ) ( = ctp_0 ctpp_0 ) true ( = 1 endp_0 ) ) ) ( = endp_1 endpp_1 ) ( = np_1 npp_1 ) ( = mp_1 mpp_1 ) ( = hp_1 hpp_1 ) ( = ctp_1 ctpp_1 ) ) )
(define-fun A_3 () Bool   ( and ( or ( and true ( = hpp_0 hppp_0 ) ( ite ( not ( = npp_0 0 ) ) ( ite ( > ( mod npp_0 10 ) 0 ) ( and ( = ctppp_0 ( + ctpp_0 1 ) ) ( = nppp_0 ( div npp_0 10 ) ) ( = mppp_0 mpp_0 ) ( = endppp_0 0 ) ) ( and ( = ctppp_0 ctpp_0 ) ( = nppp_0 ( div npp_0 10 ) ) ( = mppp_0 mpp_0 ) ( = endppp_0 0 ) ) ) ( and ( = ctppp_0 ctpp_0 ) ( = mppp_0 mpp_0 ) ( = nppp_0 npp_0 ) ( = endppp_0 1 ) ) ) ) ( and ( = endpp_0 endppp_0 ) ( = npp_0 nppp_0 ) ( = mpp_0 mppp_0 ) ( = hpp_0 hppp_0 ) ( = ctpp_0 ctppp_0 ) true ( = 1 endpp_0 ) ) ) ( = endpp_1 endppp_1 ) ( = npp_1 nppp_1 ) ( = mpp_1 mppp_1 ) ( = hpp_1 hppp_1 ) ( = ctpp_1 ctppp_1 ) ) )
(define-fun A_4() Bool      ( and ( = nppp_0 nppp_1 ) ( not ( = ctppp_0 ctppp_1 ) ) ( = mppp_0 nppp_0 ) ( = hppp_0 1 ) ( = endppp_0 1 ) ( not ( = ctppp_0 0 ) ) ( = ctppp_0 1 ) ( = mppp_1 nppp_1 ) ( not ( = hppp_1 1 ) ) ( = endppp_1 1 ) ( = ctppp_1 0 ) ( not ( = ctppp_1 1 ) ) ))

(assert ( ! A_0 :interpolation-group g0))
(assert ( ! A_1 :interpolation-group g1))
(assert ( ! A_2 :interpolation-group g2))
(assert ( ! A_3 :interpolation-group g3))
(assert ( ! A_4 :interpolation-group g4))
( check-sat )
( get-interpolant ( g0))
( get-interpolant ( g0 g1))
( get-interpolant ( g0 g1 g2))
( get-interpolant ( g0 g1 g2 g3))
(exit)