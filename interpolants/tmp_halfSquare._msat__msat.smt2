(set-logic AUFLIA)
(set-option :produce-interpolants true) 

(set-option :produce-models true)

(declare-fun x_1 ()  Int )
(declare-fun xp_1 ()  Int )
(declare-fun xpp_1 ()  Int )
(declare-fun xppp_1 ()  Int )
(declare-fun xpppp_1 ()  Int )
(declare-fun xppppp_1 ()  Int )
(declare-fun xpppppp_1 ()  Int )
(declare-fun pc_0 ()  Int )
(declare-fun pcp_0 ()  Int )
(declare-fun pcpp_0 ()  Int )
(declare-fun pcppp_0 ()  Int )
(declare-fun pcpppp_0 ()  Int )
(declare-fun pcppppp_0 ()  Int )
(declare-fun pcpppppp_0 ()  Int )
(declare-fun pc_1 ()  Int )
(declare-fun pcp_1 ()  Int )
(declare-fun pcpp_1 ()  Int )
(declare-fun pcppp_1 ()  Int )
(declare-fun pcpppp_1 ()  Int )
(declare-fun pcppppp_1 ()  Int )
(declare-fun pcpppppp_1 ()  Int )
(declare-fun i_0 ()  Int )
(declare-fun ip_0 ()  Int )
(declare-fun ipp_0 ()  Int )
(declare-fun ippp_0 ()  Int )
(declare-fun ipppp_0 ()  Int )
(declare-fun ippppp_0 ()  Int )
(declare-fun ipppppp_0 ()  Int )
(declare-fun max_0 ()  Int )
(declare-fun maxp_0 ()  Int )
(declare-fun maxpp_0 ()  Int )
(declare-fun maxppp_0 ()  Int )
(declare-fun maxpppp_0 ()  Int )
(declare-fun maxppppp_0 ()  Int )
(declare-fun maxpppppp_0 ()  Int )
(declare-fun x_0 ()  Int )
(declare-fun xp_0 ()  Int )
(declare-fun xpp_0 ()  Int )
(declare-fun xppp_0 ()  Int )
(declare-fun xpppp_0 ()  Int )
(declare-fun xppppp_0 ()  Int )
(declare-fun xpppppp_0 ()  Int )
(declare-fun y_0 ()  Int )
(declare-fun yp_0 ()  Int )
(declare-fun ypp_0 ()  Int )
(declare-fun yppp_0 ()  Int )
(declare-fun ypppp_0 ()  Int )
(declare-fun yppppp_0 ()  Int )
(declare-fun ypppppp_0 ()  Int )
(declare-fun i_1 ()  Int )
(declare-fun ip_1 ()  Int )
(declare-fun ipp_1 ()  Int )
(declare-fun ippp_1 ()  Int )
(declare-fun ipppp_1 ()  Int )
(declare-fun ippppp_1 ()  Int )
(declare-fun ipppppp_1 ()  Int )
(declare-fun y_1 ()  Int )
(declare-fun yp_1 ()  Int )
(declare-fun ypp_1 ()  Int )
(declare-fun yppp_1 ()  Int )
(declare-fun ypppp_1 ()  Int )
(declare-fun yppppp_1 ()  Int )
(declare-fun ypppppp_1 ()  Int )
(declare-fun max_1 ()  Int )
(declare-fun maxp_1 ()  Int )
(declare-fun maxpp_1 ()  Int )
(declare-fun maxppp_1 ()  Int )
(declare-fun maxpppp_1 ()  Int )
(declare-fun maxppppp_1 ()  Int )
(declare-fun maxpppppp_1 ()  Int )
(define-fun A_0 () Bool  (and (> x_0 0)
     (> max_0 x_0)
     (= i_0 0)
     (= y_0 0)
     (= pc_0 0)
     (> x_1 0)
     (> max_1 x_1)
     (= i_1 0)
     (= y_1 0)
     (= pc_1 0)
     (= max_0 max_1)) )
(define-fun A_1 () Bool  (and (or (and true (or (and (= pc_1 0)                     (< i_1 x_1)                     (= max_1 maxp_1)                     (= pc_1 pcp_1)                     (= x_1 xp_1)                     (= ip_1 (+ i_1 1))                     (= yp_1 (+ y_1 i_1)))                (and (= pc_1 0)                     (>= i_1 x_1)                     (= max_1 maxp_1)                     (= pcp_1 1)                     (= x_1 xp_1)                     (= ip_1 i_1)                     (= yp_1 y_1))                (and (= pc_1 1)                     (< i_1 max_1)                     (= max_1 maxp_1)                     (= pc_1 pcp_1)                     (= x_1 xp_1)                     (= ip_1 (+ i_1 1))                     (= yp_1 (+ y_1 i_1)))                (and (>= i_1 max_1)                     (= pc_1 pcp_1)                     (= max_1 maxp_1)                     (= x_1 xp_1)                     (= ip_1 i_1)                     (= yp_1 y_1))))            (and (= max_1 maxp_1)                 (= x_1 xp_1)                 (= i_1 ip_1)                 (= y_1 yp_1)                 (= pc_1 pcp_1)                 true                 (>= i_1 max_1)))        (= max_0 maxp_0)        (= x_0 xp_0)        (= i_0 ip_0)        (= y_0 yp_0)        (= pc_0 pcp_0))) 
(define-fun A_2 () Bool   ( and ( or ( and true ( or ( and ( = pcp_1 0 ) ( < ip_1 xp_1 ) ( = maxp_1 maxpp_1 ) ( = pcp_1 pcpp_1 ) ( = xp_1 xpp_1 ) ( = ipp_1 ( + ip_1 1 ) ) ( = ypp_1 ( + yp_1 ip_1 ) ) ) ( and ( = pcp_1 0 ) ( >= ip_1 xp_1 ) ( = maxp_1 maxpp_1 ) ( = pcpp_1 1 ) ( = xp_1 xpp_1 ) ( = ipp_1 ip_1 ) ( = ypp_1 yp_1 ) ) ( and ( = pcp_1 1 ) ( < ip_1 maxp_1 ) ( = maxp_1 maxpp_1 ) ( = pcp_1 pcpp_1 ) ( = xp_1 xpp_1 ) ( = ipp_1 ( + ip_1 1 ) ) ( = ypp_1 ( + yp_1 ip_1 ) ) ) ( and ( >= ip_1 maxp_1 ) ( = pcp_1 pcpp_1 ) ( = maxp_1 maxpp_1 ) ( = xp_1 xpp_1 ) ( = ipp_1 ip_1 ) ( = ypp_1 yp_1 ) ) ) ) ( and ( = maxp_1 maxpp_1 ) ( = xp_1 xpp_1 ) ( = ip_1 ipp_1 ) ( = yp_1 ypp_1 ) ( = pcp_1 pcpp_1 ) true ( >= ip_1 maxp_1 ) ) ) ( = maxp_0 maxpp_0 ) ( = xp_0 xpp_0 ) ( = ip_0 ipp_0 ) ( = yp_0 ypp_0 ) ( = pcp_0 pcpp_0 ) ) )
(define-fun A_3 () Bool   ( and ( or ( and true ( or ( and ( = pcpp_1 0 ) ( < ipp_1 xpp_1 ) ( = maxpp_1 maxppp_1 ) ( = pcpp_1 pcppp_1 ) ( = xpp_1 xppp_1 ) ( = ippp_1 ( + ipp_1 1 ) ) ( = yppp_1 ( + ypp_1 ipp_1 ) ) ) ( and ( = pcpp_1 0 ) ( >= ipp_1 xpp_1 ) ( = maxpp_1 maxppp_1 ) ( = pcppp_1 1 ) ( = xpp_1 xppp_1 ) ( = ippp_1 ipp_1 ) ( = yppp_1 ypp_1 ) ) ( and ( = pcpp_1 1 ) ( < ipp_1 maxpp_1 ) ( = maxpp_1 maxppp_1 ) ( = pcpp_1 pcppp_1 ) ( = xpp_1 xppp_1 ) ( = ippp_1 ( + ipp_1 1 ) ) ( = yppp_1 ( + ypp_1 ipp_1 ) ) ) ( and ( >= ipp_1 maxpp_1 ) ( = pcpp_1 pcppp_1 ) ( = maxpp_1 maxppp_1 ) ( = xpp_1 xppp_1 ) ( = ippp_1 ipp_1 ) ( = yppp_1 ypp_1 ) ) ) ) ( and ( = maxpp_1 maxppp_1 ) ( = xpp_1 xppp_1 ) ( = ipp_1 ippp_1 ) ( = ypp_1 yppp_1 ) ( = pcpp_1 pcppp_1 ) true ( >= ipp_1 maxpp_1 ) ) ) ( = maxpp_0 maxppp_0 ) ( = xpp_0 xppp_0 ) ( = ipp_0 ippp_0 ) ( = ypp_0 yppp_0 ) ( = pcpp_0 pcppp_0 ) ) )
(define-fun A_4 () Bool   ( and ( or ( and true ( or ( and ( = pcppp_0 0 ) ( < ippp_0 xppp_0 ) ( = maxppp_0 maxpppp_0 ) ( = pcppp_0 pcpppp_0 ) ( = xppp_0 xpppp_0 ) ( = ipppp_0 ( + ippp_0 1 ) ) ( = ypppp_0 ( + yppp_0 ippp_0 ) ) ) ( and ( = pcppp_0 0 ) ( >= ippp_0 xppp_0 ) ( = maxppp_0 maxpppp_0 ) ( = pcpppp_0 1 ) ( = xppp_0 xpppp_0 ) ( = ipppp_0 ippp_0 ) ( = ypppp_0 yppp_0 ) ) ( and ( = pcppp_0 1 ) ( < ippp_0 maxppp_0 ) ( = maxppp_0 maxpppp_0 ) ( = pcppp_0 pcpppp_0 ) ( = xppp_0 xpppp_0 ) ( = ipppp_0 ( + ippp_0 1 ) ) ( = ypppp_0 ( + yppp_0 ippp_0 ) ) ) ( and ( >= ippp_0 maxppp_0 ) ( = pcppp_0 pcpppp_0 ) ( = maxppp_0 maxpppp_0 ) ( = xppp_0 xpppp_0 ) ( = ipppp_0 ippp_0 ) ( = ypppp_0 yppp_0 ) ) ) ) ( and ( = maxppp_0 maxpppp_0 ) ( = xppp_0 xpppp_0 ) ( = ippp_0 ipppp_0 ) ( = yppp_0 ypppp_0 ) ( = pcppp_0 pcpppp_0 ) true ( >= ippp_0 maxppp_0 ) ) ) ( = maxppp_1 maxpppp_1 ) ( = xppp_1 xpppp_1 ) ( = ippp_1 ipppp_1 ) ( = yppp_1 ypppp_1 ) ( = pcppp_1 pcpppp_1 ) ) )
(define-fun A_5 () Bool   ( and ( or ( and true ( or ( and ( = pcpppp_0 0 ) ( < ipppp_0 xpppp_0 ) ( = maxpppp_0 maxppppp_0 ) ( = pcpppp_0 pcppppp_0 ) ( = xpppp_0 xppppp_0 ) ( = ippppp_0 ( + ipppp_0 1 ) ) ( = yppppp_0 ( + ypppp_0 ipppp_0 ) ) ) ( and ( = pcpppp_0 0 ) ( >= ipppp_0 xpppp_0 ) ( = maxpppp_0 maxppppp_0 ) ( = pcppppp_0 1 ) ( = xpppp_0 xppppp_0 ) ( = ippppp_0 ipppp_0 ) ( = yppppp_0 ypppp_0 ) ) ( and ( = pcpppp_0 1 ) ( < ipppp_0 maxpppp_0 ) ( = maxpppp_0 maxppppp_0 ) ( = pcpppp_0 pcppppp_0 ) ( = xpppp_0 xppppp_0 ) ( = ippppp_0 ( + ipppp_0 1 ) ) ( = yppppp_0 ( + ypppp_0 ipppp_0 ) ) ) ( and ( >= ipppp_0 maxpppp_0 ) ( = pcpppp_0 pcppppp_0 ) ( = maxpppp_0 maxppppp_0 ) ( = xpppp_0 xppppp_0 ) ( = ippppp_0 ipppp_0 ) ( = yppppp_0 ypppp_0 ) ) ) ) ( and ( = maxpppp_0 maxppppp_0 ) ( = xpppp_0 xppppp_0 ) ( = ipppp_0 ippppp_0 ) ( = ypppp_0 yppppp_0 ) ( = pcpppp_0 pcppppp_0 ) true ( >= ipppp_0 maxpppp_0 ) ) ) ( = maxpppp_1 maxppppp_1 ) ( = xpppp_1 xppppp_1 ) ( = ipppp_1 ippppp_1 ) ( = ypppp_1 yppppp_1 ) ( = pcpppp_1 pcppppp_1 ) ) )
(define-fun A_6 () Bool   ( and ( or ( and true ( or ( and ( = pcppppp_0 0 ) ( < ippppp_0 xppppp_0 ) ( = maxppppp_0 maxpppppp_0 ) ( = pcppppp_0 pcpppppp_0 ) ( = xppppp_0 xpppppp_0 ) ( = ipppppp_0 ( + ippppp_0 1 ) ) ( = ypppppp_0 ( + yppppp_0 ippppp_0 ) ) ) ( and ( = pcppppp_0 0 ) ( >= ippppp_0 xppppp_0 ) ( = maxppppp_0 maxpppppp_0 ) ( = pcpppppp_0 1 ) ( = xppppp_0 xpppppp_0 ) ( = ipppppp_0 ippppp_0 ) ( = ypppppp_0 yppppp_0 ) ) ( and ( = pcppppp_0 1 ) ( < ippppp_0 maxppppp_0 ) ( = maxppppp_0 maxpppppp_0 ) ( = pcppppp_0 pcpppppp_0 ) ( = xppppp_0 xpppppp_0 ) ( = ipppppp_0 ( + ippppp_0 1 ) ) ( = ypppppp_0 ( + yppppp_0 ippppp_0 ) ) ) ( and ( >= ippppp_0 maxppppp_0 ) ( = pcppppp_0 pcpppppp_0 ) ( = maxppppp_0 maxpppppp_0 ) ( = xppppp_0 xpppppp_0 ) ( = ipppppp_0 ippppp_0 ) ( = ypppppp_0 yppppp_0 ) ) ) ) ( and ( = maxppppp_0 maxpppppp_0 ) ( = xppppp_0 xpppppp_0 ) ( = ippppp_0 ipppppp_0 ) ( = yppppp_0 ypppppp_0 ) ( = pcppppp_0 pcpppppp_0 ) true ( >= ippppp_0 maxppppp_0 ) ) ) ( = maxppppp_1 maxpppppp_1 ) ( = xppppp_1 xpppppp_1 ) ( = ippppp_1 ipppppp_1 ) ( = yppppp_1 ypppppp_1 ) ( = pcppppp_1 pcpppppp_1 ) ) )
(define-fun A_7() Bool      ( and ( not ( = ypppppp_0 ypppppp_1 ) ) ( not ( = ipppppp_0 ipppppp_1 ) ) ( = maxpppppp_0 maxpppppp_1 ) ( not ( = ( + xpppppp_0 ( * ( - 1 ) ipppppp_0 ) ( * ( - 1 ) maxpppppp_1 ) ipppppp_1 ) ( - 1 ) ) ) ( not ( <= xpppppp_0 0 ) ) ( not ( <= maxpppppp_0 xpppppp_0 ) ) ( <= maxpppppp_0 ipppppp_0 ) ( not ( = pcpppppp_0 0 ) ) ( = pcpppppp_0 1 ) ( not ( = ypppppp_0 0 ) ) ( not ( = ipppppp_0 0 ) ) ( not ( <= xpppppp_1 0 ) ) ( not ( <= maxpppppp_1 xpppppp_1 ) ) ( <= maxpppppp_1 ipppppp_1 ) ( not ( = pcpppppp_1 0 ) ) ( = pcpppppp_1 1 ) ( not ( = ypppppp_1 0 ) ) ( not ( = ipppppp_1 0 ) ) ))

(assert ( ! A_0 :interpolation-group g0))
(assert ( ! A_1 :interpolation-group g1))
(assert ( ! A_2 :interpolation-group g2))
(assert ( ! A_3 :interpolation-group g3))
(assert ( ! A_4 :interpolation-group g4))
(assert ( ! A_5 :interpolation-group g5))
(assert ( ! A_6 :interpolation-group g6))
(assert ( ! A_7 :interpolation-group g7))
( check-sat )
( get-interpolant ( g0))
( get-interpolant ( g0 g1))
( get-interpolant ( g0 g1 g2))
( get-interpolant ( g0 g1 g2 g3))
( get-interpolant ( g0 g1 g2 g3 g4))
( get-interpolant ( g0 g1 g2 g3 g4 g5))
( get-interpolant ( g0 g1 g2 g3 g4 g5 g6))
(exit)